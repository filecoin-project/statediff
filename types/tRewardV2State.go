package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _RewardV2State struct {
	CumsumBaseline _BigInt
	CumsumRealized _BigInt
	EffectiveNetworkTime _ChainEpoch
	EffectiveBaselinePower _BigInt
	ThisEpochReward _BigInt
	ThisEpochRewardSmoothed _V0FilterEstimate
	ThisEpochBaselinePower _BigInt
	Epoch _ChainEpoch
	TotalStoragePowerReward _BigInt
	SimpleTotal _BigInt
	BaselineTotal _BigInt
}
type RewardV2State = *_RewardV2State

func (n _RewardV2State) FieldCumsumBaseline()	BigInt {
	return &n.CumsumBaseline
}
func (n _RewardV2State) FieldCumsumRealized()	BigInt {
	return &n.CumsumRealized
}
func (n _RewardV2State) FieldEffectiveNetworkTime()	ChainEpoch {
	return &n.EffectiveNetworkTime
}
func (n _RewardV2State) FieldEffectiveBaselinePower()	BigInt {
	return &n.EffectiveBaselinePower
}
func (n _RewardV2State) FieldThisEpochReward()	BigInt {
	return &n.ThisEpochReward
}
func (n _RewardV2State) FieldThisEpochRewardSmoothed()	V0FilterEstimate {
	return &n.ThisEpochRewardSmoothed
}
func (n _RewardV2State) FieldThisEpochBaselinePower()	BigInt {
	return &n.ThisEpochBaselinePower
}
func (n _RewardV2State) FieldEpoch()	ChainEpoch {
	return &n.Epoch
}
func (n _RewardV2State) FieldTotalStoragePowerReward()	BigInt {
	return &n.TotalStoragePowerReward
}
func (n _RewardV2State) FieldSimpleTotal()	BigInt {
	return &n.SimpleTotal
}
func (n _RewardV2State) FieldBaselineTotal()	BigInt {
	return &n.BaselineTotal
}
type _RewardV2State__Maybe struct {
	m schema.Maybe
	v RewardV2State
}
type MaybeRewardV2State = *_RewardV2State__Maybe

func (m MaybeRewardV2State) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeRewardV2State) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeRewardV2State) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeRewardV2State) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeRewardV2State) Must() RewardV2State {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__RewardV2State_CumsumBaseline = _String{"CumsumBaseline"}
	fieldName__RewardV2State_CumsumRealized = _String{"CumsumRealized"}
	fieldName__RewardV2State_EffectiveNetworkTime = _String{"EffectiveNetworkTime"}
	fieldName__RewardV2State_EffectiveBaselinePower = _String{"EffectiveBaselinePower"}
	fieldName__RewardV2State_ThisEpochReward = _String{"ThisEpochReward"}
	fieldName__RewardV2State_ThisEpochRewardSmoothed = _String{"ThisEpochRewardSmoothed"}
	fieldName__RewardV2State_ThisEpochBaselinePower = _String{"ThisEpochBaselinePower"}
	fieldName__RewardV2State_Epoch = _String{"Epoch"}
	fieldName__RewardV2State_TotalStoragePowerReward = _String{"TotalStoragePowerReward"}
	fieldName__RewardV2State_SimpleTotal = _String{"SimpleTotal"}
	fieldName__RewardV2State_BaselineTotal = _String{"BaselineTotal"}
)
var _ ipld.Node = (RewardV2State)(&_RewardV2State{})
var _ schema.TypedNode = (RewardV2State)(&_RewardV2State{})
func (RewardV2State) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n RewardV2State) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "CumsumBaseline":
		return &n.CumsumBaseline, nil
	case "CumsumRealized":
		return &n.CumsumRealized, nil
	case "EffectiveNetworkTime":
		return &n.EffectiveNetworkTime, nil
	case "EffectiveBaselinePower":
		return &n.EffectiveBaselinePower, nil
	case "ThisEpochReward":
		return &n.ThisEpochReward, nil
	case "ThisEpochRewardSmoothed":
		return &n.ThisEpochRewardSmoothed, nil
	case "ThisEpochBaselinePower":
		return &n.ThisEpochBaselinePower, nil
	case "Epoch":
		return &n.Epoch, nil
	case "TotalStoragePowerReward":
		return &n.TotalStoragePowerReward, nil
	case "SimpleTotal":
		return &n.SimpleTotal, nil
	case "BaselineTotal":
		return &n.BaselineTotal, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n RewardV2State) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (RewardV2State) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"types.RewardV2State"}.LookupByIndex(0)
}
func (n RewardV2State) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n RewardV2State) MapIterator() ipld.MapIterator {
	return &_RewardV2State__MapItr{n, 0}
}

type _RewardV2State__MapItr struct {
	n RewardV2State
	idx  int
}

func (itr *_RewardV2State__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 11 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__RewardV2State_CumsumBaseline
		v = &itr.n.CumsumBaseline
	case 1:
		k = &fieldName__RewardV2State_CumsumRealized
		v = &itr.n.CumsumRealized
	case 2:
		k = &fieldName__RewardV2State_EffectiveNetworkTime
		v = &itr.n.EffectiveNetworkTime
	case 3:
		k = &fieldName__RewardV2State_EffectiveBaselinePower
		v = &itr.n.EffectiveBaselinePower
	case 4:
		k = &fieldName__RewardV2State_ThisEpochReward
		v = &itr.n.ThisEpochReward
	case 5:
		k = &fieldName__RewardV2State_ThisEpochRewardSmoothed
		v = &itr.n.ThisEpochRewardSmoothed
	case 6:
		k = &fieldName__RewardV2State_ThisEpochBaselinePower
		v = &itr.n.ThisEpochBaselinePower
	case 7:
		k = &fieldName__RewardV2State_Epoch
		v = &itr.n.Epoch
	case 8:
		k = &fieldName__RewardV2State_TotalStoragePowerReward
		v = &itr.n.TotalStoragePowerReward
	case 9:
		k = &fieldName__RewardV2State_SimpleTotal
		v = &itr.n.SimpleTotal
	case 10:
		k = &fieldName__RewardV2State_BaselineTotal
		v = &itr.n.BaselineTotal
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_RewardV2State__MapItr) Done() bool {
	return itr.idx >= 11
}

func (RewardV2State) ListIterator() ipld.ListIterator {
	return nil
}
func (RewardV2State) Length() int {
	return 11
}
func (RewardV2State) IsAbsent() bool {
	return false
}
func (RewardV2State) IsNull() bool {
	return false
}
func (RewardV2State) AsBool() (bool, error) {
	return mixins.Map{"types.RewardV2State"}.AsBool()
}
func (RewardV2State) AsInt() (int, error) {
	return mixins.Map{"types.RewardV2State"}.AsInt()
}
func (RewardV2State) AsFloat() (float64, error) {
	return mixins.Map{"types.RewardV2State"}.AsFloat()
}
func (RewardV2State) AsString() (string, error) {
	return mixins.Map{"types.RewardV2State"}.AsString()
}
func (RewardV2State) AsBytes() ([]byte, error) {
	return mixins.Map{"types.RewardV2State"}.AsBytes()
}
func (RewardV2State) AsLink() (ipld.Link, error) {
	return mixins.Map{"types.RewardV2State"}.AsLink()
}
func (RewardV2State) Prototype() ipld.NodePrototype {
	return _RewardV2State__Prototype{}
}
type _RewardV2State__Prototype struct{}

func (_RewardV2State__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _RewardV2State__Builder
	nb.Reset()
	return &nb
}
type _RewardV2State__Builder struct {
	_RewardV2State__Assembler
}
func (nb *_RewardV2State__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_RewardV2State__Builder) Reset() {
	var w _RewardV2State
	var m schema.Maybe
	*nb = _RewardV2State__Builder{_RewardV2State__Assembler{w: &w, m: &m}}
}
type _RewardV2State__Assembler struct {
	w *_RewardV2State
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_CumsumBaseline _BigInt__Assembler
	ca_CumsumRealized _BigInt__Assembler
	ca_EffectiveNetworkTime _ChainEpoch__Assembler
	ca_EffectiveBaselinePower _BigInt__Assembler
	ca_ThisEpochReward _BigInt__Assembler
	ca_ThisEpochRewardSmoothed _V0FilterEstimate__Assembler
	ca_ThisEpochBaselinePower _BigInt__Assembler
	ca_Epoch _ChainEpoch__Assembler
	ca_TotalStoragePowerReward _BigInt__Assembler
	ca_SimpleTotal _BigInt__Assembler
	ca_BaselineTotal _BigInt__Assembler
	}

func (na *_RewardV2State__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_CumsumBaseline.reset()
	na.ca_CumsumRealized.reset()
	na.ca_EffectiveNetworkTime.reset()
	na.ca_EffectiveBaselinePower.reset()
	na.ca_ThisEpochReward.reset()
	na.ca_ThisEpochRewardSmoothed.reset()
	na.ca_ThisEpochBaselinePower.reset()
	na.ca_Epoch.reset()
	na.ca_TotalStoragePowerReward.reset()
	na.ca_SimpleTotal.reset()
	na.ca_BaselineTotal.reset()
}

var (
	fieldBit__RewardV2State_CumsumBaseline = 1 << 0
	fieldBit__RewardV2State_CumsumRealized = 1 << 1
	fieldBit__RewardV2State_EffectiveNetworkTime = 1 << 2
	fieldBit__RewardV2State_EffectiveBaselinePower = 1 << 3
	fieldBit__RewardV2State_ThisEpochReward = 1 << 4
	fieldBit__RewardV2State_ThisEpochRewardSmoothed = 1 << 5
	fieldBit__RewardV2State_ThisEpochBaselinePower = 1 << 6
	fieldBit__RewardV2State_Epoch = 1 << 7
	fieldBit__RewardV2State_TotalStoragePowerReward = 1 << 8
	fieldBit__RewardV2State_SimpleTotal = 1 << 9
	fieldBit__RewardV2State_BaselineTotal = 1 << 10
	fieldBits__RewardV2State_sufficient = 0 + 1 << 0 + 1 << 1 + 1 << 2 + 1 << 3 + 1 << 4 + 1 << 5 + 1 << 6 + 1 << 7 + 1 << 8 + 1 << 9 + 1 << 10
)
func (na *_RewardV2State__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_RewardV2State{}
	}
	return na, nil
}
func (_RewardV2State__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"types.RewardV2State"}.BeginList(0)
}
func (na *_RewardV2State__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"types.RewardV2State"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_RewardV2State__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"types.RewardV2State"}.AssignBool(false)
}
func (_RewardV2State__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"types.RewardV2State"}.AssignInt(0)
}
func (_RewardV2State__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"types.RewardV2State"}.AssignFloat(0)
}
func (_RewardV2State__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"types.RewardV2State"}.AssignString("")
}
func (_RewardV2State__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"types.RewardV2State"}.AssignBytes(nil)
}
func (_RewardV2State__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"types.RewardV2State"}.AssignLink(nil)
}
func (na *_RewardV2State__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_RewardV2State); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "types.RewardV2State", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_RewardV2State__Assembler) Prototype() ipld.NodePrototype {
	return _RewardV2State__Prototype{}
}
func (ma *_RewardV2State__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_CumsumBaseline.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_CumsumRealized.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_EffectiveNetworkTime.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_EffectiveBaselinePower.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 4:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ThisEpochReward.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 5:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ThisEpochRewardSmoothed.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 6:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ThisEpochBaselinePower.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 7:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Epoch.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 8:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_TotalStoragePowerReward.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 9:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_SimpleTotal.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 10:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_BaselineTotal.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_RewardV2State__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "CumsumBaseline":
		if ma.s & fieldBit__RewardV2State_CumsumBaseline != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__RewardV2State_CumsumBaseline}
		}
		ma.s += fieldBit__RewardV2State_CumsumBaseline
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_CumsumBaseline.w = &ma.w.CumsumBaseline
		ma.ca_CumsumBaseline.m = &ma.cm
		return &ma.ca_CumsumBaseline, nil
	case "CumsumRealized":
		if ma.s & fieldBit__RewardV2State_CumsumRealized != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__RewardV2State_CumsumRealized}
		}
		ma.s += fieldBit__RewardV2State_CumsumRealized
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_CumsumRealized.w = &ma.w.CumsumRealized
		ma.ca_CumsumRealized.m = &ma.cm
		return &ma.ca_CumsumRealized, nil
	case "EffectiveNetworkTime":
		if ma.s & fieldBit__RewardV2State_EffectiveNetworkTime != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__RewardV2State_EffectiveNetworkTime}
		}
		ma.s += fieldBit__RewardV2State_EffectiveNetworkTime
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_EffectiveNetworkTime.w = &ma.w.EffectiveNetworkTime
		ma.ca_EffectiveNetworkTime.m = &ma.cm
		return &ma.ca_EffectiveNetworkTime, nil
	case "EffectiveBaselinePower":
		if ma.s & fieldBit__RewardV2State_EffectiveBaselinePower != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__RewardV2State_EffectiveBaselinePower}
		}
		ma.s += fieldBit__RewardV2State_EffectiveBaselinePower
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_EffectiveBaselinePower.w = &ma.w.EffectiveBaselinePower
		ma.ca_EffectiveBaselinePower.m = &ma.cm
		return &ma.ca_EffectiveBaselinePower, nil
	case "ThisEpochReward":
		if ma.s & fieldBit__RewardV2State_ThisEpochReward != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__RewardV2State_ThisEpochReward}
		}
		ma.s += fieldBit__RewardV2State_ThisEpochReward
		ma.state = maState_midValue
		ma.f = 4
		ma.ca_ThisEpochReward.w = &ma.w.ThisEpochReward
		ma.ca_ThisEpochReward.m = &ma.cm
		return &ma.ca_ThisEpochReward, nil
	case "ThisEpochRewardSmoothed":
		if ma.s & fieldBit__RewardV2State_ThisEpochRewardSmoothed != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__RewardV2State_ThisEpochRewardSmoothed}
		}
		ma.s += fieldBit__RewardV2State_ThisEpochRewardSmoothed
		ma.state = maState_midValue
		ma.f = 5
		ma.ca_ThisEpochRewardSmoothed.w = &ma.w.ThisEpochRewardSmoothed
		ma.ca_ThisEpochRewardSmoothed.m = &ma.cm
		return &ma.ca_ThisEpochRewardSmoothed, nil
	case "ThisEpochBaselinePower":
		if ma.s & fieldBit__RewardV2State_ThisEpochBaselinePower != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__RewardV2State_ThisEpochBaselinePower}
		}
		ma.s += fieldBit__RewardV2State_ThisEpochBaselinePower
		ma.state = maState_midValue
		ma.f = 6
		ma.ca_ThisEpochBaselinePower.w = &ma.w.ThisEpochBaselinePower
		ma.ca_ThisEpochBaselinePower.m = &ma.cm
		return &ma.ca_ThisEpochBaselinePower, nil
	case "Epoch":
		if ma.s & fieldBit__RewardV2State_Epoch != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__RewardV2State_Epoch}
		}
		ma.s += fieldBit__RewardV2State_Epoch
		ma.state = maState_midValue
		ma.f = 7
		ma.ca_Epoch.w = &ma.w.Epoch
		ma.ca_Epoch.m = &ma.cm
		return &ma.ca_Epoch, nil
	case "TotalStoragePowerReward":
		if ma.s & fieldBit__RewardV2State_TotalStoragePowerReward != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__RewardV2State_TotalStoragePowerReward}
		}
		ma.s += fieldBit__RewardV2State_TotalStoragePowerReward
		ma.state = maState_midValue
		ma.f = 8
		ma.ca_TotalStoragePowerReward.w = &ma.w.TotalStoragePowerReward
		ma.ca_TotalStoragePowerReward.m = &ma.cm
		return &ma.ca_TotalStoragePowerReward, nil
	case "SimpleTotal":
		if ma.s & fieldBit__RewardV2State_SimpleTotal != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__RewardV2State_SimpleTotal}
		}
		ma.s += fieldBit__RewardV2State_SimpleTotal
		ma.state = maState_midValue
		ma.f = 9
		ma.ca_SimpleTotal.w = &ma.w.SimpleTotal
		ma.ca_SimpleTotal.m = &ma.cm
		return &ma.ca_SimpleTotal, nil
	case "BaselineTotal":
		if ma.s & fieldBit__RewardV2State_BaselineTotal != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__RewardV2State_BaselineTotal}
		}
		ma.s += fieldBit__RewardV2State_BaselineTotal
		ma.state = maState_midValue
		ma.f = 10
		ma.ca_BaselineTotal.w = &ma.w.BaselineTotal
		ma.ca_BaselineTotal.m = &ma.cm
		return &ma.ca_BaselineTotal, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"types.RewardV2State", Key:&_String{k}}
	}
}
func (ma *_RewardV2State__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_RewardV2State__KeyAssembler)(ma)
}
func (ma *_RewardV2State__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_CumsumBaseline.w = &ma.w.CumsumBaseline
		ma.ca_CumsumBaseline.m = &ma.cm
		return &ma.ca_CumsumBaseline
	case 1:
		ma.ca_CumsumRealized.w = &ma.w.CumsumRealized
		ma.ca_CumsumRealized.m = &ma.cm
		return &ma.ca_CumsumRealized
	case 2:
		ma.ca_EffectiveNetworkTime.w = &ma.w.EffectiveNetworkTime
		ma.ca_EffectiveNetworkTime.m = &ma.cm
		return &ma.ca_EffectiveNetworkTime
	case 3:
		ma.ca_EffectiveBaselinePower.w = &ma.w.EffectiveBaselinePower
		ma.ca_EffectiveBaselinePower.m = &ma.cm
		return &ma.ca_EffectiveBaselinePower
	case 4:
		ma.ca_ThisEpochReward.w = &ma.w.ThisEpochReward
		ma.ca_ThisEpochReward.m = &ma.cm
		return &ma.ca_ThisEpochReward
	case 5:
		ma.ca_ThisEpochRewardSmoothed.w = &ma.w.ThisEpochRewardSmoothed
		ma.ca_ThisEpochRewardSmoothed.m = &ma.cm
		return &ma.ca_ThisEpochRewardSmoothed
	case 6:
		ma.ca_ThisEpochBaselinePower.w = &ma.w.ThisEpochBaselinePower
		ma.ca_ThisEpochBaselinePower.m = &ma.cm
		return &ma.ca_ThisEpochBaselinePower
	case 7:
		ma.ca_Epoch.w = &ma.w.Epoch
		ma.ca_Epoch.m = &ma.cm
		return &ma.ca_Epoch
	case 8:
		ma.ca_TotalStoragePowerReward.w = &ma.w.TotalStoragePowerReward
		ma.ca_TotalStoragePowerReward.m = &ma.cm
		return &ma.ca_TotalStoragePowerReward
	case 9:
		ma.ca_SimpleTotal.w = &ma.w.SimpleTotal
		ma.ca_SimpleTotal.m = &ma.cm
		return &ma.ca_SimpleTotal
	case 10:
		ma.ca_BaselineTotal.w = &ma.w.BaselineTotal
		ma.ca_BaselineTotal.m = &ma.cm
		return &ma.ca_BaselineTotal
	default:
		panic("unreachable")
	}
}
func (ma *_RewardV2State__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_RewardV2State__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_RewardV2State__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _RewardV2State__KeyAssembler _RewardV2State__Assembler
func (_RewardV2State__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"types.RewardV2State.KeyAssembler"}.BeginMap(0)
}
func (_RewardV2State__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"types.RewardV2State.KeyAssembler"}.BeginList(0)
}
func (na *_RewardV2State__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"types.RewardV2State.KeyAssembler"}.AssignNull()
}
func (_RewardV2State__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"types.RewardV2State.KeyAssembler"}.AssignBool(false)
}
func (_RewardV2State__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"types.RewardV2State.KeyAssembler"}.AssignInt(0)
}
func (_RewardV2State__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"types.RewardV2State.KeyAssembler"}.AssignFloat(0)
}
func (ka *_RewardV2State__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "CumsumBaseline":
		if ka.s & fieldBit__RewardV2State_CumsumBaseline != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__RewardV2State_CumsumBaseline}
		}
		ka.s += fieldBit__RewardV2State_CumsumBaseline
		ka.state = maState_expectValue
		ka.f = 0
	case "CumsumRealized":
		if ka.s & fieldBit__RewardV2State_CumsumRealized != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__RewardV2State_CumsumRealized}
		}
		ka.s += fieldBit__RewardV2State_CumsumRealized
		ka.state = maState_expectValue
		ka.f = 1
	case "EffectiveNetworkTime":
		if ka.s & fieldBit__RewardV2State_EffectiveNetworkTime != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__RewardV2State_EffectiveNetworkTime}
		}
		ka.s += fieldBit__RewardV2State_EffectiveNetworkTime
		ka.state = maState_expectValue
		ka.f = 2
	case "EffectiveBaselinePower":
		if ka.s & fieldBit__RewardV2State_EffectiveBaselinePower != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__RewardV2State_EffectiveBaselinePower}
		}
		ka.s += fieldBit__RewardV2State_EffectiveBaselinePower
		ka.state = maState_expectValue
		ka.f = 3
	case "ThisEpochReward":
		if ka.s & fieldBit__RewardV2State_ThisEpochReward != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__RewardV2State_ThisEpochReward}
		}
		ka.s += fieldBit__RewardV2State_ThisEpochReward
		ka.state = maState_expectValue
		ka.f = 4
	case "ThisEpochRewardSmoothed":
		if ka.s & fieldBit__RewardV2State_ThisEpochRewardSmoothed != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__RewardV2State_ThisEpochRewardSmoothed}
		}
		ka.s += fieldBit__RewardV2State_ThisEpochRewardSmoothed
		ka.state = maState_expectValue
		ka.f = 5
	case "ThisEpochBaselinePower":
		if ka.s & fieldBit__RewardV2State_ThisEpochBaselinePower != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__RewardV2State_ThisEpochBaselinePower}
		}
		ka.s += fieldBit__RewardV2State_ThisEpochBaselinePower
		ka.state = maState_expectValue
		ka.f = 6
	case "Epoch":
		if ka.s & fieldBit__RewardV2State_Epoch != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__RewardV2State_Epoch}
		}
		ka.s += fieldBit__RewardV2State_Epoch
		ka.state = maState_expectValue
		ka.f = 7
	case "TotalStoragePowerReward":
		if ka.s & fieldBit__RewardV2State_TotalStoragePowerReward != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__RewardV2State_TotalStoragePowerReward}
		}
		ka.s += fieldBit__RewardV2State_TotalStoragePowerReward
		ka.state = maState_expectValue
		ka.f = 8
	case "SimpleTotal":
		if ka.s & fieldBit__RewardV2State_SimpleTotal != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__RewardV2State_SimpleTotal}
		}
		ka.s += fieldBit__RewardV2State_SimpleTotal
		ka.state = maState_expectValue
		ka.f = 9
	case "BaselineTotal":
		if ka.s & fieldBit__RewardV2State_BaselineTotal != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__RewardV2State_BaselineTotal}
		}
		ka.s += fieldBit__RewardV2State_BaselineTotal
		ka.state = maState_expectValue
		ka.f = 10
	default:
		return ipld.ErrInvalidKey{TypeName:"types.RewardV2State", Key:&_String{k}}
	}
	return nil
}
func (_RewardV2State__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"types.RewardV2State.KeyAssembler"}.AssignBytes(nil)
}
func (_RewardV2State__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"types.RewardV2State.KeyAssembler"}.AssignLink(nil)
}
func (ka *_RewardV2State__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_RewardV2State__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (RewardV2State) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n RewardV2State) Representation() ipld.Node {
	return (*_RewardV2State__Repr)(n)
}
type _RewardV2State__Repr _RewardV2State
var _ ipld.Node = &_RewardV2State__Repr{}
func (_RewardV2State__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_List
}
func (_RewardV2State__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"types.RewardV2State.Repr"}.LookupByString("")
}
func (n *_RewardV2State__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ki, err := key.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(ki)
}
func (n *_RewardV2State__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	switch idx {
	case 0:
		return n.CumsumBaseline.Representation(), nil
	case 1:
		return n.CumsumRealized.Representation(), nil
	case 2:
		return n.EffectiveNetworkTime.Representation(), nil
	case 3:
		return n.EffectiveBaselinePower.Representation(), nil
	case 4:
		return n.ThisEpochReward.Representation(), nil
	case 5:
		return n.ThisEpochRewardSmoothed.Representation(), nil
	case 6:
		return n.ThisEpochBaselinePower.Representation(), nil
	case 7:
		return n.Epoch.Representation(), nil
	case 8:
		return n.TotalStoragePowerReward.Representation(), nil
	case 9:
		return n.SimpleTotal.Representation(), nil
	case 10:
		return n.BaselineTotal.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(idx)}
	}
}
func (n _RewardV2State__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "types.RewardV2State.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_RewardV2State__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (n *_RewardV2State__Repr) ListIterator() ipld.ListIterator {
	return &_RewardV2State__ReprListItr{n, 0}
}

type _RewardV2State__ReprListItr struct {
	n   *_RewardV2State__Repr
	idx int
	
}

func (itr *_RewardV2State__ReprListItr) Next() (idx int, v ipld.Node, err error) {
	if itr.idx >= 11 {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		idx = itr.idx
		v = itr.n.CumsumBaseline.Representation()
	case 1:
		idx = itr.idx
		v = itr.n.CumsumRealized.Representation()
	case 2:
		idx = itr.idx
		v = itr.n.EffectiveNetworkTime.Representation()
	case 3:
		idx = itr.idx
		v = itr.n.EffectiveBaselinePower.Representation()
	case 4:
		idx = itr.idx
		v = itr.n.ThisEpochReward.Representation()
	case 5:
		idx = itr.idx
		v = itr.n.ThisEpochRewardSmoothed.Representation()
	case 6:
		idx = itr.idx
		v = itr.n.ThisEpochBaselinePower.Representation()
	case 7:
		idx = itr.idx
		v = itr.n.Epoch.Representation()
	case 8:
		idx = itr.idx
		v = itr.n.TotalStoragePowerReward.Representation()
	case 9:
		idx = itr.idx
		v = itr.n.SimpleTotal.Representation()
	case 10:
		idx = itr.idx
		v = itr.n.BaselineTotal.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_RewardV2State__ReprListItr) Done() bool {
	return itr.idx >= 11
}

func (rn *_RewardV2State__Repr) Length() int {
	l := 11
	return l
}
func (_RewardV2State__Repr) IsAbsent() bool {
	return false
}
func (_RewardV2State__Repr) IsNull() bool {
	return false
}
func (_RewardV2State__Repr) AsBool() (bool, error) {
	return mixins.List{"types.RewardV2State.Repr"}.AsBool()
}
func (_RewardV2State__Repr) AsInt() (int, error) {
	return mixins.List{"types.RewardV2State.Repr"}.AsInt()
}
func (_RewardV2State__Repr) AsFloat() (float64, error) {
	return mixins.List{"types.RewardV2State.Repr"}.AsFloat()
}
func (_RewardV2State__Repr) AsString() (string, error) {
	return mixins.List{"types.RewardV2State.Repr"}.AsString()
}
func (_RewardV2State__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"types.RewardV2State.Repr"}.AsBytes()
}
func (_RewardV2State__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"types.RewardV2State.Repr"}.AsLink()
}
func (_RewardV2State__Repr) Prototype() ipld.NodePrototype {
	return _RewardV2State__ReprPrototype{}
}
type _RewardV2State__ReprPrototype struct{}

func (_RewardV2State__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _RewardV2State__ReprBuilder
	nb.Reset()
	return &nb
}
type _RewardV2State__ReprBuilder struct {
	_RewardV2State__ReprAssembler
}
func (nb *_RewardV2State__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_RewardV2State__ReprBuilder) Reset() {
	var w _RewardV2State
	var m schema.Maybe
	*nb = _RewardV2State__ReprBuilder{_RewardV2State__ReprAssembler{w: &w, m: &m}}
}
type _RewardV2State__ReprAssembler struct {
	w *_RewardV2State
	m *schema.Maybe
	state laState
	f int

	cm schema.Maybe
	ca_CumsumBaseline _BigInt__ReprAssembler
	ca_CumsumRealized _BigInt__ReprAssembler
	ca_EffectiveNetworkTime _ChainEpoch__ReprAssembler
	ca_EffectiveBaselinePower _BigInt__ReprAssembler
	ca_ThisEpochReward _BigInt__ReprAssembler
	ca_ThisEpochRewardSmoothed _V0FilterEstimate__ReprAssembler
	ca_ThisEpochBaselinePower _BigInt__ReprAssembler
	ca_Epoch _ChainEpoch__ReprAssembler
	ca_TotalStoragePowerReward _BigInt__ReprAssembler
	ca_SimpleTotal _BigInt__ReprAssembler
	ca_BaselineTotal _BigInt__ReprAssembler
	}

func (na *_RewardV2State__ReprAssembler) reset() {
	na.state = laState_initial
	na.f = 0
	na.ca_CumsumBaseline.reset()
	na.ca_CumsumRealized.reset()
	na.ca_EffectiveNetworkTime.reset()
	na.ca_EffectiveBaselinePower.reset()
	na.ca_ThisEpochReward.reset()
	na.ca_ThisEpochRewardSmoothed.reset()
	na.ca_ThisEpochBaselinePower.reset()
	na.ca_Epoch.reset()
	na.ca_TotalStoragePowerReward.reset()
	na.ca_SimpleTotal.reset()
	na.ca_BaselineTotal.reset()
}
func (_RewardV2State__ReprAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"types.RewardV2State.Repr"}.BeginMap(0)
}
func (na *_RewardV2State__ReprAssembler) BeginList(int) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_RewardV2State{}
	}
	return na, nil
}
func (na *_RewardV2State__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"types.RewardV2State.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_RewardV2State__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"types.RewardV2State.Repr"}.AssignBool(false)
}
func (_RewardV2State__ReprAssembler) AssignInt(int) error {
	return mixins.ListAssembler{"types.RewardV2State.Repr"}.AssignInt(0)
}
func (_RewardV2State__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"types.RewardV2State.Repr"}.AssignFloat(0)
}
func (_RewardV2State__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"types.RewardV2State.Repr"}.AssignString("")
}
func (_RewardV2State__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"types.RewardV2State.Repr"}.AssignBytes(nil)
}
func (_RewardV2State__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"types.RewardV2State.Repr"}.AssignLink(nil)
}
func (na *_RewardV2State__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_RewardV2State); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_List {
		return ipld.ErrWrongKind{TypeName: "types.RewardV2State.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustList, ActualKind: v.ReprKind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_RewardV2State__ReprAssembler) Prototype() ipld.NodePrototype {
	return _RewardV2State__ReprPrototype{}
}
func (la *_RewardV2State__ReprAssembler) valueFinishTidy() bool {
	switch la.f {
	case 0:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 1:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 2:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 3:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 4:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 5:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 6:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 7:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 8:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 9:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 10:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (la *_RewardV2State__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	if la.f >= 11 {
		return nil // schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(11)} // FIXME: need an error thunking assembler!  it has returned.  sigh.
	}
	la.state = laState_midValue
	switch la.f {
	case 0:
		la.ca_CumsumBaseline.w = &la.w.CumsumBaseline
		la.ca_CumsumBaseline.m = &la.cm
		return &la.ca_CumsumBaseline
	case 1:
		la.ca_CumsumRealized.w = &la.w.CumsumRealized
		la.ca_CumsumRealized.m = &la.cm
		return &la.ca_CumsumRealized
	case 2:
		la.ca_EffectiveNetworkTime.w = &la.w.EffectiveNetworkTime
		la.ca_EffectiveNetworkTime.m = &la.cm
		return &la.ca_EffectiveNetworkTime
	case 3:
		la.ca_EffectiveBaselinePower.w = &la.w.EffectiveBaselinePower
		la.ca_EffectiveBaselinePower.m = &la.cm
		return &la.ca_EffectiveBaselinePower
	case 4:
		la.ca_ThisEpochReward.w = &la.w.ThisEpochReward
		la.ca_ThisEpochReward.m = &la.cm
		return &la.ca_ThisEpochReward
	case 5:
		la.ca_ThisEpochRewardSmoothed.w = &la.w.ThisEpochRewardSmoothed
		la.ca_ThisEpochRewardSmoothed.m = &la.cm
		return &la.ca_ThisEpochRewardSmoothed
	case 6:
		la.ca_ThisEpochBaselinePower.w = &la.w.ThisEpochBaselinePower
		la.ca_ThisEpochBaselinePower.m = &la.cm
		return &la.ca_ThisEpochBaselinePower
	case 7:
		la.ca_Epoch.w = &la.w.Epoch
		la.ca_Epoch.m = &la.cm
		return &la.ca_Epoch
	case 8:
		la.ca_TotalStoragePowerReward.w = &la.w.TotalStoragePowerReward
		la.ca_TotalStoragePowerReward.m = &la.cm
		return &la.ca_TotalStoragePowerReward
	case 9:
		la.ca_SimpleTotal.w = &la.w.SimpleTotal
		la.ca_SimpleTotal.m = &la.cm
		return &la.ca_SimpleTotal
	case 10:
		la.ca_BaselineTotal.w = &la.w.BaselineTotal
		la.ca_BaselineTotal.m = &la.cm
		return &la.ca_BaselineTotal
	default:
		panic("unreachable")
	}
}
func (la *_RewardV2State__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_RewardV2State__ReprAssembler) ValuePrototype(_ int) ipld.NodePrototype {
	panic("todo structbuilder tuplerepr valueprototype")
}
