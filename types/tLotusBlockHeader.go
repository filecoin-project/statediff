package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _LotusBlockHeader struct {
	Miner _Address
	Ticket _LotusTicket__Maybe
	ElectionProof _LotusElectionProof__Maybe
	BeaconEntries _List__LotusBeaconEntry
	WinPoStProof _List__PoStProof
	Parents _List__Link
	ParentWeight _BigInt
	Height _ChainEpoch
	ParentStateRoot _Link__LotusStateRoot
	ParentMessageReceipts _Link
	Messages _Link__LotusMsgMeta
	BLSAggregate _Signature__Maybe
	Timestamp _Int
	BlockSig _Signature__Maybe
	ForkSignaling _Int
	ParentBaseFee _BigInt
}
type LotusBlockHeader = *_LotusBlockHeader

func (n _LotusBlockHeader) FieldMiner()	Address {
	return &n.Miner
}
func (n _LotusBlockHeader) FieldTicket()	MaybeLotusTicket {
	return &n.Ticket
}
func (n _LotusBlockHeader) FieldElectionProof()	MaybeLotusElectionProof {
	return &n.ElectionProof
}
func (n _LotusBlockHeader) FieldBeaconEntries()	List__LotusBeaconEntry {
	return &n.BeaconEntries
}
func (n _LotusBlockHeader) FieldWinPoStProof()	List__PoStProof {
	return &n.WinPoStProof
}
func (n _LotusBlockHeader) FieldParents()	List__Link {
	return &n.Parents
}
func (n _LotusBlockHeader) FieldParentWeight()	BigInt {
	return &n.ParentWeight
}
func (n _LotusBlockHeader) FieldHeight()	ChainEpoch {
	return &n.Height
}
func (n _LotusBlockHeader) FieldParentStateRoot()	Link__LotusStateRoot {
	return &n.ParentStateRoot
}
func (n _LotusBlockHeader) FieldParentMessageReceipts()	Link {
	return &n.ParentMessageReceipts
}
func (n _LotusBlockHeader) FieldMessages()	Link__LotusMsgMeta {
	return &n.Messages
}
func (n _LotusBlockHeader) FieldBLSAggregate()	MaybeSignature {
	return &n.BLSAggregate
}
func (n _LotusBlockHeader) FieldTimestamp()	Int {
	return &n.Timestamp
}
func (n _LotusBlockHeader) FieldBlockSig()	MaybeSignature {
	return &n.BlockSig
}
func (n _LotusBlockHeader) FieldForkSignaling()	Int {
	return &n.ForkSignaling
}
func (n _LotusBlockHeader) FieldParentBaseFee()	BigInt {
	return &n.ParentBaseFee
}
type _LotusBlockHeader__Maybe struct {
	m schema.Maybe
	v LotusBlockHeader
}
type MaybeLotusBlockHeader = *_LotusBlockHeader__Maybe

func (m MaybeLotusBlockHeader) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeLotusBlockHeader) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeLotusBlockHeader) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeLotusBlockHeader) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeLotusBlockHeader) Must() LotusBlockHeader {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__LotusBlockHeader_Miner = _String{"Miner"}
	fieldName__LotusBlockHeader_Ticket = _String{"Ticket"}
	fieldName__LotusBlockHeader_ElectionProof = _String{"ElectionProof"}
	fieldName__LotusBlockHeader_BeaconEntries = _String{"BeaconEntries"}
	fieldName__LotusBlockHeader_WinPoStProof = _String{"WinPoStProof"}
	fieldName__LotusBlockHeader_Parents = _String{"Parents"}
	fieldName__LotusBlockHeader_ParentWeight = _String{"ParentWeight"}
	fieldName__LotusBlockHeader_Height = _String{"Height"}
	fieldName__LotusBlockHeader_ParentStateRoot = _String{"ParentStateRoot"}
	fieldName__LotusBlockHeader_ParentMessageReceipts = _String{"ParentMessageReceipts"}
	fieldName__LotusBlockHeader_Messages = _String{"Messages"}
	fieldName__LotusBlockHeader_BLSAggregate = _String{"BLSAggregate"}
	fieldName__LotusBlockHeader_Timestamp = _String{"Timestamp"}
	fieldName__LotusBlockHeader_BlockSig = _String{"BlockSig"}
	fieldName__LotusBlockHeader_ForkSignaling = _String{"ForkSignaling"}
	fieldName__LotusBlockHeader_ParentBaseFee = _String{"ParentBaseFee"}
)
var _ ipld.Node = (LotusBlockHeader)(&_LotusBlockHeader{})
var _ schema.TypedNode = (LotusBlockHeader)(&_LotusBlockHeader{})
func (LotusBlockHeader) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n LotusBlockHeader) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Miner":
		return &n.Miner, nil
	case "Ticket":
		if n.Ticket.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.Ticket.v, nil
	case "ElectionProof":
		if n.ElectionProof.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.ElectionProof.v, nil
	case "BeaconEntries":
		return &n.BeaconEntries, nil
	case "WinPoStProof":
		return &n.WinPoStProof, nil
	case "Parents":
		return &n.Parents, nil
	case "ParentWeight":
		return &n.ParentWeight, nil
	case "Height":
		return &n.Height, nil
	case "ParentStateRoot":
		return &n.ParentStateRoot, nil
	case "ParentMessageReceipts":
		return &n.ParentMessageReceipts, nil
	case "Messages":
		return &n.Messages, nil
	case "BLSAggregate":
		if n.BLSAggregate.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.BLSAggregate.v, nil
	case "Timestamp":
		return &n.Timestamp, nil
	case "BlockSig":
		if n.BlockSig.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.BlockSig.v, nil
	case "ForkSignaling":
		return &n.ForkSignaling, nil
	case "ParentBaseFee":
		return &n.ParentBaseFee, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n LotusBlockHeader) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (LotusBlockHeader) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"types.LotusBlockHeader"}.LookupByIndex(0)
}
func (n LotusBlockHeader) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n LotusBlockHeader) MapIterator() ipld.MapIterator {
	return &_LotusBlockHeader__MapItr{n, 0}
}

type _LotusBlockHeader__MapItr struct {
	n LotusBlockHeader
	idx  int
}

func (itr *_LotusBlockHeader__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 16 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__LotusBlockHeader_Miner
		v = &itr.n.Miner
	case 1:
		k = &fieldName__LotusBlockHeader_Ticket
		if itr.n.Ticket.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.Ticket.v
	case 2:
		k = &fieldName__LotusBlockHeader_ElectionProof
		if itr.n.ElectionProof.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.ElectionProof.v
	case 3:
		k = &fieldName__LotusBlockHeader_BeaconEntries
		v = &itr.n.BeaconEntries
	case 4:
		k = &fieldName__LotusBlockHeader_WinPoStProof
		v = &itr.n.WinPoStProof
	case 5:
		k = &fieldName__LotusBlockHeader_Parents
		v = &itr.n.Parents
	case 6:
		k = &fieldName__LotusBlockHeader_ParentWeight
		v = &itr.n.ParentWeight
	case 7:
		k = &fieldName__LotusBlockHeader_Height
		v = &itr.n.Height
	case 8:
		k = &fieldName__LotusBlockHeader_ParentStateRoot
		v = &itr.n.ParentStateRoot
	case 9:
		k = &fieldName__LotusBlockHeader_ParentMessageReceipts
		v = &itr.n.ParentMessageReceipts
	case 10:
		k = &fieldName__LotusBlockHeader_Messages
		v = &itr.n.Messages
	case 11:
		k = &fieldName__LotusBlockHeader_BLSAggregate
		if itr.n.BLSAggregate.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.BLSAggregate.v
	case 12:
		k = &fieldName__LotusBlockHeader_Timestamp
		v = &itr.n.Timestamp
	case 13:
		k = &fieldName__LotusBlockHeader_BlockSig
		if itr.n.BlockSig.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.BlockSig.v
	case 14:
		k = &fieldName__LotusBlockHeader_ForkSignaling
		v = &itr.n.ForkSignaling
	case 15:
		k = &fieldName__LotusBlockHeader_ParentBaseFee
		v = &itr.n.ParentBaseFee
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_LotusBlockHeader__MapItr) Done() bool {
	return itr.idx >= 16
}

func (LotusBlockHeader) ListIterator() ipld.ListIterator {
	return nil
}
func (LotusBlockHeader) Length() int {
	return 16
}
func (LotusBlockHeader) IsAbsent() bool {
	return false
}
func (LotusBlockHeader) IsNull() bool {
	return false
}
func (LotusBlockHeader) AsBool() (bool, error) {
	return mixins.Map{"types.LotusBlockHeader"}.AsBool()
}
func (LotusBlockHeader) AsInt() (int, error) {
	return mixins.Map{"types.LotusBlockHeader"}.AsInt()
}
func (LotusBlockHeader) AsFloat() (float64, error) {
	return mixins.Map{"types.LotusBlockHeader"}.AsFloat()
}
func (LotusBlockHeader) AsString() (string, error) {
	return mixins.Map{"types.LotusBlockHeader"}.AsString()
}
func (LotusBlockHeader) AsBytes() ([]byte, error) {
	return mixins.Map{"types.LotusBlockHeader"}.AsBytes()
}
func (LotusBlockHeader) AsLink() (ipld.Link, error) {
	return mixins.Map{"types.LotusBlockHeader"}.AsLink()
}
func (LotusBlockHeader) Prototype() ipld.NodePrototype {
	return _LotusBlockHeader__Prototype{}
}
type _LotusBlockHeader__Prototype struct{}

func (_LotusBlockHeader__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _LotusBlockHeader__Builder
	nb.Reset()
	return &nb
}
type _LotusBlockHeader__Builder struct {
	_LotusBlockHeader__Assembler
}
func (nb *_LotusBlockHeader__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_LotusBlockHeader__Builder) Reset() {
	var w _LotusBlockHeader
	var m schema.Maybe
	*nb = _LotusBlockHeader__Builder{_LotusBlockHeader__Assembler{w: &w, m: &m}}
}
type _LotusBlockHeader__Assembler struct {
	w *_LotusBlockHeader
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_Miner _Address__Assembler
	ca_Ticket _LotusTicket__Assembler
	ca_ElectionProof _LotusElectionProof__Assembler
	ca_BeaconEntries _List__LotusBeaconEntry__Assembler
	ca_WinPoStProof _List__PoStProof__Assembler
	ca_Parents _List__Link__Assembler
	ca_ParentWeight _BigInt__Assembler
	ca_Height _ChainEpoch__Assembler
	ca_ParentStateRoot _Link__LotusStateRoot__Assembler
	ca_ParentMessageReceipts _Link__Assembler
	ca_Messages _Link__LotusMsgMeta__Assembler
	ca_BLSAggregate _Signature__Assembler
	ca_Timestamp _Int__Assembler
	ca_BlockSig _Signature__Assembler
	ca_ForkSignaling _Int__Assembler
	ca_ParentBaseFee _BigInt__Assembler
	}

func (na *_LotusBlockHeader__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Miner.reset()
	na.ca_Ticket.reset()
	na.ca_ElectionProof.reset()
	na.ca_BeaconEntries.reset()
	na.ca_WinPoStProof.reset()
	na.ca_Parents.reset()
	na.ca_ParentWeight.reset()
	na.ca_Height.reset()
	na.ca_ParentStateRoot.reset()
	na.ca_ParentMessageReceipts.reset()
	na.ca_Messages.reset()
	na.ca_BLSAggregate.reset()
	na.ca_Timestamp.reset()
	na.ca_BlockSig.reset()
	na.ca_ForkSignaling.reset()
	na.ca_ParentBaseFee.reset()
}

var (
	fieldBit__LotusBlockHeader_Miner = 1 << 0
	fieldBit__LotusBlockHeader_Ticket = 1 << 1
	fieldBit__LotusBlockHeader_ElectionProof = 1 << 2
	fieldBit__LotusBlockHeader_BeaconEntries = 1 << 3
	fieldBit__LotusBlockHeader_WinPoStProof = 1 << 4
	fieldBit__LotusBlockHeader_Parents = 1 << 5
	fieldBit__LotusBlockHeader_ParentWeight = 1 << 6
	fieldBit__LotusBlockHeader_Height = 1 << 7
	fieldBit__LotusBlockHeader_ParentStateRoot = 1 << 8
	fieldBit__LotusBlockHeader_ParentMessageReceipts = 1 << 9
	fieldBit__LotusBlockHeader_Messages = 1 << 10
	fieldBit__LotusBlockHeader_BLSAggregate = 1 << 11
	fieldBit__LotusBlockHeader_Timestamp = 1 << 12
	fieldBit__LotusBlockHeader_BlockSig = 1 << 13
	fieldBit__LotusBlockHeader_ForkSignaling = 1 << 14
	fieldBit__LotusBlockHeader_ParentBaseFee = 1 << 15
	fieldBits__LotusBlockHeader_sufficient = 0 + 1 << 0 + 1 << 1 + 1 << 2 + 1 << 3 + 1 << 4 + 1 << 5 + 1 << 6 + 1 << 7 + 1 << 8 + 1 << 9 + 1 << 10 + 1 << 11 + 1 << 12 + 1 << 13 + 1 << 14 + 1 << 15
)
func (na *_LotusBlockHeader__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_LotusBlockHeader{}
	}
	return na, nil
}
func (_LotusBlockHeader__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"types.LotusBlockHeader"}.BeginList(0)
}
func (na *_LotusBlockHeader__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"types.LotusBlockHeader"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_LotusBlockHeader__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"types.LotusBlockHeader"}.AssignBool(false)
}
func (_LotusBlockHeader__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"types.LotusBlockHeader"}.AssignInt(0)
}
func (_LotusBlockHeader__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"types.LotusBlockHeader"}.AssignFloat(0)
}
func (_LotusBlockHeader__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"types.LotusBlockHeader"}.AssignString("")
}
func (_LotusBlockHeader__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"types.LotusBlockHeader"}.AssignBytes(nil)
}
func (_LotusBlockHeader__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"types.LotusBlockHeader"}.AssignLink(nil)
}
func (na *_LotusBlockHeader__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_LotusBlockHeader); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "types.LotusBlockHeader", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_LotusBlockHeader__Assembler) Prototype() ipld.NodePrototype {
	return _LotusBlockHeader__Prototype{}
}
func (ma *_LotusBlockHeader__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Miner.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.w.Ticket.m {
		case schema.Maybe_Null:
			ma.state = maState_initial
			return true
		case schema.Maybe_Value:
			ma.w.Ticket.v = ma.ca_Ticket.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.w.ElectionProof.m {
		case schema.Maybe_Null:
			ma.state = maState_initial
			return true
		case schema.Maybe_Value:
			ma.w.ElectionProof.v = ma.ca_ElectionProof.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_BeaconEntries.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 4:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_WinPoStProof.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 5:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Parents.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 6:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ParentWeight.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 7:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Height.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 8:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ParentStateRoot.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 9:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ParentMessageReceipts.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 10:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Messages.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 11:
		switch ma.w.BLSAggregate.m {
		case schema.Maybe_Null:
			ma.state = maState_initial
			return true
		case schema.Maybe_Value:
			ma.w.BLSAggregate.v = ma.ca_BLSAggregate.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 12:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Timestamp.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 13:
		switch ma.w.BlockSig.m {
		case schema.Maybe_Null:
			ma.state = maState_initial
			return true
		case schema.Maybe_Value:
			ma.w.BlockSig.v = ma.ca_BlockSig.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 14:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ForkSignaling.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 15:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ParentBaseFee.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_LotusBlockHeader__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Miner":
		if ma.s & fieldBit__LotusBlockHeader_Miner != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_Miner}
		}
		ma.s += fieldBit__LotusBlockHeader_Miner
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Miner.w = &ma.w.Miner
		ma.ca_Miner.m = &ma.cm
		return &ma.ca_Miner, nil
	case "Ticket":
		if ma.s & fieldBit__LotusBlockHeader_Ticket != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_Ticket}
		}
		ma.s += fieldBit__LotusBlockHeader_Ticket
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_Ticket.w = ma.w.Ticket.v
		ma.ca_Ticket.m = &ma.w.Ticket.m
		ma.w.Ticket.m = allowNull
		return &ma.ca_Ticket, nil
	case "ElectionProof":
		if ma.s & fieldBit__LotusBlockHeader_ElectionProof != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_ElectionProof}
		}
		ma.s += fieldBit__LotusBlockHeader_ElectionProof
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_ElectionProof.w = ma.w.ElectionProof.v
		ma.ca_ElectionProof.m = &ma.w.ElectionProof.m
		ma.w.ElectionProof.m = allowNull
		return &ma.ca_ElectionProof, nil
	case "BeaconEntries":
		if ma.s & fieldBit__LotusBlockHeader_BeaconEntries != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_BeaconEntries}
		}
		ma.s += fieldBit__LotusBlockHeader_BeaconEntries
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_BeaconEntries.w = &ma.w.BeaconEntries
		ma.ca_BeaconEntries.m = &ma.cm
		return &ma.ca_BeaconEntries, nil
	case "WinPoStProof":
		if ma.s & fieldBit__LotusBlockHeader_WinPoStProof != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_WinPoStProof}
		}
		ma.s += fieldBit__LotusBlockHeader_WinPoStProof
		ma.state = maState_midValue
		ma.f = 4
		ma.ca_WinPoStProof.w = &ma.w.WinPoStProof
		ma.ca_WinPoStProof.m = &ma.cm
		return &ma.ca_WinPoStProof, nil
	case "Parents":
		if ma.s & fieldBit__LotusBlockHeader_Parents != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_Parents}
		}
		ma.s += fieldBit__LotusBlockHeader_Parents
		ma.state = maState_midValue
		ma.f = 5
		ma.ca_Parents.w = &ma.w.Parents
		ma.ca_Parents.m = &ma.cm
		return &ma.ca_Parents, nil
	case "ParentWeight":
		if ma.s & fieldBit__LotusBlockHeader_ParentWeight != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_ParentWeight}
		}
		ma.s += fieldBit__LotusBlockHeader_ParentWeight
		ma.state = maState_midValue
		ma.f = 6
		ma.ca_ParentWeight.w = &ma.w.ParentWeight
		ma.ca_ParentWeight.m = &ma.cm
		return &ma.ca_ParentWeight, nil
	case "Height":
		if ma.s & fieldBit__LotusBlockHeader_Height != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_Height}
		}
		ma.s += fieldBit__LotusBlockHeader_Height
		ma.state = maState_midValue
		ma.f = 7
		ma.ca_Height.w = &ma.w.Height
		ma.ca_Height.m = &ma.cm
		return &ma.ca_Height, nil
	case "ParentStateRoot":
		if ma.s & fieldBit__LotusBlockHeader_ParentStateRoot != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_ParentStateRoot}
		}
		ma.s += fieldBit__LotusBlockHeader_ParentStateRoot
		ma.state = maState_midValue
		ma.f = 8
		ma.ca_ParentStateRoot.w = &ma.w.ParentStateRoot
		ma.ca_ParentStateRoot.m = &ma.cm
		return &ma.ca_ParentStateRoot, nil
	case "ParentMessageReceipts":
		if ma.s & fieldBit__LotusBlockHeader_ParentMessageReceipts != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_ParentMessageReceipts}
		}
		ma.s += fieldBit__LotusBlockHeader_ParentMessageReceipts
		ma.state = maState_midValue
		ma.f = 9
		ma.ca_ParentMessageReceipts.w = &ma.w.ParentMessageReceipts
		ma.ca_ParentMessageReceipts.m = &ma.cm
		return &ma.ca_ParentMessageReceipts, nil
	case "Messages":
		if ma.s & fieldBit__LotusBlockHeader_Messages != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_Messages}
		}
		ma.s += fieldBit__LotusBlockHeader_Messages
		ma.state = maState_midValue
		ma.f = 10
		ma.ca_Messages.w = &ma.w.Messages
		ma.ca_Messages.m = &ma.cm
		return &ma.ca_Messages, nil
	case "BLSAggregate":
		if ma.s & fieldBit__LotusBlockHeader_BLSAggregate != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_BLSAggregate}
		}
		ma.s += fieldBit__LotusBlockHeader_BLSAggregate
		ma.state = maState_midValue
		ma.f = 11
		ma.ca_BLSAggregate.w = ma.w.BLSAggregate.v
		ma.ca_BLSAggregate.m = &ma.w.BLSAggregate.m
		ma.w.BLSAggregate.m = allowNull
		return &ma.ca_BLSAggregate, nil
	case "Timestamp":
		if ma.s & fieldBit__LotusBlockHeader_Timestamp != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_Timestamp}
		}
		ma.s += fieldBit__LotusBlockHeader_Timestamp
		ma.state = maState_midValue
		ma.f = 12
		ma.ca_Timestamp.w = &ma.w.Timestamp
		ma.ca_Timestamp.m = &ma.cm
		return &ma.ca_Timestamp, nil
	case "BlockSig":
		if ma.s & fieldBit__LotusBlockHeader_BlockSig != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_BlockSig}
		}
		ma.s += fieldBit__LotusBlockHeader_BlockSig
		ma.state = maState_midValue
		ma.f = 13
		ma.ca_BlockSig.w = ma.w.BlockSig.v
		ma.ca_BlockSig.m = &ma.w.BlockSig.m
		ma.w.BlockSig.m = allowNull
		return &ma.ca_BlockSig, nil
	case "ForkSignaling":
		if ma.s & fieldBit__LotusBlockHeader_ForkSignaling != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_ForkSignaling}
		}
		ma.s += fieldBit__LotusBlockHeader_ForkSignaling
		ma.state = maState_midValue
		ma.f = 14
		ma.ca_ForkSignaling.w = &ma.w.ForkSignaling
		ma.ca_ForkSignaling.m = &ma.cm
		return &ma.ca_ForkSignaling, nil
	case "ParentBaseFee":
		if ma.s & fieldBit__LotusBlockHeader_ParentBaseFee != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_ParentBaseFee}
		}
		ma.s += fieldBit__LotusBlockHeader_ParentBaseFee
		ma.state = maState_midValue
		ma.f = 15
		ma.ca_ParentBaseFee.w = &ma.w.ParentBaseFee
		ma.ca_ParentBaseFee.m = &ma.cm
		return &ma.ca_ParentBaseFee, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"types.LotusBlockHeader", Key:&_String{k}}
	}
}
func (ma *_LotusBlockHeader__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_LotusBlockHeader__KeyAssembler)(ma)
}
func (ma *_LotusBlockHeader__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Miner.w = &ma.w.Miner
		ma.ca_Miner.m = &ma.cm
		return &ma.ca_Miner
	case 1:
		ma.ca_Ticket.w = ma.w.Ticket.v
		ma.ca_Ticket.m = &ma.w.Ticket.m
		ma.w.Ticket.m = allowNull
		return &ma.ca_Ticket
	case 2:
		ma.ca_ElectionProof.w = ma.w.ElectionProof.v
		ma.ca_ElectionProof.m = &ma.w.ElectionProof.m
		ma.w.ElectionProof.m = allowNull
		return &ma.ca_ElectionProof
	case 3:
		ma.ca_BeaconEntries.w = &ma.w.BeaconEntries
		ma.ca_BeaconEntries.m = &ma.cm
		return &ma.ca_BeaconEntries
	case 4:
		ma.ca_WinPoStProof.w = &ma.w.WinPoStProof
		ma.ca_WinPoStProof.m = &ma.cm
		return &ma.ca_WinPoStProof
	case 5:
		ma.ca_Parents.w = &ma.w.Parents
		ma.ca_Parents.m = &ma.cm
		return &ma.ca_Parents
	case 6:
		ma.ca_ParentWeight.w = &ma.w.ParentWeight
		ma.ca_ParentWeight.m = &ma.cm
		return &ma.ca_ParentWeight
	case 7:
		ma.ca_Height.w = &ma.w.Height
		ma.ca_Height.m = &ma.cm
		return &ma.ca_Height
	case 8:
		ma.ca_ParentStateRoot.w = &ma.w.ParentStateRoot
		ma.ca_ParentStateRoot.m = &ma.cm
		return &ma.ca_ParentStateRoot
	case 9:
		ma.ca_ParentMessageReceipts.w = &ma.w.ParentMessageReceipts
		ma.ca_ParentMessageReceipts.m = &ma.cm
		return &ma.ca_ParentMessageReceipts
	case 10:
		ma.ca_Messages.w = &ma.w.Messages
		ma.ca_Messages.m = &ma.cm
		return &ma.ca_Messages
	case 11:
		ma.ca_BLSAggregate.w = ma.w.BLSAggregate.v
		ma.ca_BLSAggregate.m = &ma.w.BLSAggregate.m
		ma.w.BLSAggregate.m = allowNull
		return &ma.ca_BLSAggregate
	case 12:
		ma.ca_Timestamp.w = &ma.w.Timestamp
		ma.ca_Timestamp.m = &ma.cm
		return &ma.ca_Timestamp
	case 13:
		ma.ca_BlockSig.w = ma.w.BlockSig.v
		ma.ca_BlockSig.m = &ma.w.BlockSig.m
		ma.w.BlockSig.m = allowNull
		return &ma.ca_BlockSig
	case 14:
		ma.ca_ForkSignaling.w = &ma.w.ForkSignaling
		ma.ca_ForkSignaling.m = &ma.cm
		return &ma.ca_ForkSignaling
	case 15:
		ma.ca_ParentBaseFee.w = &ma.w.ParentBaseFee
		ma.ca_ParentBaseFee.m = &ma.cm
		return &ma.ca_ParentBaseFee
	default:
		panic("unreachable")
	}
}
func (ma *_LotusBlockHeader__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_LotusBlockHeader__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_LotusBlockHeader__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _LotusBlockHeader__KeyAssembler _LotusBlockHeader__Assembler
func (_LotusBlockHeader__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"types.LotusBlockHeader.KeyAssembler"}.BeginMap(0)
}
func (_LotusBlockHeader__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"types.LotusBlockHeader.KeyAssembler"}.BeginList(0)
}
func (na *_LotusBlockHeader__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"types.LotusBlockHeader.KeyAssembler"}.AssignNull()
}
func (_LotusBlockHeader__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"types.LotusBlockHeader.KeyAssembler"}.AssignBool(false)
}
func (_LotusBlockHeader__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"types.LotusBlockHeader.KeyAssembler"}.AssignInt(0)
}
func (_LotusBlockHeader__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"types.LotusBlockHeader.KeyAssembler"}.AssignFloat(0)
}
func (ka *_LotusBlockHeader__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Miner":
		if ka.s & fieldBit__LotusBlockHeader_Miner != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_Miner}
		}
		ka.s += fieldBit__LotusBlockHeader_Miner
		ka.state = maState_expectValue
		ka.f = 0
	case "Ticket":
		if ka.s & fieldBit__LotusBlockHeader_Ticket != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_Ticket}
		}
		ka.s += fieldBit__LotusBlockHeader_Ticket
		ka.state = maState_expectValue
		ka.f = 1
	case "ElectionProof":
		if ka.s & fieldBit__LotusBlockHeader_ElectionProof != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_ElectionProof}
		}
		ka.s += fieldBit__LotusBlockHeader_ElectionProof
		ka.state = maState_expectValue
		ka.f = 2
	case "BeaconEntries":
		if ka.s & fieldBit__LotusBlockHeader_BeaconEntries != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_BeaconEntries}
		}
		ka.s += fieldBit__LotusBlockHeader_BeaconEntries
		ka.state = maState_expectValue
		ka.f = 3
	case "WinPoStProof":
		if ka.s & fieldBit__LotusBlockHeader_WinPoStProof != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_WinPoStProof}
		}
		ka.s += fieldBit__LotusBlockHeader_WinPoStProof
		ka.state = maState_expectValue
		ka.f = 4
	case "Parents":
		if ka.s & fieldBit__LotusBlockHeader_Parents != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_Parents}
		}
		ka.s += fieldBit__LotusBlockHeader_Parents
		ka.state = maState_expectValue
		ka.f = 5
	case "ParentWeight":
		if ka.s & fieldBit__LotusBlockHeader_ParentWeight != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_ParentWeight}
		}
		ka.s += fieldBit__LotusBlockHeader_ParentWeight
		ka.state = maState_expectValue
		ka.f = 6
	case "Height":
		if ka.s & fieldBit__LotusBlockHeader_Height != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_Height}
		}
		ka.s += fieldBit__LotusBlockHeader_Height
		ka.state = maState_expectValue
		ka.f = 7
	case "ParentStateRoot":
		if ka.s & fieldBit__LotusBlockHeader_ParentStateRoot != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_ParentStateRoot}
		}
		ka.s += fieldBit__LotusBlockHeader_ParentStateRoot
		ka.state = maState_expectValue
		ka.f = 8
	case "ParentMessageReceipts":
		if ka.s & fieldBit__LotusBlockHeader_ParentMessageReceipts != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_ParentMessageReceipts}
		}
		ka.s += fieldBit__LotusBlockHeader_ParentMessageReceipts
		ka.state = maState_expectValue
		ka.f = 9
	case "Messages":
		if ka.s & fieldBit__LotusBlockHeader_Messages != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_Messages}
		}
		ka.s += fieldBit__LotusBlockHeader_Messages
		ka.state = maState_expectValue
		ka.f = 10
	case "BLSAggregate":
		if ka.s & fieldBit__LotusBlockHeader_BLSAggregate != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_BLSAggregate}
		}
		ka.s += fieldBit__LotusBlockHeader_BLSAggregate
		ka.state = maState_expectValue
		ka.f = 11
	case "Timestamp":
		if ka.s & fieldBit__LotusBlockHeader_Timestamp != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_Timestamp}
		}
		ka.s += fieldBit__LotusBlockHeader_Timestamp
		ka.state = maState_expectValue
		ka.f = 12
	case "BlockSig":
		if ka.s & fieldBit__LotusBlockHeader_BlockSig != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_BlockSig}
		}
		ka.s += fieldBit__LotusBlockHeader_BlockSig
		ka.state = maState_expectValue
		ka.f = 13
	case "ForkSignaling":
		if ka.s & fieldBit__LotusBlockHeader_ForkSignaling != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_ForkSignaling}
		}
		ka.s += fieldBit__LotusBlockHeader_ForkSignaling
		ka.state = maState_expectValue
		ka.f = 14
	case "ParentBaseFee":
		if ka.s & fieldBit__LotusBlockHeader_ParentBaseFee != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusBlockHeader_ParentBaseFee}
		}
		ka.s += fieldBit__LotusBlockHeader_ParentBaseFee
		ka.state = maState_expectValue
		ka.f = 15
	default:
		return ipld.ErrInvalidKey{TypeName:"types.LotusBlockHeader", Key:&_String{k}}
	}
	return nil
}
func (_LotusBlockHeader__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"types.LotusBlockHeader.KeyAssembler"}.AssignBytes(nil)
}
func (_LotusBlockHeader__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"types.LotusBlockHeader.KeyAssembler"}.AssignLink(nil)
}
func (ka *_LotusBlockHeader__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_LotusBlockHeader__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (LotusBlockHeader) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n LotusBlockHeader) Representation() ipld.Node {
	return (*_LotusBlockHeader__Repr)(n)
}
type _LotusBlockHeader__Repr _LotusBlockHeader
var _ ipld.Node = &_LotusBlockHeader__Repr{}
func (_LotusBlockHeader__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_List
}
func (_LotusBlockHeader__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"types.LotusBlockHeader.Repr"}.LookupByString("")
}
func (n *_LotusBlockHeader__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ki, err := key.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(ki)
}
func (n *_LotusBlockHeader__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	switch idx {
	case 0:
		return n.Miner.Representation(), nil
	case 1:
		if n.Ticket.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.Ticket.v.Representation(), nil
	case 2:
		if n.ElectionProof.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.ElectionProof.v.Representation(), nil
	case 3:
		return n.BeaconEntries.Representation(), nil
	case 4:
		return n.WinPoStProof.Representation(), nil
	case 5:
		return n.Parents.Representation(), nil
	case 6:
		return n.ParentWeight.Representation(), nil
	case 7:
		return n.Height.Representation(), nil
	case 8:
		return n.ParentStateRoot.Representation(), nil
	case 9:
		return n.ParentMessageReceipts.Representation(), nil
	case 10:
		return n.Messages.Representation(), nil
	case 11:
		if n.BLSAggregate.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.BLSAggregate.v.Representation(), nil
	case 12:
		return n.Timestamp.Representation(), nil
	case 13:
		if n.BlockSig.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.BlockSig.v.Representation(), nil
	case 14:
		return n.ForkSignaling.Representation(), nil
	case 15:
		return n.ParentBaseFee.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(idx)}
	}
}
func (n _LotusBlockHeader__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "types.LotusBlockHeader.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_LotusBlockHeader__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (n *_LotusBlockHeader__Repr) ListIterator() ipld.ListIterator {
	return &_LotusBlockHeader__ReprListItr{n, 0}
}

type _LotusBlockHeader__ReprListItr struct {
	n   *_LotusBlockHeader__Repr
	idx int
	
}

func (itr *_LotusBlockHeader__ReprListItr) Next() (idx int, v ipld.Node, err error) {
	if itr.idx >= 16 {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		idx = itr.idx
		v = itr.n.Miner.Representation()
	case 1:
		idx = itr.idx
		if itr.n.Ticket.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.Ticket.v.Representation()
	case 2:
		idx = itr.idx
		if itr.n.ElectionProof.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.ElectionProof.v.Representation()
	case 3:
		idx = itr.idx
		v = itr.n.BeaconEntries.Representation()
	case 4:
		idx = itr.idx
		v = itr.n.WinPoStProof.Representation()
	case 5:
		idx = itr.idx
		v = itr.n.Parents.Representation()
	case 6:
		idx = itr.idx
		v = itr.n.ParentWeight.Representation()
	case 7:
		idx = itr.idx
		v = itr.n.Height.Representation()
	case 8:
		idx = itr.idx
		v = itr.n.ParentStateRoot.Representation()
	case 9:
		idx = itr.idx
		v = itr.n.ParentMessageReceipts.Representation()
	case 10:
		idx = itr.idx
		v = itr.n.Messages.Representation()
	case 11:
		idx = itr.idx
		if itr.n.BLSAggregate.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.BLSAggregate.v.Representation()
	case 12:
		idx = itr.idx
		v = itr.n.Timestamp.Representation()
	case 13:
		idx = itr.idx
		if itr.n.BlockSig.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.BlockSig.v.Representation()
	case 14:
		idx = itr.idx
		v = itr.n.ForkSignaling.Representation()
	case 15:
		idx = itr.idx
		v = itr.n.ParentBaseFee.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_LotusBlockHeader__ReprListItr) Done() bool {
	return itr.idx >= 16
}

func (rn *_LotusBlockHeader__Repr) Length() int {
	l := 16
	return l
}
func (_LotusBlockHeader__Repr) IsAbsent() bool {
	return false
}
func (_LotusBlockHeader__Repr) IsNull() bool {
	return false
}
func (_LotusBlockHeader__Repr) AsBool() (bool, error) {
	return mixins.List{"types.LotusBlockHeader.Repr"}.AsBool()
}
func (_LotusBlockHeader__Repr) AsInt() (int, error) {
	return mixins.List{"types.LotusBlockHeader.Repr"}.AsInt()
}
func (_LotusBlockHeader__Repr) AsFloat() (float64, error) {
	return mixins.List{"types.LotusBlockHeader.Repr"}.AsFloat()
}
func (_LotusBlockHeader__Repr) AsString() (string, error) {
	return mixins.List{"types.LotusBlockHeader.Repr"}.AsString()
}
func (_LotusBlockHeader__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"types.LotusBlockHeader.Repr"}.AsBytes()
}
func (_LotusBlockHeader__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"types.LotusBlockHeader.Repr"}.AsLink()
}
func (_LotusBlockHeader__Repr) Prototype() ipld.NodePrototype {
	return _LotusBlockHeader__ReprPrototype{}
}
type _LotusBlockHeader__ReprPrototype struct{}

func (_LotusBlockHeader__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _LotusBlockHeader__ReprBuilder
	nb.Reset()
	return &nb
}
type _LotusBlockHeader__ReprBuilder struct {
	_LotusBlockHeader__ReprAssembler
}
func (nb *_LotusBlockHeader__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_LotusBlockHeader__ReprBuilder) Reset() {
	var w _LotusBlockHeader
	var m schema.Maybe
	*nb = _LotusBlockHeader__ReprBuilder{_LotusBlockHeader__ReprAssembler{w: &w, m: &m}}
}
type _LotusBlockHeader__ReprAssembler struct {
	w *_LotusBlockHeader
	m *schema.Maybe
	state laState
	f int

	cm schema.Maybe
	ca_Miner _Address__ReprAssembler
	ca_Ticket _LotusTicket__ReprAssembler
	ca_ElectionProof _LotusElectionProof__ReprAssembler
	ca_BeaconEntries _List__LotusBeaconEntry__ReprAssembler
	ca_WinPoStProof _List__PoStProof__ReprAssembler
	ca_Parents _List__Link__ReprAssembler
	ca_ParentWeight _BigInt__ReprAssembler
	ca_Height _ChainEpoch__ReprAssembler
	ca_ParentStateRoot _Link__LotusStateRoot__ReprAssembler
	ca_ParentMessageReceipts _Link__ReprAssembler
	ca_Messages _Link__LotusMsgMeta__ReprAssembler
	ca_BLSAggregate _Signature__ReprAssembler
	ca_Timestamp _Int__ReprAssembler
	ca_BlockSig _Signature__ReprAssembler
	ca_ForkSignaling _Int__ReprAssembler
	ca_ParentBaseFee _BigInt__ReprAssembler
	}

func (na *_LotusBlockHeader__ReprAssembler) reset() {
	na.state = laState_initial
	na.f = 0
	na.ca_Miner.reset()
	na.ca_Ticket.reset()
	na.ca_ElectionProof.reset()
	na.ca_BeaconEntries.reset()
	na.ca_WinPoStProof.reset()
	na.ca_Parents.reset()
	na.ca_ParentWeight.reset()
	na.ca_Height.reset()
	na.ca_ParentStateRoot.reset()
	na.ca_ParentMessageReceipts.reset()
	na.ca_Messages.reset()
	na.ca_BLSAggregate.reset()
	na.ca_Timestamp.reset()
	na.ca_BlockSig.reset()
	na.ca_ForkSignaling.reset()
	na.ca_ParentBaseFee.reset()
}
func (_LotusBlockHeader__ReprAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"types.LotusBlockHeader.Repr"}.BeginMap(0)
}
func (na *_LotusBlockHeader__ReprAssembler) BeginList(int) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_LotusBlockHeader{}
	}
	return na, nil
}
func (na *_LotusBlockHeader__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"types.LotusBlockHeader.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_LotusBlockHeader__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"types.LotusBlockHeader.Repr"}.AssignBool(false)
}
func (_LotusBlockHeader__ReprAssembler) AssignInt(int) error {
	return mixins.ListAssembler{"types.LotusBlockHeader.Repr"}.AssignInt(0)
}
func (_LotusBlockHeader__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"types.LotusBlockHeader.Repr"}.AssignFloat(0)
}
func (_LotusBlockHeader__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"types.LotusBlockHeader.Repr"}.AssignString("")
}
func (_LotusBlockHeader__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"types.LotusBlockHeader.Repr"}.AssignBytes(nil)
}
func (_LotusBlockHeader__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"types.LotusBlockHeader.Repr"}.AssignLink(nil)
}
func (na *_LotusBlockHeader__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_LotusBlockHeader); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_List {
		return ipld.ErrWrongKind{TypeName: "types.LotusBlockHeader.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustList, ActualKind: v.ReprKind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_LotusBlockHeader__ReprAssembler) Prototype() ipld.NodePrototype {
	return _LotusBlockHeader__ReprPrototype{}
}
func (la *_LotusBlockHeader__ReprAssembler) valueFinishTidy() bool {
	switch la.f {
	case 0:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 1:
		switch la.w.Ticket.m {
		case schema.Maybe_Value:
			la.w.Ticket.v = la.ca_Ticket.w
			la.state = laState_initial
			la.f++
			return true
		case schema.Maybe_Null:
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 2:
		switch la.w.ElectionProof.m {
		case schema.Maybe_Value:
			la.w.ElectionProof.v = la.ca_ElectionProof.w
			la.state = laState_initial
			la.f++
			return true
		case schema.Maybe_Null:
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 3:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 4:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 5:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 6:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 7:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 8:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 9:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 10:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 11:
		switch la.w.BLSAggregate.m {
		case schema.Maybe_Value:
			la.w.BLSAggregate.v = la.ca_BLSAggregate.w
			la.state = laState_initial
			la.f++
			return true
		case schema.Maybe_Null:
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 12:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 13:
		switch la.w.BlockSig.m {
		case schema.Maybe_Value:
			la.w.BlockSig.v = la.ca_BlockSig.w
			la.state = laState_initial
			la.f++
			return true
		case schema.Maybe_Null:
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 14:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 15:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (la *_LotusBlockHeader__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	if la.f >= 16 {
		return nil // schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(16)} // FIXME: need an error thunking assembler!  it has returned.  sigh.
	}
	la.state = laState_midValue
	switch la.f {
	case 0:
		la.ca_Miner.w = &la.w.Miner
		la.ca_Miner.m = &la.cm
		return &la.ca_Miner
	case 1:
		la.ca_Ticket.w = la.w.Ticket.v
		la.ca_Ticket.m = &la.w.Ticket.m
		la.w.Ticket.m = allowNull
		return &la.ca_Ticket
	case 2:
		la.ca_ElectionProof.w = la.w.ElectionProof.v
		la.ca_ElectionProof.m = &la.w.ElectionProof.m
		la.w.ElectionProof.m = allowNull
		return &la.ca_ElectionProof
	case 3:
		la.ca_BeaconEntries.w = &la.w.BeaconEntries
		la.ca_BeaconEntries.m = &la.cm
		return &la.ca_BeaconEntries
	case 4:
		la.ca_WinPoStProof.w = &la.w.WinPoStProof
		la.ca_WinPoStProof.m = &la.cm
		return &la.ca_WinPoStProof
	case 5:
		la.ca_Parents.w = &la.w.Parents
		la.ca_Parents.m = &la.cm
		return &la.ca_Parents
	case 6:
		la.ca_ParentWeight.w = &la.w.ParentWeight
		la.ca_ParentWeight.m = &la.cm
		return &la.ca_ParentWeight
	case 7:
		la.ca_Height.w = &la.w.Height
		la.ca_Height.m = &la.cm
		return &la.ca_Height
	case 8:
		la.ca_ParentStateRoot.w = &la.w.ParentStateRoot
		la.ca_ParentStateRoot.m = &la.cm
		return &la.ca_ParentStateRoot
	case 9:
		la.ca_ParentMessageReceipts.w = &la.w.ParentMessageReceipts
		la.ca_ParentMessageReceipts.m = &la.cm
		return &la.ca_ParentMessageReceipts
	case 10:
		la.ca_Messages.w = &la.w.Messages
		la.ca_Messages.m = &la.cm
		return &la.ca_Messages
	case 11:
		la.ca_BLSAggregate.w = la.w.BLSAggregate.v
		la.ca_BLSAggregate.m = &la.w.BLSAggregate.m
		la.w.BLSAggregate.m = allowNull
		return &la.ca_BLSAggregate
	case 12:
		la.ca_Timestamp.w = &la.w.Timestamp
		la.ca_Timestamp.m = &la.cm
		return &la.ca_Timestamp
	case 13:
		la.ca_BlockSig.w = la.w.BlockSig.v
		la.ca_BlockSig.m = &la.w.BlockSig.m
		la.w.BlockSig.m = allowNull
		return &la.ca_BlockSig
	case 14:
		la.ca_ForkSignaling.w = &la.w.ForkSignaling
		la.ca_ForkSignaling.m = &la.cm
		return &la.ca_ForkSignaling
	case 15:
		la.ca_ParentBaseFee.w = &la.w.ParentBaseFee
		la.ca_ParentBaseFee.m = &la.cm
		return &la.ca_ParentBaseFee
	default:
		panic("unreachable")
	}
}
func (la *_LotusBlockHeader__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_LotusBlockHeader__ReprAssembler) ValuePrototype(_ int) ipld.NodePrototype {
	panic("todo structbuilder tuplerepr valueprototype")
}
