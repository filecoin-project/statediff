package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _Link__MarketV0DealProposal struct{ x ipld.Link }
type Link__MarketV0DealProposal = *_Link__MarketV0DealProposal
func (n Link__MarketV0DealProposal) Link() ipld.Link {
	return n.x
}
func (_Link__MarketV0DealProposal__Prototype) FromLink(v ipld.Link) (Link__MarketV0DealProposal, error) {
	n := _Link__MarketV0DealProposal{v}
	return &n, nil
}
type _Link__MarketV0DealProposal__Maybe struct {
	m schema.Maybe
	v Link__MarketV0DealProposal
}
type MaybeLink__MarketV0DealProposal = *_Link__MarketV0DealProposal__Maybe

func (m MaybeLink__MarketV0DealProposal) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeLink__MarketV0DealProposal) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeLink__MarketV0DealProposal) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeLink__MarketV0DealProposal) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeLink__MarketV0DealProposal) Must() Link__MarketV0DealProposal {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (Link__MarketV0DealProposal)(&_Link__MarketV0DealProposal{})
var _ schema.TypedNode = (Link__MarketV0DealProposal)(&_Link__MarketV0DealProposal{})
func (Link__MarketV0DealProposal) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Link
}
func (Link__MarketV0DealProposal) LookupByString(string) (ipld.Node, error) {
	return mixins.Link{"types.Link__MarketV0DealProposal"}.LookupByString("")
}
func (Link__MarketV0DealProposal) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Link{"types.Link__MarketV0DealProposal"}.LookupByNode(nil)
}
func (Link__MarketV0DealProposal) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Link{"types.Link__MarketV0DealProposal"}.LookupByIndex(0)
}
func (Link__MarketV0DealProposal) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Link{"types.Link__MarketV0DealProposal"}.LookupBySegment(seg)
}
func (Link__MarketV0DealProposal) MapIterator() ipld.MapIterator {
	return nil
}
func (Link__MarketV0DealProposal) ListIterator() ipld.ListIterator {
	return nil
}
func (Link__MarketV0DealProposal) Length() int {
	return -1
}
func (Link__MarketV0DealProposal) IsAbsent() bool {
	return false
}
func (Link__MarketV0DealProposal) IsNull() bool {
	return false
}
func (Link__MarketV0DealProposal) AsBool() (bool, error) {
	return mixins.Link{"types.Link__MarketV0DealProposal"}.AsBool()
}
func (Link__MarketV0DealProposal) AsInt() (int, error) {
	return mixins.Link{"types.Link__MarketV0DealProposal"}.AsInt()
}
func (Link__MarketV0DealProposal) AsFloat() (float64, error) {
	return mixins.Link{"types.Link__MarketV0DealProposal"}.AsFloat()
}
func (Link__MarketV0DealProposal) AsString() (string, error) {
	return mixins.Link{"types.Link__MarketV0DealProposal"}.AsString()
}
func (Link__MarketV0DealProposal) AsBytes() ([]byte, error) {
	return mixins.Link{"types.Link__MarketV0DealProposal"}.AsBytes()
}
func (n Link__MarketV0DealProposal) AsLink() (ipld.Link, error) {
	return n.x, nil
}
func (Link__MarketV0DealProposal) Prototype() ipld.NodePrototype {
	return _Link__MarketV0DealProposal__Prototype{}
}
type _Link__MarketV0DealProposal__Prototype struct{}

func (_Link__MarketV0DealProposal__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Link__MarketV0DealProposal__Builder
	nb.Reset()
	return &nb
}
type _Link__MarketV0DealProposal__Builder struct {
	_Link__MarketV0DealProposal__Assembler
}
func (nb *_Link__MarketV0DealProposal__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Link__MarketV0DealProposal__Builder) Reset() {
	var w _Link__MarketV0DealProposal
	var m schema.Maybe
	*nb = _Link__MarketV0DealProposal__Builder{_Link__MarketV0DealProposal__Assembler{w: &w, m: &m}}
}
type _Link__MarketV0DealProposal__Assembler struct {
	w *_Link__MarketV0DealProposal
	m *schema.Maybe
}

func (na *_Link__MarketV0DealProposal__Assembler) reset() {}
func (_Link__MarketV0DealProposal__Assembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.LinkAssembler{"types.Link__MarketV0DealProposal"}.BeginMap(0)
}
func (_Link__MarketV0DealProposal__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.LinkAssembler{"types.Link__MarketV0DealProposal"}.BeginList(0)
}
func (na *_Link__MarketV0DealProposal__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.LinkAssembler{"types.Link__MarketV0DealProposal"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Link__MarketV0DealProposal__Assembler) AssignBool(bool) error {
	return mixins.LinkAssembler{"types.Link__MarketV0DealProposal"}.AssignBool(false)
}
func (_Link__MarketV0DealProposal__Assembler) AssignInt(int) error {
	return mixins.LinkAssembler{"types.Link__MarketV0DealProposal"}.AssignInt(0)
}
func (_Link__MarketV0DealProposal__Assembler) AssignFloat(float64) error {
	return mixins.LinkAssembler{"types.Link__MarketV0DealProposal"}.AssignFloat(0)
}
func (_Link__MarketV0DealProposal__Assembler) AssignString(string) error {
	return mixins.LinkAssembler{"types.Link__MarketV0DealProposal"}.AssignString("")
}
func (_Link__MarketV0DealProposal__Assembler) AssignBytes([]byte) error {
	return mixins.LinkAssembler{"types.Link__MarketV0DealProposal"}.AssignBytes(nil)
}
func (na *_Link__MarketV0DealProposal__Assembler) AssignLink(v ipld.Link) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_Link__MarketV0DealProposal{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (na *_Link__MarketV0DealProposal__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Link__MarketV0DealProposal); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsLink(); err != nil {
		return err
	} else {
		return na.AssignLink(v2)
	}
}
func (_Link__MarketV0DealProposal__Assembler) Prototype() ipld.NodePrototype {
	return _Link__MarketV0DealProposal__Prototype{}
}
func (Link__MarketV0DealProposal) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Link__MarketV0DealProposal) Representation() ipld.Node {
	return (*_Link__MarketV0DealProposal__Repr)(n)
}
type _Link__MarketV0DealProposal__Repr = _Link__MarketV0DealProposal
var _ ipld.Node = &_Link__MarketV0DealProposal__Repr{}
type _Link__MarketV0DealProposal__ReprPrototype = _Link__MarketV0DealProposal__Prototype
type _Link__MarketV0DealProposal__ReprAssembler = _Link__MarketV0DealProposal__Assembler
