package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _List__LotusBeaconEntry struct {
	x []_LotusBeaconEntry__Maybe
}
type List__LotusBeaconEntry = *_List__LotusBeaconEntry
type _List__LotusBeaconEntry__Maybe struct {
	m schema.Maybe
	v List__LotusBeaconEntry
}
type MaybeList__LotusBeaconEntry = *_List__LotusBeaconEntry__Maybe

func (m MaybeList__LotusBeaconEntry) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeList__LotusBeaconEntry) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeList__LotusBeaconEntry) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeList__LotusBeaconEntry) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeList__LotusBeaconEntry) Must() List__LotusBeaconEntry {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (List__LotusBeaconEntry)(&_List__LotusBeaconEntry{})
var _ schema.TypedNode = (List__LotusBeaconEntry)(&_List__LotusBeaconEntry{})
func (List__LotusBeaconEntry) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_List
}
func (List__LotusBeaconEntry) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"types.List__LotusBeaconEntry"}.LookupByString("")
}
func (n List__LotusBeaconEntry) LookupByNode(k ipld.Node) (ipld.Node, error) {
	idx, err := k.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(idx)
}
func (n List__LotusBeaconEntry) LookupByIndex(idx int) (ipld.Node, error) {
	if n.Length() <= idx {
		return nil, ipld.ErrNotExists{ipld.PathSegmentOfInt(idx)}
	}
	v := &n.x[idx]
	if v.m == schema.Maybe_Null {
		return ipld.Null, nil
	}
	return v.v, nil
}
func (n List__LotusBeaconEntry) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "types.List__LotusBeaconEntry", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (List__LotusBeaconEntry) MapIterator() ipld.MapIterator {
	return nil
}
func (n List__LotusBeaconEntry) ListIterator() ipld.ListIterator {
	return &_List__LotusBeaconEntry__ListItr{n, 0}
}

type _List__LotusBeaconEntry__ListItr struct {
	n List__LotusBeaconEntry
	idx  int
}

func (itr *_List__LotusBeaconEntry__ListItr) Next() (idx int, v ipld.Node, _ error) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	idx = itr.idx
	x := &itr.n.x[itr.idx]
	switch x.m {
	case schema.Maybe_Null:
		v = ipld.Null
	case schema.Maybe_Value:
		v = x.v
	}
	itr.idx++
	return
}
func (itr *_List__LotusBeaconEntry__ListItr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

func (n List__LotusBeaconEntry) Length() int {
	return len(n.x)
}
func (List__LotusBeaconEntry) IsAbsent() bool {
	return false
}
func (List__LotusBeaconEntry) IsNull() bool {
	return false
}
func (List__LotusBeaconEntry) AsBool() (bool, error) {
	return mixins.List{"types.List__LotusBeaconEntry"}.AsBool()
}
func (List__LotusBeaconEntry) AsInt() (int, error) {
	return mixins.List{"types.List__LotusBeaconEntry"}.AsInt()
}
func (List__LotusBeaconEntry) AsFloat() (float64, error) {
	return mixins.List{"types.List__LotusBeaconEntry"}.AsFloat()
}
func (List__LotusBeaconEntry) AsString() (string, error) {
	return mixins.List{"types.List__LotusBeaconEntry"}.AsString()
}
func (List__LotusBeaconEntry) AsBytes() ([]byte, error) {
	return mixins.List{"types.List__LotusBeaconEntry"}.AsBytes()
}
func (List__LotusBeaconEntry) AsLink() (ipld.Link, error) {
	return mixins.List{"types.List__LotusBeaconEntry"}.AsLink()
}
func (List__LotusBeaconEntry) Prototype() ipld.NodePrototype {
	return _List__LotusBeaconEntry__Prototype{}
}
type _List__LotusBeaconEntry__Prototype struct{}

func (_List__LotusBeaconEntry__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _List__LotusBeaconEntry__Builder
	nb.Reset()
	return &nb
}
type _List__LotusBeaconEntry__Builder struct {
	_List__LotusBeaconEntry__Assembler
}
func (nb *_List__LotusBeaconEntry__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_List__LotusBeaconEntry__Builder) Reset() {
	var w _List__LotusBeaconEntry
	var m schema.Maybe
	*nb = _List__LotusBeaconEntry__Builder{_List__LotusBeaconEntry__Assembler{w: &w, m: &m}}
}
type _List__LotusBeaconEntry__Assembler struct {
	w *_List__LotusBeaconEntry
	m *schema.Maybe
	state laState

	
	va _LotusBeaconEntry__Assembler
}

func (na *_List__LotusBeaconEntry__Assembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_List__LotusBeaconEntry__Assembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"types.List__LotusBeaconEntry"}.BeginMap(0)
}
func (na *_List__LotusBeaconEntry__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if na.w == nil {
		na.w = &_List__LotusBeaconEntry{}
	}
	if sizeHint > 0 {
		na.w.x = make([]_LotusBeaconEntry__Maybe, 0, sizeHint)
	}
	return na, nil
}
func (na *_List__LotusBeaconEntry__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"types.List__LotusBeaconEntry"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_List__LotusBeaconEntry__Assembler) AssignBool(bool) error {
	return mixins.ListAssembler{"types.List__LotusBeaconEntry"}.AssignBool(false)
}
func (_List__LotusBeaconEntry__Assembler) AssignInt(int) error {
	return mixins.ListAssembler{"types.List__LotusBeaconEntry"}.AssignInt(0)
}
func (_List__LotusBeaconEntry__Assembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"types.List__LotusBeaconEntry"}.AssignFloat(0)
}
func (_List__LotusBeaconEntry__Assembler) AssignString(string) error {
	return mixins.ListAssembler{"types.List__LotusBeaconEntry"}.AssignString("")
}
func (_List__LotusBeaconEntry__Assembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"types.List__LotusBeaconEntry"}.AssignBytes(nil)
}
func (_List__LotusBeaconEntry__Assembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"types.List__LotusBeaconEntry"}.AssignLink(nil)
}
func (na *_List__LotusBeaconEntry__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_List__LotusBeaconEntry); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_List {
		return ipld.ErrWrongKind{TypeName: "types.List__LotusBeaconEntry", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustList, ActualKind: v.ReprKind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_List__LotusBeaconEntry__Assembler) Prototype() ipld.NodePrototype {
	return _List__LotusBeaconEntry__Prototype{}
}
func (la *_List__LotusBeaconEntry__Assembler) valueFinishTidy() bool {
	row := &la.w.x[len(la.w.x)-1]
	switch row.m {
	case schema.Maybe_Value:
		row.v = la.va.w
		la.va.w = nil
		fallthrough
	case schema.Maybe_Null:
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_List__LotusBeaconEntry__Assembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _LotusBeaconEntry__Maybe{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.m = &row.m
	row.m = allowNull
	return &la.va
}
func (la *_List__LotusBeaconEntry__Assembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_List__LotusBeaconEntry__Assembler) ValuePrototype(_ int) ipld.NodePrototype {
	return _LotusBeaconEntry__Prototype{}
}
func (List__LotusBeaconEntry) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n List__LotusBeaconEntry) Representation() ipld.Node {
	return (*_List__LotusBeaconEntry__Repr)(n)
}
type _List__LotusBeaconEntry__Repr _List__LotusBeaconEntry
var _ ipld.Node = &_List__LotusBeaconEntry__Repr{}
func (_List__LotusBeaconEntry__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_List
}
func (_List__LotusBeaconEntry__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"types.List__LotusBeaconEntry.Repr"}.LookupByString("")
}
func (nr *_List__LotusBeaconEntry__Repr) LookupByNode(k ipld.Node) (ipld.Node, error) {
	v, err := (List__LotusBeaconEntry)(nr).LookupByNode(k)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(LotusBeaconEntry).Representation(), nil
}
func (nr *_List__LotusBeaconEntry__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	v, err := (List__LotusBeaconEntry)(nr).LookupByIndex(idx)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(LotusBeaconEntry).Representation(), nil
}
func (n _List__LotusBeaconEntry__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "types.List__LotusBeaconEntry.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_List__LotusBeaconEntry__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (nr *_List__LotusBeaconEntry__Repr) ListIterator() ipld.ListIterator {
	return &_List__LotusBeaconEntry__ReprListItr{(List__LotusBeaconEntry)(nr), 0}
}

type _List__LotusBeaconEntry__ReprListItr _List__LotusBeaconEntry__ListItr

func (itr *_List__LotusBeaconEntry__ReprListItr) Next() (idx int, v ipld.Node, err error) {
	idx, v, err = (*_List__LotusBeaconEntry__ListItr)(itr).Next()
	if err != nil || v == ipld.Null {
		return
	}
	return idx, v.(LotusBeaconEntry).Representation(), nil
}
func (itr *_List__LotusBeaconEntry__ReprListItr) Done() bool {
	return (*_List__LotusBeaconEntry__ListItr)(itr).Done()
}

func (rn *_List__LotusBeaconEntry__Repr) Length() int {
	return len(rn.x)
}
func (_List__LotusBeaconEntry__Repr) IsAbsent() bool {
	return false
}
func (_List__LotusBeaconEntry__Repr) IsNull() bool {
	return false
}
func (_List__LotusBeaconEntry__Repr) AsBool() (bool, error) {
	return mixins.List{"types.List__LotusBeaconEntry.Repr"}.AsBool()
}
func (_List__LotusBeaconEntry__Repr) AsInt() (int, error) {
	return mixins.List{"types.List__LotusBeaconEntry.Repr"}.AsInt()
}
func (_List__LotusBeaconEntry__Repr) AsFloat() (float64, error) {
	return mixins.List{"types.List__LotusBeaconEntry.Repr"}.AsFloat()
}
func (_List__LotusBeaconEntry__Repr) AsString() (string, error) {
	return mixins.List{"types.List__LotusBeaconEntry.Repr"}.AsString()
}
func (_List__LotusBeaconEntry__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"types.List__LotusBeaconEntry.Repr"}.AsBytes()
}
func (_List__LotusBeaconEntry__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"types.List__LotusBeaconEntry.Repr"}.AsLink()
}
func (_List__LotusBeaconEntry__Repr) Prototype() ipld.NodePrototype {
	return _List__LotusBeaconEntry__ReprPrototype{}
}
type _List__LotusBeaconEntry__ReprPrototype struct{}

func (_List__LotusBeaconEntry__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _List__LotusBeaconEntry__ReprBuilder
	nb.Reset()
	return &nb
}
type _List__LotusBeaconEntry__ReprBuilder struct {
	_List__LotusBeaconEntry__ReprAssembler
}
func (nb *_List__LotusBeaconEntry__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_List__LotusBeaconEntry__ReprBuilder) Reset() {
	var w _List__LotusBeaconEntry
	var m schema.Maybe
	*nb = _List__LotusBeaconEntry__ReprBuilder{_List__LotusBeaconEntry__ReprAssembler{w: &w, m: &m}}
}
type _List__LotusBeaconEntry__ReprAssembler struct {
	w *_List__LotusBeaconEntry
	m *schema.Maybe
	state laState

	
	va _LotusBeaconEntry__ReprAssembler
}

func (na *_List__LotusBeaconEntry__ReprAssembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_List__LotusBeaconEntry__ReprAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"types.List__LotusBeaconEntry.Repr"}.BeginMap(0)
}
func (na *_List__LotusBeaconEntry__ReprAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if na.w == nil {
		na.w = &_List__LotusBeaconEntry{}
	}
	if sizeHint > 0 {
		na.w.x = make([]_LotusBeaconEntry__Maybe, 0, sizeHint)
	}
	return na, nil
}
func (na *_List__LotusBeaconEntry__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"types.List__LotusBeaconEntry.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_List__LotusBeaconEntry__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"types.List__LotusBeaconEntry.Repr"}.AssignBool(false)
}
func (_List__LotusBeaconEntry__ReprAssembler) AssignInt(int) error {
	return mixins.ListAssembler{"types.List__LotusBeaconEntry.Repr"}.AssignInt(0)
}
func (_List__LotusBeaconEntry__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"types.List__LotusBeaconEntry.Repr"}.AssignFloat(0)
}
func (_List__LotusBeaconEntry__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"types.List__LotusBeaconEntry.Repr"}.AssignString("")
}
func (_List__LotusBeaconEntry__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"types.List__LotusBeaconEntry.Repr"}.AssignBytes(nil)
}
func (_List__LotusBeaconEntry__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"types.List__LotusBeaconEntry.Repr"}.AssignLink(nil)
}
func (na *_List__LotusBeaconEntry__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_List__LotusBeaconEntry); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_List {
		return ipld.ErrWrongKind{TypeName: "types.List__LotusBeaconEntry.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustList, ActualKind: v.ReprKind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_List__LotusBeaconEntry__ReprAssembler) Prototype() ipld.NodePrototype {
	return _List__LotusBeaconEntry__ReprPrototype{}
}
func (la *_List__LotusBeaconEntry__ReprAssembler) valueFinishTidy() bool {
	row := &la.w.x[len(la.w.x)-1]
	switch row.m {
	case schema.Maybe_Value:
		row.v = la.va.w
		la.va.w = nil
		fallthrough
	case schema.Maybe_Null:
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_List__LotusBeaconEntry__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _LotusBeaconEntry__Maybe{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.m = &row.m
	row.m = allowNull
	return &la.va
}
func (la *_List__LotusBeaconEntry__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_List__LotusBeaconEntry__ReprAssembler) ValuePrototype(_ int) ipld.NodePrototype {
	return _LotusBeaconEntry__ReprPrototype{}
}
