package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _MinerV2State struct {
	Info _Link__MinerV2Info
	PreCommitDeposits _BigInt
	LockedFunds _BigInt
	VestingFunds _Link__MinerV0VestingFunds
	FeeDebt _BigInt
	InitialPledge _BigInt
	PreCommittedSectors _Link__MinerV0SectorPreCommits
	PreCommittedSectorsExpiry _Link
	AllocatedSectors _Link__BitField
	Sectors _Link__MinerV0SectorInfo
	ProvingPeriodStart _ChainEpoch
	CurrentDeadline _Int
	Deadlines _Link__MinerV2Deadlines
	EarlyTerminations _BitField
}
type MinerV2State = *_MinerV2State

func (n _MinerV2State) FieldInfo()	Link__MinerV2Info {
	return &n.Info
}
func (n _MinerV2State) FieldPreCommitDeposits()	BigInt {
	return &n.PreCommitDeposits
}
func (n _MinerV2State) FieldLockedFunds()	BigInt {
	return &n.LockedFunds
}
func (n _MinerV2State) FieldVestingFunds()	Link__MinerV0VestingFunds {
	return &n.VestingFunds
}
func (n _MinerV2State) FieldFeeDebt()	BigInt {
	return &n.FeeDebt
}
func (n _MinerV2State) FieldInitialPledge()	BigInt {
	return &n.InitialPledge
}
func (n _MinerV2State) FieldPreCommittedSectors()	Link__MinerV0SectorPreCommits {
	return &n.PreCommittedSectors
}
func (n _MinerV2State) FieldPreCommittedSectorsExpiry()	Link {
	return &n.PreCommittedSectorsExpiry
}
func (n _MinerV2State) FieldAllocatedSectors()	Link__BitField {
	return &n.AllocatedSectors
}
func (n _MinerV2State) FieldSectors()	Link__MinerV0SectorInfo {
	return &n.Sectors
}
func (n _MinerV2State) FieldProvingPeriodStart()	ChainEpoch {
	return &n.ProvingPeriodStart
}
func (n _MinerV2State) FieldCurrentDeadline()	Int {
	return &n.CurrentDeadline
}
func (n _MinerV2State) FieldDeadlines()	Link__MinerV2Deadlines {
	return &n.Deadlines
}
func (n _MinerV2State) FieldEarlyTerminations()	BitField {
	return &n.EarlyTerminations
}
type _MinerV2State__Maybe struct {
	m schema.Maybe
	v MinerV2State
}
type MaybeMinerV2State = *_MinerV2State__Maybe

func (m MaybeMinerV2State) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeMinerV2State) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeMinerV2State) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeMinerV2State) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeMinerV2State) Must() MinerV2State {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__MinerV2State_Info = _String{"Info"}
	fieldName__MinerV2State_PreCommitDeposits = _String{"PreCommitDeposits"}
	fieldName__MinerV2State_LockedFunds = _String{"LockedFunds"}
	fieldName__MinerV2State_VestingFunds = _String{"VestingFunds"}
	fieldName__MinerV2State_FeeDebt = _String{"FeeDebt"}
	fieldName__MinerV2State_InitialPledge = _String{"InitialPledge"}
	fieldName__MinerV2State_PreCommittedSectors = _String{"PreCommittedSectors"}
	fieldName__MinerV2State_PreCommittedSectorsExpiry = _String{"PreCommittedSectorsExpiry"}
	fieldName__MinerV2State_AllocatedSectors = _String{"AllocatedSectors"}
	fieldName__MinerV2State_Sectors = _String{"Sectors"}
	fieldName__MinerV2State_ProvingPeriodStart = _String{"ProvingPeriodStart"}
	fieldName__MinerV2State_CurrentDeadline = _String{"CurrentDeadline"}
	fieldName__MinerV2State_Deadlines = _String{"Deadlines"}
	fieldName__MinerV2State_EarlyTerminations = _String{"EarlyTerminations"}
)
var _ ipld.Node = (MinerV2State)(&_MinerV2State{})
var _ schema.TypedNode = (MinerV2State)(&_MinerV2State{})
func (MinerV2State) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n MinerV2State) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Info":
		return &n.Info, nil
	case "PreCommitDeposits":
		return &n.PreCommitDeposits, nil
	case "LockedFunds":
		return &n.LockedFunds, nil
	case "VestingFunds":
		return &n.VestingFunds, nil
	case "FeeDebt":
		return &n.FeeDebt, nil
	case "InitialPledge":
		return &n.InitialPledge, nil
	case "PreCommittedSectors":
		return &n.PreCommittedSectors, nil
	case "PreCommittedSectorsExpiry":
		return &n.PreCommittedSectorsExpiry, nil
	case "AllocatedSectors":
		return &n.AllocatedSectors, nil
	case "Sectors":
		return &n.Sectors, nil
	case "ProvingPeriodStart":
		return &n.ProvingPeriodStart, nil
	case "CurrentDeadline":
		return &n.CurrentDeadline, nil
	case "Deadlines":
		return &n.Deadlines, nil
	case "EarlyTerminations":
		return &n.EarlyTerminations, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n MinerV2State) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (MinerV2State) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"types.MinerV2State"}.LookupByIndex(0)
}
func (n MinerV2State) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n MinerV2State) MapIterator() ipld.MapIterator {
	return &_MinerV2State__MapItr{n, 0}
}

type _MinerV2State__MapItr struct {
	n MinerV2State
	idx  int
}

func (itr *_MinerV2State__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 14 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__MinerV2State_Info
		v = &itr.n.Info
	case 1:
		k = &fieldName__MinerV2State_PreCommitDeposits
		v = &itr.n.PreCommitDeposits
	case 2:
		k = &fieldName__MinerV2State_LockedFunds
		v = &itr.n.LockedFunds
	case 3:
		k = &fieldName__MinerV2State_VestingFunds
		v = &itr.n.VestingFunds
	case 4:
		k = &fieldName__MinerV2State_FeeDebt
		v = &itr.n.FeeDebt
	case 5:
		k = &fieldName__MinerV2State_InitialPledge
		v = &itr.n.InitialPledge
	case 6:
		k = &fieldName__MinerV2State_PreCommittedSectors
		v = &itr.n.PreCommittedSectors
	case 7:
		k = &fieldName__MinerV2State_PreCommittedSectorsExpiry
		v = &itr.n.PreCommittedSectorsExpiry
	case 8:
		k = &fieldName__MinerV2State_AllocatedSectors
		v = &itr.n.AllocatedSectors
	case 9:
		k = &fieldName__MinerV2State_Sectors
		v = &itr.n.Sectors
	case 10:
		k = &fieldName__MinerV2State_ProvingPeriodStart
		v = &itr.n.ProvingPeriodStart
	case 11:
		k = &fieldName__MinerV2State_CurrentDeadline
		v = &itr.n.CurrentDeadline
	case 12:
		k = &fieldName__MinerV2State_Deadlines
		v = &itr.n.Deadlines
	case 13:
		k = &fieldName__MinerV2State_EarlyTerminations
		v = &itr.n.EarlyTerminations
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_MinerV2State__MapItr) Done() bool {
	return itr.idx >= 14
}

func (MinerV2State) ListIterator() ipld.ListIterator {
	return nil
}
func (MinerV2State) Length() int {
	return 14
}
func (MinerV2State) IsAbsent() bool {
	return false
}
func (MinerV2State) IsNull() bool {
	return false
}
func (MinerV2State) AsBool() (bool, error) {
	return mixins.Map{"types.MinerV2State"}.AsBool()
}
func (MinerV2State) AsInt() (int, error) {
	return mixins.Map{"types.MinerV2State"}.AsInt()
}
func (MinerV2State) AsFloat() (float64, error) {
	return mixins.Map{"types.MinerV2State"}.AsFloat()
}
func (MinerV2State) AsString() (string, error) {
	return mixins.Map{"types.MinerV2State"}.AsString()
}
func (MinerV2State) AsBytes() ([]byte, error) {
	return mixins.Map{"types.MinerV2State"}.AsBytes()
}
func (MinerV2State) AsLink() (ipld.Link, error) {
	return mixins.Map{"types.MinerV2State"}.AsLink()
}
func (MinerV2State) Prototype() ipld.NodePrototype {
	return _MinerV2State__Prototype{}
}
type _MinerV2State__Prototype struct{}

func (_MinerV2State__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _MinerV2State__Builder
	nb.Reset()
	return &nb
}
type _MinerV2State__Builder struct {
	_MinerV2State__Assembler
}
func (nb *_MinerV2State__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_MinerV2State__Builder) Reset() {
	var w _MinerV2State
	var m schema.Maybe
	*nb = _MinerV2State__Builder{_MinerV2State__Assembler{w: &w, m: &m}}
}
type _MinerV2State__Assembler struct {
	w *_MinerV2State
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_Info _Link__MinerV2Info__Assembler
	ca_PreCommitDeposits _BigInt__Assembler
	ca_LockedFunds _BigInt__Assembler
	ca_VestingFunds _Link__MinerV0VestingFunds__Assembler
	ca_FeeDebt _BigInt__Assembler
	ca_InitialPledge _BigInt__Assembler
	ca_PreCommittedSectors _Link__MinerV0SectorPreCommits__Assembler
	ca_PreCommittedSectorsExpiry _Link__Assembler
	ca_AllocatedSectors _Link__BitField__Assembler
	ca_Sectors _Link__MinerV0SectorInfo__Assembler
	ca_ProvingPeriodStart _ChainEpoch__Assembler
	ca_CurrentDeadline _Int__Assembler
	ca_Deadlines _Link__MinerV2Deadlines__Assembler
	ca_EarlyTerminations _BitField__Assembler
	}

func (na *_MinerV2State__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Info.reset()
	na.ca_PreCommitDeposits.reset()
	na.ca_LockedFunds.reset()
	na.ca_VestingFunds.reset()
	na.ca_FeeDebt.reset()
	na.ca_InitialPledge.reset()
	na.ca_PreCommittedSectors.reset()
	na.ca_PreCommittedSectorsExpiry.reset()
	na.ca_AllocatedSectors.reset()
	na.ca_Sectors.reset()
	na.ca_ProvingPeriodStart.reset()
	na.ca_CurrentDeadline.reset()
	na.ca_Deadlines.reset()
	na.ca_EarlyTerminations.reset()
}

var (
	fieldBit__MinerV2State_Info = 1 << 0
	fieldBit__MinerV2State_PreCommitDeposits = 1 << 1
	fieldBit__MinerV2State_LockedFunds = 1 << 2
	fieldBit__MinerV2State_VestingFunds = 1 << 3
	fieldBit__MinerV2State_FeeDebt = 1 << 4
	fieldBit__MinerV2State_InitialPledge = 1 << 5
	fieldBit__MinerV2State_PreCommittedSectors = 1 << 6
	fieldBit__MinerV2State_PreCommittedSectorsExpiry = 1 << 7
	fieldBit__MinerV2State_AllocatedSectors = 1 << 8
	fieldBit__MinerV2State_Sectors = 1 << 9
	fieldBit__MinerV2State_ProvingPeriodStart = 1 << 10
	fieldBit__MinerV2State_CurrentDeadline = 1 << 11
	fieldBit__MinerV2State_Deadlines = 1 << 12
	fieldBit__MinerV2State_EarlyTerminations = 1 << 13
	fieldBits__MinerV2State_sufficient = 0 + 1 << 0 + 1 << 1 + 1 << 2 + 1 << 3 + 1 << 4 + 1 << 5 + 1 << 6 + 1 << 7 + 1 << 8 + 1 << 9 + 1 << 10 + 1 << 11 + 1 << 12 + 1 << 13
)
func (na *_MinerV2State__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_MinerV2State{}
	}
	return na, nil
}
func (_MinerV2State__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"types.MinerV2State"}.BeginList(0)
}
func (na *_MinerV2State__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"types.MinerV2State"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_MinerV2State__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"types.MinerV2State"}.AssignBool(false)
}
func (_MinerV2State__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"types.MinerV2State"}.AssignInt(0)
}
func (_MinerV2State__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"types.MinerV2State"}.AssignFloat(0)
}
func (_MinerV2State__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"types.MinerV2State"}.AssignString("")
}
func (_MinerV2State__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"types.MinerV2State"}.AssignBytes(nil)
}
func (_MinerV2State__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"types.MinerV2State"}.AssignLink(nil)
}
func (na *_MinerV2State__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_MinerV2State); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "types.MinerV2State", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_MinerV2State__Assembler) Prototype() ipld.NodePrototype {
	return _MinerV2State__Prototype{}
}
func (ma *_MinerV2State__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Info.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_PreCommitDeposits.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_LockedFunds.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_VestingFunds.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 4:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_FeeDebt.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 5:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_InitialPledge.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 6:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_PreCommittedSectors.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 7:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_PreCommittedSectorsExpiry.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 8:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_AllocatedSectors.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 9:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Sectors.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 10:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ProvingPeriodStart.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 11:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_CurrentDeadline.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 12:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Deadlines.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 13:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_EarlyTerminations.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_MinerV2State__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Info":
		if ma.s & fieldBit__MinerV2State_Info != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_Info}
		}
		ma.s += fieldBit__MinerV2State_Info
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Info.w = &ma.w.Info
		ma.ca_Info.m = &ma.cm
		return &ma.ca_Info, nil
	case "PreCommitDeposits":
		if ma.s & fieldBit__MinerV2State_PreCommitDeposits != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_PreCommitDeposits}
		}
		ma.s += fieldBit__MinerV2State_PreCommitDeposits
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_PreCommitDeposits.w = &ma.w.PreCommitDeposits
		ma.ca_PreCommitDeposits.m = &ma.cm
		return &ma.ca_PreCommitDeposits, nil
	case "LockedFunds":
		if ma.s & fieldBit__MinerV2State_LockedFunds != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_LockedFunds}
		}
		ma.s += fieldBit__MinerV2State_LockedFunds
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_LockedFunds.w = &ma.w.LockedFunds
		ma.ca_LockedFunds.m = &ma.cm
		return &ma.ca_LockedFunds, nil
	case "VestingFunds":
		if ma.s & fieldBit__MinerV2State_VestingFunds != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_VestingFunds}
		}
		ma.s += fieldBit__MinerV2State_VestingFunds
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_VestingFunds.w = &ma.w.VestingFunds
		ma.ca_VestingFunds.m = &ma.cm
		return &ma.ca_VestingFunds, nil
	case "FeeDebt":
		if ma.s & fieldBit__MinerV2State_FeeDebt != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_FeeDebt}
		}
		ma.s += fieldBit__MinerV2State_FeeDebt
		ma.state = maState_midValue
		ma.f = 4
		ma.ca_FeeDebt.w = &ma.w.FeeDebt
		ma.ca_FeeDebt.m = &ma.cm
		return &ma.ca_FeeDebt, nil
	case "InitialPledge":
		if ma.s & fieldBit__MinerV2State_InitialPledge != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_InitialPledge}
		}
		ma.s += fieldBit__MinerV2State_InitialPledge
		ma.state = maState_midValue
		ma.f = 5
		ma.ca_InitialPledge.w = &ma.w.InitialPledge
		ma.ca_InitialPledge.m = &ma.cm
		return &ma.ca_InitialPledge, nil
	case "PreCommittedSectors":
		if ma.s & fieldBit__MinerV2State_PreCommittedSectors != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_PreCommittedSectors}
		}
		ma.s += fieldBit__MinerV2State_PreCommittedSectors
		ma.state = maState_midValue
		ma.f = 6
		ma.ca_PreCommittedSectors.w = &ma.w.PreCommittedSectors
		ma.ca_PreCommittedSectors.m = &ma.cm
		return &ma.ca_PreCommittedSectors, nil
	case "PreCommittedSectorsExpiry":
		if ma.s & fieldBit__MinerV2State_PreCommittedSectorsExpiry != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_PreCommittedSectorsExpiry}
		}
		ma.s += fieldBit__MinerV2State_PreCommittedSectorsExpiry
		ma.state = maState_midValue
		ma.f = 7
		ma.ca_PreCommittedSectorsExpiry.w = &ma.w.PreCommittedSectorsExpiry
		ma.ca_PreCommittedSectorsExpiry.m = &ma.cm
		return &ma.ca_PreCommittedSectorsExpiry, nil
	case "AllocatedSectors":
		if ma.s & fieldBit__MinerV2State_AllocatedSectors != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_AllocatedSectors}
		}
		ma.s += fieldBit__MinerV2State_AllocatedSectors
		ma.state = maState_midValue
		ma.f = 8
		ma.ca_AllocatedSectors.w = &ma.w.AllocatedSectors
		ma.ca_AllocatedSectors.m = &ma.cm
		return &ma.ca_AllocatedSectors, nil
	case "Sectors":
		if ma.s & fieldBit__MinerV2State_Sectors != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_Sectors}
		}
		ma.s += fieldBit__MinerV2State_Sectors
		ma.state = maState_midValue
		ma.f = 9
		ma.ca_Sectors.w = &ma.w.Sectors
		ma.ca_Sectors.m = &ma.cm
		return &ma.ca_Sectors, nil
	case "ProvingPeriodStart":
		if ma.s & fieldBit__MinerV2State_ProvingPeriodStart != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_ProvingPeriodStart}
		}
		ma.s += fieldBit__MinerV2State_ProvingPeriodStart
		ma.state = maState_midValue
		ma.f = 10
		ma.ca_ProvingPeriodStart.w = &ma.w.ProvingPeriodStart
		ma.ca_ProvingPeriodStart.m = &ma.cm
		return &ma.ca_ProvingPeriodStart, nil
	case "CurrentDeadline":
		if ma.s & fieldBit__MinerV2State_CurrentDeadline != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_CurrentDeadline}
		}
		ma.s += fieldBit__MinerV2State_CurrentDeadline
		ma.state = maState_midValue
		ma.f = 11
		ma.ca_CurrentDeadline.w = &ma.w.CurrentDeadline
		ma.ca_CurrentDeadline.m = &ma.cm
		return &ma.ca_CurrentDeadline, nil
	case "Deadlines":
		if ma.s & fieldBit__MinerV2State_Deadlines != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_Deadlines}
		}
		ma.s += fieldBit__MinerV2State_Deadlines
		ma.state = maState_midValue
		ma.f = 12
		ma.ca_Deadlines.w = &ma.w.Deadlines
		ma.ca_Deadlines.m = &ma.cm
		return &ma.ca_Deadlines, nil
	case "EarlyTerminations":
		if ma.s & fieldBit__MinerV2State_EarlyTerminations != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_EarlyTerminations}
		}
		ma.s += fieldBit__MinerV2State_EarlyTerminations
		ma.state = maState_midValue
		ma.f = 13
		ma.ca_EarlyTerminations.w = &ma.w.EarlyTerminations
		ma.ca_EarlyTerminations.m = &ma.cm
		return &ma.ca_EarlyTerminations, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"types.MinerV2State", Key:&_String{k}}
	}
}
func (ma *_MinerV2State__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_MinerV2State__KeyAssembler)(ma)
}
func (ma *_MinerV2State__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Info.w = &ma.w.Info
		ma.ca_Info.m = &ma.cm
		return &ma.ca_Info
	case 1:
		ma.ca_PreCommitDeposits.w = &ma.w.PreCommitDeposits
		ma.ca_PreCommitDeposits.m = &ma.cm
		return &ma.ca_PreCommitDeposits
	case 2:
		ma.ca_LockedFunds.w = &ma.w.LockedFunds
		ma.ca_LockedFunds.m = &ma.cm
		return &ma.ca_LockedFunds
	case 3:
		ma.ca_VestingFunds.w = &ma.w.VestingFunds
		ma.ca_VestingFunds.m = &ma.cm
		return &ma.ca_VestingFunds
	case 4:
		ma.ca_FeeDebt.w = &ma.w.FeeDebt
		ma.ca_FeeDebt.m = &ma.cm
		return &ma.ca_FeeDebt
	case 5:
		ma.ca_InitialPledge.w = &ma.w.InitialPledge
		ma.ca_InitialPledge.m = &ma.cm
		return &ma.ca_InitialPledge
	case 6:
		ma.ca_PreCommittedSectors.w = &ma.w.PreCommittedSectors
		ma.ca_PreCommittedSectors.m = &ma.cm
		return &ma.ca_PreCommittedSectors
	case 7:
		ma.ca_PreCommittedSectorsExpiry.w = &ma.w.PreCommittedSectorsExpiry
		ma.ca_PreCommittedSectorsExpiry.m = &ma.cm
		return &ma.ca_PreCommittedSectorsExpiry
	case 8:
		ma.ca_AllocatedSectors.w = &ma.w.AllocatedSectors
		ma.ca_AllocatedSectors.m = &ma.cm
		return &ma.ca_AllocatedSectors
	case 9:
		ma.ca_Sectors.w = &ma.w.Sectors
		ma.ca_Sectors.m = &ma.cm
		return &ma.ca_Sectors
	case 10:
		ma.ca_ProvingPeriodStart.w = &ma.w.ProvingPeriodStart
		ma.ca_ProvingPeriodStart.m = &ma.cm
		return &ma.ca_ProvingPeriodStart
	case 11:
		ma.ca_CurrentDeadline.w = &ma.w.CurrentDeadline
		ma.ca_CurrentDeadline.m = &ma.cm
		return &ma.ca_CurrentDeadline
	case 12:
		ma.ca_Deadlines.w = &ma.w.Deadlines
		ma.ca_Deadlines.m = &ma.cm
		return &ma.ca_Deadlines
	case 13:
		ma.ca_EarlyTerminations.w = &ma.w.EarlyTerminations
		ma.ca_EarlyTerminations.m = &ma.cm
		return &ma.ca_EarlyTerminations
	default:
		panic("unreachable")
	}
}
func (ma *_MinerV2State__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_MinerV2State__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_MinerV2State__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _MinerV2State__KeyAssembler _MinerV2State__Assembler
func (_MinerV2State__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"types.MinerV2State.KeyAssembler"}.BeginMap(0)
}
func (_MinerV2State__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"types.MinerV2State.KeyAssembler"}.BeginList(0)
}
func (na *_MinerV2State__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"types.MinerV2State.KeyAssembler"}.AssignNull()
}
func (_MinerV2State__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"types.MinerV2State.KeyAssembler"}.AssignBool(false)
}
func (_MinerV2State__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"types.MinerV2State.KeyAssembler"}.AssignInt(0)
}
func (_MinerV2State__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"types.MinerV2State.KeyAssembler"}.AssignFloat(0)
}
func (ka *_MinerV2State__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Info":
		if ka.s & fieldBit__MinerV2State_Info != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_Info}
		}
		ka.s += fieldBit__MinerV2State_Info
		ka.state = maState_expectValue
		ka.f = 0
	case "PreCommitDeposits":
		if ka.s & fieldBit__MinerV2State_PreCommitDeposits != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_PreCommitDeposits}
		}
		ka.s += fieldBit__MinerV2State_PreCommitDeposits
		ka.state = maState_expectValue
		ka.f = 1
	case "LockedFunds":
		if ka.s & fieldBit__MinerV2State_LockedFunds != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_LockedFunds}
		}
		ka.s += fieldBit__MinerV2State_LockedFunds
		ka.state = maState_expectValue
		ka.f = 2
	case "VestingFunds":
		if ka.s & fieldBit__MinerV2State_VestingFunds != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_VestingFunds}
		}
		ka.s += fieldBit__MinerV2State_VestingFunds
		ka.state = maState_expectValue
		ka.f = 3
	case "FeeDebt":
		if ka.s & fieldBit__MinerV2State_FeeDebt != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_FeeDebt}
		}
		ka.s += fieldBit__MinerV2State_FeeDebt
		ka.state = maState_expectValue
		ka.f = 4
	case "InitialPledge":
		if ka.s & fieldBit__MinerV2State_InitialPledge != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_InitialPledge}
		}
		ka.s += fieldBit__MinerV2State_InitialPledge
		ka.state = maState_expectValue
		ka.f = 5
	case "PreCommittedSectors":
		if ka.s & fieldBit__MinerV2State_PreCommittedSectors != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_PreCommittedSectors}
		}
		ka.s += fieldBit__MinerV2State_PreCommittedSectors
		ka.state = maState_expectValue
		ka.f = 6
	case "PreCommittedSectorsExpiry":
		if ka.s & fieldBit__MinerV2State_PreCommittedSectorsExpiry != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_PreCommittedSectorsExpiry}
		}
		ka.s += fieldBit__MinerV2State_PreCommittedSectorsExpiry
		ka.state = maState_expectValue
		ka.f = 7
	case "AllocatedSectors":
		if ka.s & fieldBit__MinerV2State_AllocatedSectors != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_AllocatedSectors}
		}
		ka.s += fieldBit__MinerV2State_AllocatedSectors
		ka.state = maState_expectValue
		ka.f = 8
	case "Sectors":
		if ka.s & fieldBit__MinerV2State_Sectors != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_Sectors}
		}
		ka.s += fieldBit__MinerV2State_Sectors
		ka.state = maState_expectValue
		ka.f = 9
	case "ProvingPeriodStart":
		if ka.s & fieldBit__MinerV2State_ProvingPeriodStart != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_ProvingPeriodStart}
		}
		ka.s += fieldBit__MinerV2State_ProvingPeriodStart
		ka.state = maState_expectValue
		ka.f = 10
	case "CurrentDeadline":
		if ka.s & fieldBit__MinerV2State_CurrentDeadline != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_CurrentDeadline}
		}
		ka.s += fieldBit__MinerV2State_CurrentDeadline
		ka.state = maState_expectValue
		ka.f = 11
	case "Deadlines":
		if ka.s & fieldBit__MinerV2State_Deadlines != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_Deadlines}
		}
		ka.s += fieldBit__MinerV2State_Deadlines
		ka.state = maState_expectValue
		ka.f = 12
	case "EarlyTerminations":
		if ka.s & fieldBit__MinerV2State_EarlyTerminations != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2State_EarlyTerminations}
		}
		ka.s += fieldBit__MinerV2State_EarlyTerminations
		ka.state = maState_expectValue
		ka.f = 13
	default:
		return ipld.ErrInvalidKey{TypeName:"types.MinerV2State", Key:&_String{k}}
	}
	return nil
}
func (_MinerV2State__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"types.MinerV2State.KeyAssembler"}.AssignBytes(nil)
}
func (_MinerV2State__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"types.MinerV2State.KeyAssembler"}.AssignLink(nil)
}
func (ka *_MinerV2State__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_MinerV2State__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (MinerV2State) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n MinerV2State) Representation() ipld.Node {
	return (*_MinerV2State__Repr)(n)
}
type _MinerV2State__Repr _MinerV2State
var _ ipld.Node = &_MinerV2State__Repr{}
func (_MinerV2State__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_List
}
func (_MinerV2State__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"types.MinerV2State.Repr"}.LookupByString("")
}
func (n *_MinerV2State__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ki, err := key.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(ki)
}
func (n *_MinerV2State__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	switch idx {
	case 0:
		return n.Info.Representation(), nil
	case 1:
		return n.PreCommitDeposits.Representation(), nil
	case 2:
		return n.LockedFunds.Representation(), nil
	case 3:
		return n.VestingFunds.Representation(), nil
	case 4:
		return n.FeeDebt.Representation(), nil
	case 5:
		return n.InitialPledge.Representation(), nil
	case 6:
		return n.PreCommittedSectors.Representation(), nil
	case 7:
		return n.PreCommittedSectorsExpiry.Representation(), nil
	case 8:
		return n.AllocatedSectors.Representation(), nil
	case 9:
		return n.Sectors.Representation(), nil
	case 10:
		return n.ProvingPeriodStart.Representation(), nil
	case 11:
		return n.CurrentDeadline.Representation(), nil
	case 12:
		return n.Deadlines.Representation(), nil
	case 13:
		return n.EarlyTerminations.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(idx)}
	}
}
func (n _MinerV2State__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "types.MinerV2State.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_MinerV2State__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (n *_MinerV2State__Repr) ListIterator() ipld.ListIterator {
	return &_MinerV2State__ReprListItr{n, 0}
}

type _MinerV2State__ReprListItr struct {
	n   *_MinerV2State__Repr
	idx int
	
}

func (itr *_MinerV2State__ReprListItr) Next() (idx int, v ipld.Node, err error) {
	if itr.idx >= 14 {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		idx = itr.idx
		v = itr.n.Info.Representation()
	case 1:
		idx = itr.idx
		v = itr.n.PreCommitDeposits.Representation()
	case 2:
		idx = itr.idx
		v = itr.n.LockedFunds.Representation()
	case 3:
		idx = itr.idx
		v = itr.n.VestingFunds.Representation()
	case 4:
		idx = itr.idx
		v = itr.n.FeeDebt.Representation()
	case 5:
		idx = itr.idx
		v = itr.n.InitialPledge.Representation()
	case 6:
		idx = itr.idx
		v = itr.n.PreCommittedSectors.Representation()
	case 7:
		idx = itr.idx
		v = itr.n.PreCommittedSectorsExpiry.Representation()
	case 8:
		idx = itr.idx
		v = itr.n.AllocatedSectors.Representation()
	case 9:
		idx = itr.idx
		v = itr.n.Sectors.Representation()
	case 10:
		idx = itr.idx
		v = itr.n.ProvingPeriodStart.Representation()
	case 11:
		idx = itr.idx
		v = itr.n.CurrentDeadline.Representation()
	case 12:
		idx = itr.idx
		v = itr.n.Deadlines.Representation()
	case 13:
		idx = itr.idx
		v = itr.n.EarlyTerminations.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_MinerV2State__ReprListItr) Done() bool {
	return itr.idx >= 14
}

func (rn *_MinerV2State__Repr) Length() int {
	l := 14
	return l
}
func (_MinerV2State__Repr) IsAbsent() bool {
	return false
}
func (_MinerV2State__Repr) IsNull() bool {
	return false
}
func (_MinerV2State__Repr) AsBool() (bool, error) {
	return mixins.List{"types.MinerV2State.Repr"}.AsBool()
}
func (_MinerV2State__Repr) AsInt() (int, error) {
	return mixins.List{"types.MinerV2State.Repr"}.AsInt()
}
func (_MinerV2State__Repr) AsFloat() (float64, error) {
	return mixins.List{"types.MinerV2State.Repr"}.AsFloat()
}
func (_MinerV2State__Repr) AsString() (string, error) {
	return mixins.List{"types.MinerV2State.Repr"}.AsString()
}
func (_MinerV2State__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"types.MinerV2State.Repr"}.AsBytes()
}
func (_MinerV2State__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"types.MinerV2State.Repr"}.AsLink()
}
func (_MinerV2State__Repr) Prototype() ipld.NodePrototype {
	return _MinerV2State__ReprPrototype{}
}
type _MinerV2State__ReprPrototype struct{}

func (_MinerV2State__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _MinerV2State__ReprBuilder
	nb.Reset()
	return &nb
}
type _MinerV2State__ReprBuilder struct {
	_MinerV2State__ReprAssembler
}
func (nb *_MinerV2State__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_MinerV2State__ReprBuilder) Reset() {
	var w _MinerV2State
	var m schema.Maybe
	*nb = _MinerV2State__ReprBuilder{_MinerV2State__ReprAssembler{w: &w, m: &m}}
}
type _MinerV2State__ReprAssembler struct {
	w *_MinerV2State
	m *schema.Maybe
	state laState
	f int

	cm schema.Maybe
	ca_Info _Link__MinerV2Info__ReprAssembler
	ca_PreCommitDeposits _BigInt__ReprAssembler
	ca_LockedFunds _BigInt__ReprAssembler
	ca_VestingFunds _Link__MinerV0VestingFunds__ReprAssembler
	ca_FeeDebt _BigInt__ReprAssembler
	ca_InitialPledge _BigInt__ReprAssembler
	ca_PreCommittedSectors _Link__MinerV0SectorPreCommits__ReprAssembler
	ca_PreCommittedSectorsExpiry _Link__ReprAssembler
	ca_AllocatedSectors _Link__BitField__ReprAssembler
	ca_Sectors _Link__MinerV0SectorInfo__ReprAssembler
	ca_ProvingPeriodStart _ChainEpoch__ReprAssembler
	ca_CurrentDeadline _Int__ReprAssembler
	ca_Deadlines _Link__MinerV2Deadlines__ReprAssembler
	ca_EarlyTerminations _BitField__ReprAssembler
	}

func (na *_MinerV2State__ReprAssembler) reset() {
	na.state = laState_initial
	na.f = 0
	na.ca_Info.reset()
	na.ca_PreCommitDeposits.reset()
	na.ca_LockedFunds.reset()
	na.ca_VestingFunds.reset()
	na.ca_FeeDebt.reset()
	na.ca_InitialPledge.reset()
	na.ca_PreCommittedSectors.reset()
	na.ca_PreCommittedSectorsExpiry.reset()
	na.ca_AllocatedSectors.reset()
	na.ca_Sectors.reset()
	na.ca_ProvingPeriodStart.reset()
	na.ca_CurrentDeadline.reset()
	na.ca_Deadlines.reset()
	na.ca_EarlyTerminations.reset()
}
func (_MinerV2State__ReprAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"types.MinerV2State.Repr"}.BeginMap(0)
}
func (na *_MinerV2State__ReprAssembler) BeginList(int) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_MinerV2State{}
	}
	return na, nil
}
func (na *_MinerV2State__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"types.MinerV2State.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_MinerV2State__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"types.MinerV2State.Repr"}.AssignBool(false)
}
func (_MinerV2State__ReprAssembler) AssignInt(int) error {
	return mixins.ListAssembler{"types.MinerV2State.Repr"}.AssignInt(0)
}
func (_MinerV2State__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"types.MinerV2State.Repr"}.AssignFloat(0)
}
func (_MinerV2State__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"types.MinerV2State.Repr"}.AssignString("")
}
func (_MinerV2State__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"types.MinerV2State.Repr"}.AssignBytes(nil)
}
func (_MinerV2State__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"types.MinerV2State.Repr"}.AssignLink(nil)
}
func (na *_MinerV2State__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_MinerV2State); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_List {
		return ipld.ErrWrongKind{TypeName: "types.MinerV2State.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustList, ActualKind: v.ReprKind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_MinerV2State__ReprAssembler) Prototype() ipld.NodePrototype {
	return _MinerV2State__ReprPrototype{}
}
func (la *_MinerV2State__ReprAssembler) valueFinishTidy() bool {
	switch la.f {
	case 0:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 1:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 2:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 3:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 4:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 5:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 6:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 7:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 8:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 9:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 10:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 11:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 12:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 13:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (la *_MinerV2State__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	if la.f >= 14 {
		return _ErrorThunkAssembler{schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(14)}}
	}
	la.state = laState_midValue
	switch la.f {
	case 0:
		la.ca_Info.w = &la.w.Info
		la.ca_Info.m = &la.cm
		return &la.ca_Info
	case 1:
		la.ca_PreCommitDeposits.w = &la.w.PreCommitDeposits
		la.ca_PreCommitDeposits.m = &la.cm
		return &la.ca_PreCommitDeposits
	case 2:
		la.ca_LockedFunds.w = &la.w.LockedFunds
		la.ca_LockedFunds.m = &la.cm
		return &la.ca_LockedFunds
	case 3:
		la.ca_VestingFunds.w = &la.w.VestingFunds
		la.ca_VestingFunds.m = &la.cm
		return &la.ca_VestingFunds
	case 4:
		la.ca_FeeDebt.w = &la.w.FeeDebt
		la.ca_FeeDebt.m = &la.cm
		return &la.ca_FeeDebt
	case 5:
		la.ca_InitialPledge.w = &la.w.InitialPledge
		la.ca_InitialPledge.m = &la.cm
		return &la.ca_InitialPledge
	case 6:
		la.ca_PreCommittedSectors.w = &la.w.PreCommittedSectors
		la.ca_PreCommittedSectors.m = &la.cm
		return &la.ca_PreCommittedSectors
	case 7:
		la.ca_PreCommittedSectorsExpiry.w = &la.w.PreCommittedSectorsExpiry
		la.ca_PreCommittedSectorsExpiry.m = &la.cm
		return &la.ca_PreCommittedSectorsExpiry
	case 8:
		la.ca_AllocatedSectors.w = &la.w.AllocatedSectors
		la.ca_AllocatedSectors.m = &la.cm
		return &la.ca_AllocatedSectors
	case 9:
		la.ca_Sectors.w = &la.w.Sectors
		la.ca_Sectors.m = &la.cm
		return &la.ca_Sectors
	case 10:
		la.ca_ProvingPeriodStart.w = &la.w.ProvingPeriodStart
		la.ca_ProvingPeriodStart.m = &la.cm
		return &la.ca_ProvingPeriodStart
	case 11:
		la.ca_CurrentDeadline.w = &la.w.CurrentDeadline
		la.ca_CurrentDeadline.m = &la.cm
		return &la.ca_CurrentDeadline
	case 12:
		la.ca_Deadlines.w = &la.w.Deadlines
		la.ca_Deadlines.m = &la.cm
		return &la.ca_Deadlines
	case 13:
		la.ca_EarlyTerminations.w = &la.w.EarlyTerminations
		la.ca_EarlyTerminations.m = &la.cm
		return &la.ca_EarlyTerminations
	default:
		panic("unreachable")
	}
}
func (la *_MinerV2State__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_MinerV2State__ReprAssembler) ValuePrototype(_ int) ipld.NodePrototype {
	panic("todo structbuilder tuplerepr valueprototype")
}
