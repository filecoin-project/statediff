package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _MultisigV0TxnID struct{ x int }
type MultisigV0TxnID = *_MultisigV0TxnID
func (n MultisigV0TxnID) Int() int {
	return n.x
}
func (_MultisigV0TxnID__Prototype) FromInt(v int) (MultisigV0TxnID, error) {
	n := _MultisigV0TxnID{v}
	return &n, nil
}
type _MultisigV0TxnID__Maybe struct {
	m schema.Maybe
	v MultisigV0TxnID
}
type MaybeMultisigV0TxnID = *_MultisigV0TxnID__Maybe

func (m MaybeMultisigV0TxnID) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeMultisigV0TxnID) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeMultisigV0TxnID) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeMultisigV0TxnID) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeMultisigV0TxnID) Must() MultisigV0TxnID {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (MultisigV0TxnID)(&_MultisigV0TxnID{})
var _ schema.TypedNode = (MultisigV0TxnID)(&_MultisigV0TxnID{})
func (MultisigV0TxnID) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Int
}
func (MultisigV0TxnID) LookupByString(string) (ipld.Node, error) {
	return mixins.Int{"types.MultisigV0TxnID"}.LookupByString("")
}
func (MultisigV0TxnID) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Int{"types.MultisigV0TxnID"}.LookupByNode(nil)
}
func (MultisigV0TxnID) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Int{"types.MultisigV0TxnID"}.LookupByIndex(0)
}
func (MultisigV0TxnID) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Int{"types.MultisigV0TxnID"}.LookupBySegment(seg)
}
func (MultisigV0TxnID) MapIterator() ipld.MapIterator {
	return nil
}
func (MultisigV0TxnID) ListIterator() ipld.ListIterator {
	return nil
}
func (MultisigV0TxnID) Length() int {
	return -1
}
func (MultisigV0TxnID) IsAbsent() bool {
	return false
}
func (MultisigV0TxnID) IsNull() bool {
	return false
}
func (MultisigV0TxnID) AsBool() (bool, error) {
	return mixins.Int{"types.MultisigV0TxnID"}.AsBool()
}
func (n MultisigV0TxnID) AsInt() (int, error) {
	return n.x, nil
}
func (MultisigV0TxnID) AsFloat() (float64, error) {
	return mixins.Int{"types.MultisigV0TxnID"}.AsFloat()
}
func (MultisigV0TxnID) AsString() (string, error) {
	return mixins.Int{"types.MultisigV0TxnID"}.AsString()
}
func (MultisigV0TxnID) AsBytes() ([]byte, error) {
	return mixins.Int{"types.MultisigV0TxnID"}.AsBytes()
}
func (MultisigV0TxnID) AsLink() (ipld.Link, error) {
	return mixins.Int{"types.MultisigV0TxnID"}.AsLink()
}
func (MultisigV0TxnID) Prototype() ipld.NodePrototype {
	return _MultisigV0TxnID__Prototype{}
}
type _MultisigV0TxnID__Prototype struct{}

func (_MultisigV0TxnID__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _MultisigV0TxnID__Builder
	nb.Reset()
	return &nb
}
type _MultisigV0TxnID__Builder struct {
	_MultisigV0TxnID__Assembler
}
func (nb *_MultisigV0TxnID__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_MultisigV0TxnID__Builder) Reset() {
	var w _MultisigV0TxnID
	var m schema.Maybe
	*nb = _MultisigV0TxnID__Builder{_MultisigV0TxnID__Assembler{w: &w, m: &m}}
}
type _MultisigV0TxnID__Assembler struct {
	w *_MultisigV0TxnID
	m *schema.Maybe
}

func (na *_MultisigV0TxnID__Assembler) reset() {}
func (_MultisigV0TxnID__Assembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.IntAssembler{"types.MultisigV0TxnID"}.BeginMap(0)
}
func (_MultisigV0TxnID__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.IntAssembler{"types.MultisigV0TxnID"}.BeginList(0)
}
func (na *_MultisigV0TxnID__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.IntAssembler{"types.MultisigV0TxnID"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_MultisigV0TxnID__Assembler) AssignBool(bool) error {
	return mixins.IntAssembler{"types.MultisigV0TxnID"}.AssignBool(false)
}
func (na *_MultisigV0TxnID__Assembler) AssignInt(v int) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_MultisigV0TxnID{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_MultisigV0TxnID__Assembler) AssignFloat(float64) error {
	return mixins.IntAssembler{"types.MultisigV0TxnID"}.AssignFloat(0)
}
func (_MultisigV0TxnID__Assembler) AssignString(string) error {
	return mixins.IntAssembler{"types.MultisigV0TxnID"}.AssignString("")
}
func (_MultisigV0TxnID__Assembler) AssignBytes([]byte) error {
	return mixins.IntAssembler{"types.MultisigV0TxnID"}.AssignBytes(nil)
}
func (_MultisigV0TxnID__Assembler) AssignLink(ipld.Link) error {
	return mixins.IntAssembler{"types.MultisigV0TxnID"}.AssignLink(nil)
}
func (na *_MultisigV0TxnID__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_MultisigV0TxnID); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsInt(); err != nil {
		return err
	} else {
		return na.AssignInt(v2)
	}
}
func (_MultisigV0TxnID__Assembler) Prototype() ipld.NodePrototype {
	return _MultisigV0TxnID__Prototype{}
}
func (MultisigV0TxnID) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n MultisigV0TxnID) Representation() ipld.Node {
	return (*_MultisigV0TxnID__Repr)(n)
}
type _MultisigV0TxnID__Repr = _MultisigV0TxnID
var _ ipld.Node = &_MultisigV0TxnID__Repr{}
type _MultisigV0TxnID__ReprPrototype = _MultisigV0TxnID__Prototype
type _MultisigV0TxnID__ReprAssembler = _MultisigV0TxnID__Assembler
