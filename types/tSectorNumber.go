package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _SectorNumber struct{ x int }
type SectorNumber = *_SectorNumber
func (n SectorNumber) Int() int {
	return n.x
}
func (_SectorNumber__Prototype) FromInt(v int) (SectorNumber, error) {
	n := _SectorNumber{v}
	return &n, nil
}
type _SectorNumber__Maybe struct {
	m schema.Maybe
	v SectorNumber
}
type MaybeSectorNumber = *_SectorNumber__Maybe

func (m MaybeSectorNumber) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeSectorNumber) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeSectorNumber) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeSectorNumber) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeSectorNumber) Must() SectorNumber {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (SectorNumber)(&_SectorNumber{})
var _ schema.TypedNode = (SectorNumber)(&_SectorNumber{})
func (SectorNumber) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Int
}
func (SectorNumber) LookupByString(string) (ipld.Node, error) {
	return mixins.Int{"types.SectorNumber"}.LookupByString("")
}
func (SectorNumber) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Int{"types.SectorNumber"}.LookupByNode(nil)
}
func (SectorNumber) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Int{"types.SectorNumber"}.LookupByIndex(0)
}
func (SectorNumber) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Int{"types.SectorNumber"}.LookupBySegment(seg)
}
func (SectorNumber) MapIterator() ipld.MapIterator {
	return nil
}
func (SectorNumber) ListIterator() ipld.ListIterator {
	return nil
}
func (SectorNumber) Length() int {
	return -1
}
func (SectorNumber) IsAbsent() bool {
	return false
}
func (SectorNumber) IsNull() bool {
	return false
}
func (SectorNumber) AsBool() (bool, error) {
	return mixins.Int{"types.SectorNumber"}.AsBool()
}
func (n SectorNumber) AsInt() (int, error) {
	return n.x, nil
}
func (SectorNumber) AsFloat() (float64, error) {
	return mixins.Int{"types.SectorNumber"}.AsFloat()
}
func (SectorNumber) AsString() (string, error) {
	return mixins.Int{"types.SectorNumber"}.AsString()
}
func (SectorNumber) AsBytes() ([]byte, error) {
	return mixins.Int{"types.SectorNumber"}.AsBytes()
}
func (SectorNumber) AsLink() (ipld.Link, error) {
	return mixins.Int{"types.SectorNumber"}.AsLink()
}
func (SectorNumber) Prototype() ipld.NodePrototype {
	return _SectorNumber__Prototype{}
}
type _SectorNumber__Prototype struct{}

func (_SectorNumber__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _SectorNumber__Builder
	nb.Reset()
	return &nb
}
type _SectorNumber__Builder struct {
	_SectorNumber__Assembler
}
func (nb *_SectorNumber__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_SectorNumber__Builder) Reset() {
	var w _SectorNumber
	var m schema.Maybe
	*nb = _SectorNumber__Builder{_SectorNumber__Assembler{w: &w, m: &m}}
}
type _SectorNumber__Assembler struct {
	w *_SectorNumber
	m *schema.Maybe
}

func (na *_SectorNumber__Assembler) reset() {}
func (_SectorNumber__Assembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.IntAssembler{"types.SectorNumber"}.BeginMap(0)
}
func (_SectorNumber__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.IntAssembler{"types.SectorNumber"}.BeginList(0)
}
func (na *_SectorNumber__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.IntAssembler{"types.SectorNumber"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_SectorNumber__Assembler) AssignBool(bool) error {
	return mixins.IntAssembler{"types.SectorNumber"}.AssignBool(false)
}
func (na *_SectorNumber__Assembler) AssignInt(v int) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_SectorNumber{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_SectorNumber__Assembler) AssignFloat(float64) error {
	return mixins.IntAssembler{"types.SectorNumber"}.AssignFloat(0)
}
func (_SectorNumber__Assembler) AssignString(string) error {
	return mixins.IntAssembler{"types.SectorNumber"}.AssignString("")
}
func (_SectorNumber__Assembler) AssignBytes([]byte) error {
	return mixins.IntAssembler{"types.SectorNumber"}.AssignBytes(nil)
}
func (_SectorNumber__Assembler) AssignLink(ipld.Link) error {
	return mixins.IntAssembler{"types.SectorNumber"}.AssignLink(nil)
}
func (na *_SectorNumber__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_SectorNumber); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsInt(); err != nil {
		return err
	} else {
		return na.AssignInt(v2)
	}
}
func (_SectorNumber__Assembler) Prototype() ipld.NodePrototype {
	return _SectorNumber__Prototype{}
}
func (SectorNumber) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n SectorNumber) Representation() ipld.Node {
	return (*_SectorNumber__Repr)(n)
}
type _SectorNumber__Repr = _SectorNumber
var _ ipld.Node = &_SectorNumber__Repr{}
type _SectorNumber__ReprPrototype = _SectorNumber__Prototype
type _SectorNumber__ReprAssembler = _SectorNumber__Assembler
