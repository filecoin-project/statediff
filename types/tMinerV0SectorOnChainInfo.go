package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _MinerV0SectorOnChainInfo struct {
	SectorNumber _SectorNumber
	SealProof _Int
	SealedCID _Link
	DealIDs _List__DealID
	Activation _ChainEpoch
	Expiration _ChainEpoch
	DealWeight _BigInt
	VerifiedDealWeight _BigInt
	InitialPledge _BigInt
	ExpectedDayReward _BigInt
	ExpectedStorageReward _BigInt
}
type MinerV0SectorOnChainInfo = *_MinerV0SectorOnChainInfo

func (n _MinerV0SectorOnChainInfo) FieldSectorNumber()	SectorNumber {
	return &n.SectorNumber
}
func (n _MinerV0SectorOnChainInfo) FieldSealProof()	Int {
	return &n.SealProof
}
func (n _MinerV0SectorOnChainInfo) FieldSealedCID()	Link {
	return &n.SealedCID
}
func (n _MinerV0SectorOnChainInfo) FieldDealIDs()	List__DealID {
	return &n.DealIDs
}
func (n _MinerV0SectorOnChainInfo) FieldActivation()	ChainEpoch {
	return &n.Activation
}
func (n _MinerV0SectorOnChainInfo) FieldExpiration()	ChainEpoch {
	return &n.Expiration
}
func (n _MinerV0SectorOnChainInfo) FieldDealWeight()	BigInt {
	return &n.DealWeight
}
func (n _MinerV0SectorOnChainInfo) FieldVerifiedDealWeight()	BigInt {
	return &n.VerifiedDealWeight
}
func (n _MinerV0SectorOnChainInfo) FieldInitialPledge()	BigInt {
	return &n.InitialPledge
}
func (n _MinerV0SectorOnChainInfo) FieldExpectedDayReward()	BigInt {
	return &n.ExpectedDayReward
}
func (n _MinerV0SectorOnChainInfo) FieldExpectedStorageReward()	BigInt {
	return &n.ExpectedStorageReward
}
type _MinerV0SectorOnChainInfo__Maybe struct {
	m schema.Maybe
	v MinerV0SectorOnChainInfo
}
type MaybeMinerV0SectorOnChainInfo = *_MinerV0SectorOnChainInfo__Maybe

func (m MaybeMinerV0SectorOnChainInfo) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeMinerV0SectorOnChainInfo) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeMinerV0SectorOnChainInfo) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeMinerV0SectorOnChainInfo) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeMinerV0SectorOnChainInfo) Must() MinerV0SectorOnChainInfo {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__MinerV0SectorOnChainInfo_SectorNumber = _String{"SectorNumber"}
	fieldName__MinerV0SectorOnChainInfo_SealProof = _String{"SealProof"}
	fieldName__MinerV0SectorOnChainInfo_SealedCID = _String{"SealedCID"}
	fieldName__MinerV0SectorOnChainInfo_DealIDs = _String{"DealIDs"}
	fieldName__MinerV0SectorOnChainInfo_Activation = _String{"Activation"}
	fieldName__MinerV0SectorOnChainInfo_Expiration = _String{"Expiration"}
	fieldName__MinerV0SectorOnChainInfo_DealWeight = _String{"DealWeight"}
	fieldName__MinerV0SectorOnChainInfo_VerifiedDealWeight = _String{"VerifiedDealWeight"}
	fieldName__MinerV0SectorOnChainInfo_InitialPledge = _String{"InitialPledge"}
	fieldName__MinerV0SectorOnChainInfo_ExpectedDayReward = _String{"ExpectedDayReward"}
	fieldName__MinerV0SectorOnChainInfo_ExpectedStorageReward = _String{"ExpectedStorageReward"}
)
var _ ipld.Node = (MinerV0SectorOnChainInfo)(&_MinerV0SectorOnChainInfo{})
var _ schema.TypedNode = (MinerV0SectorOnChainInfo)(&_MinerV0SectorOnChainInfo{})
func (MinerV0SectorOnChainInfo) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n MinerV0SectorOnChainInfo) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "SectorNumber":
		return &n.SectorNumber, nil
	case "SealProof":
		return &n.SealProof, nil
	case "SealedCID":
		return &n.SealedCID, nil
	case "DealIDs":
		return &n.DealIDs, nil
	case "Activation":
		return &n.Activation, nil
	case "Expiration":
		return &n.Expiration, nil
	case "DealWeight":
		return &n.DealWeight, nil
	case "VerifiedDealWeight":
		return &n.VerifiedDealWeight, nil
	case "InitialPledge":
		return &n.InitialPledge, nil
	case "ExpectedDayReward":
		return &n.ExpectedDayReward, nil
	case "ExpectedStorageReward":
		return &n.ExpectedStorageReward, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n MinerV0SectorOnChainInfo) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (MinerV0SectorOnChainInfo) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"types.MinerV0SectorOnChainInfo"}.LookupByIndex(0)
}
func (n MinerV0SectorOnChainInfo) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n MinerV0SectorOnChainInfo) MapIterator() ipld.MapIterator {
	return &_MinerV0SectorOnChainInfo__MapItr{n, 0}
}

type _MinerV0SectorOnChainInfo__MapItr struct {
	n MinerV0SectorOnChainInfo
	idx  int
}

func (itr *_MinerV0SectorOnChainInfo__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 11 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__MinerV0SectorOnChainInfo_SectorNumber
		v = &itr.n.SectorNumber
	case 1:
		k = &fieldName__MinerV0SectorOnChainInfo_SealProof
		v = &itr.n.SealProof
	case 2:
		k = &fieldName__MinerV0SectorOnChainInfo_SealedCID
		v = &itr.n.SealedCID
	case 3:
		k = &fieldName__MinerV0SectorOnChainInfo_DealIDs
		v = &itr.n.DealIDs
	case 4:
		k = &fieldName__MinerV0SectorOnChainInfo_Activation
		v = &itr.n.Activation
	case 5:
		k = &fieldName__MinerV0SectorOnChainInfo_Expiration
		v = &itr.n.Expiration
	case 6:
		k = &fieldName__MinerV0SectorOnChainInfo_DealWeight
		v = &itr.n.DealWeight
	case 7:
		k = &fieldName__MinerV0SectorOnChainInfo_VerifiedDealWeight
		v = &itr.n.VerifiedDealWeight
	case 8:
		k = &fieldName__MinerV0SectorOnChainInfo_InitialPledge
		v = &itr.n.InitialPledge
	case 9:
		k = &fieldName__MinerV0SectorOnChainInfo_ExpectedDayReward
		v = &itr.n.ExpectedDayReward
	case 10:
		k = &fieldName__MinerV0SectorOnChainInfo_ExpectedStorageReward
		v = &itr.n.ExpectedStorageReward
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_MinerV0SectorOnChainInfo__MapItr) Done() bool {
	return itr.idx >= 11
}

func (MinerV0SectorOnChainInfo) ListIterator() ipld.ListIterator {
	return nil
}
func (MinerV0SectorOnChainInfo) Length() int {
	return 11
}
func (MinerV0SectorOnChainInfo) IsAbsent() bool {
	return false
}
func (MinerV0SectorOnChainInfo) IsNull() bool {
	return false
}
func (MinerV0SectorOnChainInfo) AsBool() (bool, error) {
	return mixins.Map{"types.MinerV0SectorOnChainInfo"}.AsBool()
}
func (MinerV0SectorOnChainInfo) AsInt() (int, error) {
	return mixins.Map{"types.MinerV0SectorOnChainInfo"}.AsInt()
}
func (MinerV0SectorOnChainInfo) AsFloat() (float64, error) {
	return mixins.Map{"types.MinerV0SectorOnChainInfo"}.AsFloat()
}
func (MinerV0SectorOnChainInfo) AsString() (string, error) {
	return mixins.Map{"types.MinerV0SectorOnChainInfo"}.AsString()
}
func (MinerV0SectorOnChainInfo) AsBytes() ([]byte, error) {
	return mixins.Map{"types.MinerV0SectorOnChainInfo"}.AsBytes()
}
func (MinerV0SectorOnChainInfo) AsLink() (ipld.Link, error) {
	return mixins.Map{"types.MinerV0SectorOnChainInfo"}.AsLink()
}
func (MinerV0SectorOnChainInfo) Prototype() ipld.NodePrototype {
	return _MinerV0SectorOnChainInfo__Prototype{}
}
type _MinerV0SectorOnChainInfo__Prototype struct{}

func (_MinerV0SectorOnChainInfo__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _MinerV0SectorOnChainInfo__Builder
	nb.Reset()
	return &nb
}
type _MinerV0SectorOnChainInfo__Builder struct {
	_MinerV0SectorOnChainInfo__Assembler
}
func (nb *_MinerV0SectorOnChainInfo__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_MinerV0SectorOnChainInfo__Builder) Reset() {
	var w _MinerV0SectorOnChainInfo
	var m schema.Maybe
	*nb = _MinerV0SectorOnChainInfo__Builder{_MinerV0SectorOnChainInfo__Assembler{w: &w, m: &m}}
}
type _MinerV0SectorOnChainInfo__Assembler struct {
	w *_MinerV0SectorOnChainInfo
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_SectorNumber _SectorNumber__Assembler
	ca_SealProof _Int__Assembler
	ca_SealedCID _Link__Assembler
	ca_DealIDs _List__DealID__Assembler
	ca_Activation _ChainEpoch__Assembler
	ca_Expiration _ChainEpoch__Assembler
	ca_DealWeight _BigInt__Assembler
	ca_VerifiedDealWeight _BigInt__Assembler
	ca_InitialPledge _BigInt__Assembler
	ca_ExpectedDayReward _BigInt__Assembler
	ca_ExpectedStorageReward _BigInt__Assembler
	}

func (na *_MinerV0SectorOnChainInfo__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_SectorNumber.reset()
	na.ca_SealProof.reset()
	na.ca_SealedCID.reset()
	na.ca_DealIDs.reset()
	na.ca_Activation.reset()
	na.ca_Expiration.reset()
	na.ca_DealWeight.reset()
	na.ca_VerifiedDealWeight.reset()
	na.ca_InitialPledge.reset()
	na.ca_ExpectedDayReward.reset()
	na.ca_ExpectedStorageReward.reset()
}

var (
	fieldBit__MinerV0SectorOnChainInfo_SectorNumber = 1 << 0
	fieldBit__MinerV0SectorOnChainInfo_SealProof = 1 << 1
	fieldBit__MinerV0SectorOnChainInfo_SealedCID = 1 << 2
	fieldBit__MinerV0SectorOnChainInfo_DealIDs = 1 << 3
	fieldBit__MinerV0SectorOnChainInfo_Activation = 1 << 4
	fieldBit__MinerV0SectorOnChainInfo_Expiration = 1 << 5
	fieldBit__MinerV0SectorOnChainInfo_DealWeight = 1 << 6
	fieldBit__MinerV0SectorOnChainInfo_VerifiedDealWeight = 1 << 7
	fieldBit__MinerV0SectorOnChainInfo_InitialPledge = 1 << 8
	fieldBit__MinerV0SectorOnChainInfo_ExpectedDayReward = 1 << 9
	fieldBit__MinerV0SectorOnChainInfo_ExpectedStorageReward = 1 << 10
	fieldBits__MinerV0SectorOnChainInfo_sufficient = 0 + 1 << 0 + 1 << 1 + 1 << 2 + 1 << 3 + 1 << 4 + 1 << 5 + 1 << 6 + 1 << 7 + 1 << 8 + 1 << 9 + 1 << 10
)
func (na *_MinerV0SectorOnChainInfo__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_MinerV0SectorOnChainInfo{}
	}
	return na, nil
}
func (_MinerV0SectorOnChainInfo__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"types.MinerV0SectorOnChainInfo"}.BeginList(0)
}
func (na *_MinerV0SectorOnChainInfo__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"types.MinerV0SectorOnChainInfo"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_MinerV0SectorOnChainInfo__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"types.MinerV0SectorOnChainInfo"}.AssignBool(false)
}
func (_MinerV0SectorOnChainInfo__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"types.MinerV0SectorOnChainInfo"}.AssignInt(0)
}
func (_MinerV0SectorOnChainInfo__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"types.MinerV0SectorOnChainInfo"}.AssignFloat(0)
}
func (_MinerV0SectorOnChainInfo__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"types.MinerV0SectorOnChainInfo"}.AssignString("")
}
func (_MinerV0SectorOnChainInfo__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"types.MinerV0SectorOnChainInfo"}.AssignBytes(nil)
}
func (_MinerV0SectorOnChainInfo__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"types.MinerV0SectorOnChainInfo"}.AssignLink(nil)
}
func (na *_MinerV0SectorOnChainInfo__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_MinerV0SectorOnChainInfo); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "types.MinerV0SectorOnChainInfo", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_MinerV0SectorOnChainInfo__Assembler) Prototype() ipld.NodePrototype {
	return _MinerV0SectorOnChainInfo__Prototype{}
}
func (ma *_MinerV0SectorOnChainInfo__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_SectorNumber.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_SealProof.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_SealedCID.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_DealIDs.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 4:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Activation.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 5:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Expiration.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 6:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_DealWeight.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 7:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_VerifiedDealWeight.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 8:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_InitialPledge.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 9:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ExpectedDayReward.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 10:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ExpectedStorageReward.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_MinerV0SectorOnChainInfo__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "SectorNumber":
		if ma.s & fieldBit__MinerV0SectorOnChainInfo_SectorNumber != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorOnChainInfo_SectorNumber}
		}
		ma.s += fieldBit__MinerV0SectorOnChainInfo_SectorNumber
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_SectorNumber.w = &ma.w.SectorNumber
		ma.ca_SectorNumber.m = &ma.cm
		return &ma.ca_SectorNumber, nil
	case "SealProof":
		if ma.s & fieldBit__MinerV0SectorOnChainInfo_SealProof != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorOnChainInfo_SealProof}
		}
		ma.s += fieldBit__MinerV0SectorOnChainInfo_SealProof
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_SealProof.w = &ma.w.SealProof
		ma.ca_SealProof.m = &ma.cm
		return &ma.ca_SealProof, nil
	case "SealedCID":
		if ma.s & fieldBit__MinerV0SectorOnChainInfo_SealedCID != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorOnChainInfo_SealedCID}
		}
		ma.s += fieldBit__MinerV0SectorOnChainInfo_SealedCID
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_SealedCID.w = &ma.w.SealedCID
		ma.ca_SealedCID.m = &ma.cm
		return &ma.ca_SealedCID, nil
	case "DealIDs":
		if ma.s & fieldBit__MinerV0SectorOnChainInfo_DealIDs != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorOnChainInfo_DealIDs}
		}
		ma.s += fieldBit__MinerV0SectorOnChainInfo_DealIDs
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_DealIDs.w = &ma.w.DealIDs
		ma.ca_DealIDs.m = &ma.cm
		return &ma.ca_DealIDs, nil
	case "Activation":
		if ma.s & fieldBit__MinerV0SectorOnChainInfo_Activation != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorOnChainInfo_Activation}
		}
		ma.s += fieldBit__MinerV0SectorOnChainInfo_Activation
		ma.state = maState_midValue
		ma.f = 4
		ma.ca_Activation.w = &ma.w.Activation
		ma.ca_Activation.m = &ma.cm
		return &ma.ca_Activation, nil
	case "Expiration":
		if ma.s & fieldBit__MinerV0SectorOnChainInfo_Expiration != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorOnChainInfo_Expiration}
		}
		ma.s += fieldBit__MinerV0SectorOnChainInfo_Expiration
		ma.state = maState_midValue
		ma.f = 5
		ma.ca_Expiration.w = &ma.w.Expiration
		ma.ca_Expiration.m = &ma.cm
		return &ma.ca_Expiration, nil
	case "DealWeight":
		if ma.s & fieldBit__MinerV0SectorOnChainInfo_DealWeight != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorOnChainInfo_DealWeight}
		}
		ma.s += fieldBit__MinerV0SectorOnChainInfo_DealWeight
		ma.state = maState_midValue
		ma.f = 6
		ma.ca_DealWeight.w = &ma.w.DealWeight
		ma.ca_DealWeight.m = &ma.cm
		return &ma.ca_DealWeight, nil
	case "VerifiedDealWeight":
		if ma.s & fieldBit__MinerV0SectorOnChainInfo_VerifiedDealWeight != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorOnChainInfo_VerifiedDealWeight}
		}
		ma.s += fieldBit__MinerV0SectorOnChainInfo_VerifiedDealWeight
		ma.state = maState_midValue
		ma.f = 7
		ma.ca_VerifiedDealWeight.w = &ma.w.VerifiedDealWeight
		ma.ca_VerifiedDealWeight.m = &ma.cm
		return &ma.ca_VerifiedDealWeight, nil
	case "InitialPledge":
		if ma.s & fieldBit__MinerV0SectorOnChainInfo_InitialPledge != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorOnChainInfo_InitialPledge}
		}
		ma.s += fieldBit__MinerV0SectorOnChainInfo_InitialPledge
		ma.state = maState_midValue
		ma.f = 8
		ma.ca_InitialPledge.w = &ma.w.InitialPledge
		ma.ca_InitialPledge.m = &ma.cm
		return &ma.ca_InitialPledge, nil
	case "ExpectedDayReward":
		if ma.s & fieldBit__MinerV0SectorOnChainInfo_ExpectedDayReward != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorOnChainInfo_ExpectedDayReward}
		}
		ma.s += fieldBit__MinerV0SectorOnChainInfo_ExpectedDayReward
		ma.state = maState_midValue
		ma.f = 9
		ma.ca_ExpectedDayReward.w = &ma.w.ExpectedDayReward
		ma.ca_ExpectedDayReward.m = &ma.cm
		return &ma.ca_ExpectedDayReward, nil
	case "ExpectedStorageReward":
		if ma.s & fieldBit__MinerV0SectorOnChainInfo_ExpectedStorageReward != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorOnChainInfo_ExpectedStorageReward}
		}
		ma.s += fieldBit__MinerV0SectorOnChainInfo_ExpectedStorageReward
		ma.state = maState_midValue
		ma.f = 10
		ma.ca_ExpectedStorageReward.w = &ma.w.ExpectedStorageReward
		ma.ca_ExpectedStorageReward.m = &ma.cm
		return &ma.ca_ExpectedStorageReward, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"types.MinerV0SectorOnChainInfo", Key:&_String{k}}
	}
}
func (ma *_MinerV0SectorOnChainInfo__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_MinerV0SectorOnChainInfo__KeyAssembler)(ma)
}
func (ma *_MinerV0SectorOnChainInfo__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_SectorNumber.w = &ma.w.SectorNumber
		ma.ca_SectorNumber.m = &ma.cm
		return &ma.ca_SectorNumber
	case 1:
		ma.ca_SealProof.w = &ma.w.SealProof
		ma.ca_SealProof.m = &ma.cm
		return &ma.ca_SealProof
	case 2:
		ma.ca_SealedCID.w = &ma.w.SealedCID
		ma.ca_SealedCID.m = &ma.cm
		return &ma.ca_SealedCID
	case 3:
		ma.ca_DealIDs.w = &ma.w.DealIDs
		ma.ca_DealIDs.m = &ma.cm
		return &ma.ca_DealIDs
	case 4:
		ma.ca_Activation.w = &ma.w.Activation
		ma.ca_Activation.m = &ma.cm
		return &ma.ca_Activation
	case 5:
		ma.ca_Expiration.w = &ma.w.Expiration
		ma.ca_Expiration.m = &ma.cm
		return &ma.ca_Expiration
	case 6:
		ma.ca_DealWeight.w = &ma.w.DealWeight
		ma.ca_DealWeight.m = &ma.cm
		return &ma.ca_DealWeight
	case 7:
		ma.ca_VerifiedDealWeight.w = &ma.w.VerifiedDealWeight
		ma.ca_VerifiedDealWeight.m = &ma.cm
		return &ma.ca_VerifiedDealWeight
	case 8:
		ma.ca_InitialPledge.w = &ma.w.InitialPledge
		ma.ca_InitialPledge.m = &ma.cm
		return &ma.ca_InitialPledge
	case 9:
		ma.ca_ExpectedDayReward.w = &ma.w.ExpectedDayReward
		ma.ca_ExpectedDayReward.m = &ma.cm
		return &ma.ca_ExpectedDayReward
	case 10:
		ma.ca_ExpectedStorageReward.w = &ma.w.ExpectedStorageReward
		ma.ca_ExpectedStorageReward.m = &ma.cm
		return &ma.ca_ExpectedStorageReward
	default:
		panic("unreachable")
	}
}
func (ma *_MinerV0SectorOnChainInfo__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_MinerV0SectorOnChainInfo__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_MinerV0SectorOnChainInfo__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _MinerV0SectorOnChainInfo__KeyAssembler _MinerV0SectorOnChainInfo__Assembler
func (_MinerV0SectorOnChainInfo__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"types.MinerV0SectorOnChainInfo.KeyAssembler"}.BeginMap(0)
}
func (_MinerV0SectorOnChainInfo__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"types.MinerV0SectorOnChainInfo.KeyAssembler"}.BeginList(0)
}
func (na *_MinerV0SectorOnChainInfo__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"types.MinerV0SectorOnChainInfo.KeyAssembler"}.AssignNull()
}
func (_MinerV0SectorOnChainInfo__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"types.MinerV0SectorOnChainInfo.KeyAssembler"}.AssignBool(false)
}
func (_MinerV0SectorOnChainInfo__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"types.MinerV0SectorOnChainInfo.KeyAssembler"}.AssignInt(0)
}
func (_MinerV0SectorOnChainInfo__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"types.MinerV0SectorOnChainInfo.KeyAssembler"}.AssignFloat(0)
}
func (ka *_MinerV0SectorOnChainInfo__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "SectorNumber":
		if ka.s & fieldBit__MinerV0SectorOnChainInfo_SectorNumber != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorOnChainInfo_SectorNumber}
		}
		ka.s += fieldBit__MinerV0SectorOnChainInfo_SectorNumber
		ka.state = maState_expectValue
		ka.f = 0
	case "SealProof":
		if ka.s & fieldBit__MinerV0SectorOnChainInfo_SealProof != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorOnChainInfo_SealProof}
		}
		ka.s += fieldBit__MinerV0SectorOnChainInfo_SealProof
		ka.state = maState_expectValue
		ka.f = 1
	case "SealedCID":
		if ka.s & fieldBit__MinerV0SectorOnChainInfo_SealedCID != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorOnChainInfo_SealedCID}
		}
		ka.s += fieldBit__MinerV0SectorOnChainInfo_SealedCID
		ka.state = maState_expectValue
		ka.f = 2
	case "DealIDs":
		if ka.s & fieldBit__MinerV0SectorOnChainInfo_DealIDs != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorOnChainInfo_DealIDs}
		}
		ka.s += fieldBit__MinerV0SectorOnChainInfo_DealIDs
		ka.state = maState_expectValue
		ka.f = 3
	case "Activation":
		if ka.s & fieldBit__MinerV0SectorOnChainInfo_Activation != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorOnChainInfo_Activation}
		}
		ka.s += fieldBit__MinerV0SectorOnChainInfo_Activation
		ka.state = maState_expectValue
		ka.f = 4
	case "Expiration":
		if ka.s & fieldBit__MinerV0SectorOnChainInfo_Expiration != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorOnChainInfo_Expiration}
		}
		ka.s += fieldBit__MinerV0SectorOnChainInfo_Expiration
		ka.state = maState_expectValue
		ka.f = 5
	case "DealWeight":
		if ka.s & fieldBit__MinerV0SectorOnChainInfo_DealWeight != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorOnChainInfo_DealWeight}
		}
		ka.s += fieldBit__MinerV0SectorOnChainInfo_DealWeight
		ka.state = maState_expectValue
		ka.f = 6
	case "VerifiedDealWeight":
		if ka.s & fieldBit__MinerV0SectorOnChainInfo_VerifiedDealWeight != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorOnChainInfo_VerifiedDealWeight}
		}
		ka.s += fieldBit__MinerV0SectorOnChainInfo_VerifiedDealWeight
		ka.state = maState_expectValue
		ka.f = 7
	case "InitialPledge":
		if ka.s & fieldBit__MinerV0SectorOnChainInfo_InitialPledge != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorOnChainInfo_InitialPledge}
		}
		ka.s += fieldBit__MinerV0SectorOnChainInfo_InitialPledge
		ka.state = maState_expectValue
		ka.f = 8
	case "ExpectedDayReward":
		if ka.s & fieldBit__MinerV0SectorOnChainInfo_ExpectedDayReward != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorOnChainInfo_ExpectedDayReward}
		}
		ka.s += fieldBit__MinerV0SectorOnChainInfo_ExpectedDayReward
		ka.state = maState_expectValue
		ka.f = 9
	case "ExpectedStorageReward":
		if ka.s & fieldBit__MinerV0SectorOnChainInfo_ExpectedStorageReward != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorOnChainInfo_ExpectedStorageReward}
		}
		ka.s += fieldBit__MinerV0SectorOnChainInfo_ExpectedStorageReward
		ka.state = maState_expectValue
		ka.f = 10
	default:
		return ipld.ErrInvalidKey{TypeName:"types.MinerV0SectorOnChainInfo", Key:&_String{k}}
	}
	return nil
}
func (_MinerV0SectorOnChainInfo__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"types.MinerV0SectorOnChainInfo.KeyAssembler"}.AssignBytes(nil)
}
func (_MinerV0SectorOnChainInfo__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"types.MinerV0SectorOnChainInfo.KeyAssembler"}.AssignLink(nil)
}
func (ka *_MinerV0SectorOnChainInfo__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_MinerV0SectorOnChainInfo__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (MinerV0SectorOnChainInfo) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n MinerV0SectorOnChainInfo) Representation() ipld.Node {
	return (*_MinerV0SectorOnChainInfo__Repr)(n)
}
type _MinerV0SectorOnChainInfo__Repr _MinerV0SectorOnChainInfo
var _ ipld.Node = &_MinerV0SectorOnChainInfo__Repr{}
func (_MinerV0SectorOnChainInfo__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_List
}
func (_MinerV0SectorOnChainInfo__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"types.MinerV0SectorOnChainInfo.Repr"}.LookupByString("")
}
func (n *_MinerV0SectorOnChainInfo__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ki, err := key.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(ki)
}
func (n *_MinerV0SectorOnChainInfo__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	switch idx {
	case 0:
		return n.SectorNumber.Representation(), nil
	case 1:
		return n.SealProof.Representation(), nil
	case 2:
		return n.SealedCID.Representation(), nil
	case 3:
		return n.DealIDs.Representation(), nil
	case 4:
		return n.Activation.Representation(), nil
	case 5:
		return n.Expiration.Representation(), nil
	case 6:
		return n.DealWeight.Representation(), nil
	case 7:
		return n.VerifiedDealWeight.Representation(), nil
	case 8:
		return n.InitialPledge.Representation(), nil
	case 9:
		return n.ExpectedDayReward.Representation(), nil
	case 10:
		return n.ExpectedStorageReward.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(idx)}
	}
}
func (n _MinerV0SectorOnChainInfo__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "types.MinerV0SectorOnChainInfo.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_MinerV0SectorOnChainInfo__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (n *_MinerV0SectorOnChainInfo__Repr) ListIterator() ipld.ListIterator {
	return &_MinerV0SectorOnChainInfo__ReprListItr{n, 0}
}

type _MinerV0SectorOnChainInfo__ReprListItr struct {
	n   *_MinerV0SectorOnChainInfo__Repr
	idx int
	
}

func (itr *_MinerV0SectorOnChainInfo__ReprListItr) Next() (idx int, v ipld.Node, err error) {
	if itr.idx >= 11 {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		idx = itr.idx
		v = itr.n.SectorNumber.Representation()
	case 1:
		idx = itr.idx
		v = itr.n.SealProof.Representation()
	case 2:
		idx = itr.idx
		v = itr.n.SealedCID.Representation()
	case 3:
		idx = itr.idx
		v = itr.n.DealIDs.Representation()
	case 4:
		idx = itr.idx
		v = itr.n.Activation.Representation()
	case 5:
		idx = itr.idx
		v = itr.n.Expiration.Representation()
	case 6:
		idx = itr.idx
		v = itr.n.DealWeight.Representation()
	case 7:
		idx = itr.idx
		v = itr.n.VerifiedDealWeight.Representation()
	case 8:
		idx = itr.idx
		v = itr.n.InitialPledge.Representation()
	case 9:
		idx = itr.idx
		v = itr.n.ExpectedDayReward.Representation()
	case 10:
		idx = itr.idx
		v = itr.n.ExpectedStorageReward.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_MinerV0SectorOnChainInfo__ReprListItr) Done() bool {
	return itr.idx >= 11
}

func (rn *_MinerV0SectorOnChainInfo__Repr) Length() int {
	l := 11
	return l
}
func (_MinerV0SectorOnChainInfo__Repr) IsAbsent() bool {
	return false
}
func (_MinerV0SectorOnChainInfo__Repr) IsNull() bool {
	return false
}
func (_MinerV0SectorOnChainInfo__Repr) AsBool() (bool, error) {
	return mixins.List{"types.MinerV0SectorOnChainInfo.Repr"}.AsBool()
}
func (_MinerV0SectorOnChainInfo__Repr) AsInt() (int, error) {
	return mixins.List{"types.MinerV0SectorOnChainInfo.Repr"}.AsInt()
}
func (_MinerV0SectorOnChainInfo__Repr) AsFloat() (float64, error) {
	return mixins.List{"types.MinerV0SectorOnChainInfo.Repr"}.AsFloat()
}
func (_MinerV0SectorOnChainInfo__Repr) AsString() (string, error) {
	return mixins.List{"types.MinerV0SectorOnChainInfo.Repr"}.AsString()
}
func (_MinerV0SectorOnChainInfo__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"types.MinerV0SectorOnChainInfo.Repr"}.AsBytes()
}
func (_MinerV0SectorOnChainInfo__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"types.MinerV0SectorOnChainInfo.Repr"}.AsLink()
}
func (_MinerV0SectorOnChainInfo__Repr) Prototype() ipld.NodePrototype {
	return _MinerV0SectorOnChainInfo__ReprPrototype{}
}
type _MinerV0SectorOnChainInfo__ReprPrototype struct{}

func (_MinerV0SectorOnChainInfo__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _MinerV0SectorOnChainInfo__ReprBuilder
	nb.Reset()
	return &nb
}
type _MinerV0SectorOnChainInfo__ReprBuilder struct {
	_MinerV0SectorOnChainInfo__ReprAssembler
}
func (nb *_MinerV0SectorOnChainInfo__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_MinerV0SectorOnChainInfo__ReprBuilder) Reset() {
	var w _MinerV0SectorOnChainInfo
	var m schema.Maybe
	*nb = _MinerV0SectorOnChainInfo__ReprBuilder{_MinerV0SectorOnChainInfo__ReprAssembler{w: &w, m: &m}}
}
type _MinerV0SectorOnChainInfo__ReprAssembler struct {
	w *_MinerV0SectorOnChainInfo
	m *schema.Maybe
	state laState
	f int

	cm schema.Maybe
	ca_SectorNumber _SectorNumber__ReprAssembler
	ca_SealProof _Int__ReprAssembler
	ca_SealedCID _Link__ReprAssembler
	ca_DealIDs _List__DealID__ReprAssembler
	ca_Activation _ChainEpoch__ReprAssembler
	ca_Expiration _ChainEpoch__ReprAssembler
	ca_DealWeight _BigInt__ReprAssembler
	ca_VerifiedDealWeight _BigInt__ReprAssembler
	ca_InitialPledge _BigInt__ReprAssembler
	ca_ExpectedDayReward _BigInt__ReprAssembler
	ca_ExpectedStorageReward _BigInt__ReprAssembler
	}

func (na *_MinerV0SectorOnChainInfo__ReprAssembler) reset() {
	na.state = laState_initial
	na.f = 0
	na.ca_SectorNumber.reset()
	na.ca_SealProof.reset()
	na.ca_SealedCID.reset()
	na.ca_DealIDs.reset()
	na.ca_Activation.reset()
	na.ca_Expiration.reset()
	na.ca_DealWeight.reset()
	na.ca_VerifiedDealWeight.reset()
	na.ca_InitialPledge.reset()
	na.ca_ExpectedDayReward.reset()
	na.ca_ExpectedStorageReward.reset()
}
func (_MinerV0SectorOnChainInfo__ReprAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"types.MinerV0SectorOnChainInfo.Repr"}.BeginMap(0)
}
func (na *_MinerV0SectorOnChainInfo__ReprAssembler) BeginList(int) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_MinerV0SectorOnChainInfo{}
	}
	return na, nil
}
func (na *_MinerV0SectorOnChainInfo__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"types.MinerV0SectorOnChainInfo.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_MinerV0SectorOnChainInfo__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"types.MinerV0SectorOnChainInfo.Repr"}.AssignBool(false)
}
func (_MinerV0SectorOnChainInfo__ReprAssembler) AssignInt(int) error {
	return mixins.ListAssembler{"types.MinerV0SectorOnChainInfo.Repr"}.AssignInt(0)
}
func (_MinerV0SectorOnChainInfo__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"types.MinerV0SectorOnChainInfo.Repr"}.AssignFloat(0)
}
func (_MinerV0SectorOnChainInfo__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"types.MinerV0SectorOnChainInfo.Repr"}.AssignString("")
}
func (_MinerV0SectorOnChainInfo__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"types.MinerV0SectorOnChainInfo.Repr"}.AssignBytes(nil)
}
func (_MinerV0SectorOnChainInfo__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"types.MinerV0SectorOnChainInfo.Repr"}.AssignLink(nil)
}
func (na *_MinerV0SectorOnChainInfo__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_MinerV0SectorOnChainInfo); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_List {
		return ipld.ErrWrongKind{TypeName: "types.MinerV0SectorOnChainInfo.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustList, ActualKind: v.ReprKind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_MinerV0SectorOnChainInfo__ReprAssembler) Prototype() ipld.NodePrototype {
	return _MinerV0SectorOnChainInfo__ReprPrototype{}
}
func (la *_MinerV0SectorOnChainInfo__ReprAssembler) valueFinishTidy() bool {
	switch la.f {
	case 0:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 1:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 2:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 3:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 4:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 5:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 6:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 7:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 8:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 9:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 10:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (la *_MinerV0SectorOnChainInfo__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	if la.f >= 11 {
		return _ErrorThunkAssembler{schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(11)}}
	}
	la.state = laState_midValue
	switch la.f {
	case 0:
		la.ca_SectorNumber.w = &la.w.SectorNumber
		la.ca_SectorNumber.m = &la.cm
		return &la.ca_SectorNumber
	case 1:
		la.ca_SealProof.w = &la.w.SealProof
		la.ca_SealProof.m = &la.cm
		return &la.ca_SealProof
	case 2:
		la.ca_SealedCID.w = &la.w.SealedCID
		la.ca_SealedCID.m = &la.cm
		return &la.ca_SealedCID
	case 3:
		la.ca_DealIDs.w = &la.w.DealIDs
		la.ca_DealIDs.m = &la.cm
		return &la.ca_DealIDs
	case 4:
		la.ca_Activation.w = &la.w.Activation
		la.ca_Activation.m = &la.cm
		return &la.ca_Activation
	case 5:
		la.ca_Expiration.w = &la.w.Expiration
		la.ca_Expiration.m = &la.cm
		return &la.ca_Expiration
	case 6:
		la.ca_DealWeight.w = &la.w.DealWeight
		la.ca_DealWeight.m = &la.cm
		return &la.ca_DealWeight
	case 7:
		la.ca_VerifiedDealWeight.w = &la.w.VerifiedDealWeight
		la.ca_VerifiedDealWeight.m = &la.cm
		return &la.ca_VerifiedDealWeight
	case 8:
		la.ca_InitialPledge.w = &la.w.InitialPledge
		la.ca_InitialPledge.m = &la.cm
		return &la.ca_InitialPledge
	case 9:
		la.ca_ExpectedDayReward.w = &la.w.ExpectedDayReward
		la.ca_ExpectedDayReward.m = &la.cm
		return &la.ca_ExpectedDayReward
	case 10:
		la.ca_ExpectedStorageReward.w = &la.w.ExpectedStorageReward
		la.ca_ExpectedStorageReward.m = &la.cm
		return &la.ca_ExpectedStorageReward
	default:
		panic("unreachable")
	}
}
func (la *_MinerV0SectorOnChainInfo__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_MinerV0SectorOnChainInfo__ReprAssembler) ValuePrototype(_ int) ipld.NodePrototype {
	panic("todo structbuilder tuplerepr valueprototype")
}
