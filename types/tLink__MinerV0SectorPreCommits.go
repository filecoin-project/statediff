package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _Link__MinerV0SectorPreCommits struct{ x ipld.Link }
type Link__MinerV0SectorPreCommits = *_Link__MinerV0SectorPreCommits
func (n Link__MinerV0SectorPreCommits) Link() ipld.Link {
	return n.x
}
func (_Link__MinerV0SectorPreCommits__Prototype) FromLink(v ipld.Link) (Link__MinerV0SectorPreCommits, error) {
	n := _Link__MinerV0SectorPreCommits{v}
	return &n, nil
}
type _Link__MinerV0SectorPreCommits__Maybe struct {
	m schema.Maybe
	v Link__MinerV0SectorPreCommits
}
type MaybeLink__MinerV0SectorPreCommits = *_Link__MinerV0SectorPreCommits__Maybe

func (m MaybeLink__MinerV0SectorPreCommits) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeLink__MinerV0SectorPreCommits) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeLink__MinerV0SectorPreCommits) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeLink__MinerV0SectorPreCommits) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeLink__MinerV0SectorPreCommits) Must() Link__MinerV0SectorPreCommits {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (Link__MinerV0SectorPreCommits)(&_Link__MinerV0SectorPreCommits{})
var _ schema.TypedNode = (Link__MinerV0SectorPreCommits)(&_Link__MinerV0SectorPreCommits{})
func (Link__MinerV0SectorPreCommits) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Link
}
func (Link__MinerV0SectorPreCommits) LookupByString(string) (ipld.Node, error) {
	return mixins.Link{"types.Link__MinerV0SectorPreCommits"}.LookupByString("")
}
func (Link__MinerV0SectorPreCommits) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Link{"types.Link__MinerV0SectorPreCommits"}.LookupByNode(nil)
}
func (Link__MinerV0SectorPreCommits) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Link{"types.Link__MinerV0SectorPreCommits"}.LookupByIndex(0)
}
func (Link__MinerV0SectorPreCommits) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Link{"types.Link__MinerV0SectorPreCommits"}.LookupBySegment(seg)
}
func (Link__MinerV0SectorPreCommits) MapIterator() ipld.MapIterator {
	return nil
}
func (Link__MinerV0SectorPreCommits) ListIterator() ipld.ListIterator {
	return nil
}
func (Link__MinerV0SectorPreCommits) Length() int {
	return -1
}
func (Link__MinerV0SectorPreCommits) IsAbsent() bool {
	return false
}
func (Link__MinerV0SectorPreCommits) IsNull() bool {
	return false
}
func (Link__MinerV0SectorPreCommits) AsBool() (bool, error) {
	return mixins.Link{"types.Link__MinerV0SectorPreCommits"}.AsBool()
}
func (Link__MinerV0SectorPreCommits) AsInt() (int, error) {
	return mixins.Link{"types.Link__MinerV0SectorPreCommits"}.AsInt()
}
func (Link__MinerV0SectorPreCommits) AsFloat() (float64, error) {
	return mixins.Link{"types.Link__MinerV0SectorPreCommits"}.AsFloat()
}
func (Link__MinerV0SectorPreCommits) AsString() (string, error) {
	return mixins.Link{"types.Link__MinerV0SectorPreCommits"}.AsString()
}
func (Link__MinerV0SectorPreCommits) AsBytes() ([]byte, error) {
	return mixins.Link{"types.Link__MinerV0SectorPreCommits"}.AsBytes()
}
func (n Link__MinerV0SectorPreCommits) AsLink() (ipld.Link, error) {
	return n.x, nil
}
func (Link__MinerV0SectorPreCommits) Prototype() ipld.NodePrototype {
	return _Link__MinerV0SectorPreCommits__Prototype{}
}
type _Link__MinerV0SectorPreCommits__Prototype struct{}

func (_Link__MinerV0SectorPreCommits__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Link__MinerV0SectorPreCommits__Builder
	nb.Reset()
	return &nb
}
type _Link__MinerV0SectorPreCommits__Builder struct {
	_Link__MinerV0SectorPreCommits__Assembler
}
func (nb *_Link__MinerV0SectorPreCommits__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Link__MinerV0SectorPreCommits__Builder) Reset() {
	var w _Link__MinerV0SectorPreCommits
	var m schema.Maybe
	*nb = _Link__MinerV0SectorPreCommits__Builder{_Link__MinerV0SectorPreCommits__Assembler{w: &w, m: &m}}
}
type _Link__MinerV0SectorPreCommits__Assembler struct {
	w *_Link__MinerV0SectorPreCommits
	m *schema.Maybe
}

func (na *_Link__MinerV0SectorPreCommits__Assembler) reset() {}
func (_Link__MinerV0SectorPreCommits__Assembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.LinkAssembler{"types.Link__MinerV0SectorPreCommits"}.BeginMap(0)
}
func (_Link__MinerV0SectorPreCommits__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.LinkAssembler{"types.Link__MinerV0SectorPreCommits"}.BeginList(0)
}
func (na *_Link__MinerV0SectorPreCommits__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.LinkAssembler{"types.Link__MinerV0SectorPreCommits"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Link__MinerV0SectorPreCommits__Assembler) AssignBool(bool) error {
	return mixins.LinkAssembler{"types.Link__MinerV0SectorPreCommits"}.AssignBool(false)
}
func (_Link__MinerV0SectorPreCommits__Assembler) AssignInt(int) error {
	return mixins.LinkAssembler{"types.Link__MinerV0SectorPreCommits"}.AssignInt(0)
}
func (_Link__MinerV0SectorPreCommits__Assembler) AssignFloat(float64) error {
	return mixins.LinkAssembler{"types.Link__MinerV0SectorPreCommits"}.AssignFloat(0)
}
func (_Link__MinerV0SectorPreCommits__Assembler) AssignString(string) error {
	return mixins.LinkAssembler{"types.Link__MinerV0SectorPreCommits"}.AssignString("")
}
func (_Link__MinerV0SectorPreCommits__Assembler) AssignBytes([]byte) error {
	return mixins.LinkAssembler{"types.Link__MinerV0SectorPreCommits"}.AssignBytes(nil)
}
func (na *_Link__MinerV0SectorPreCommits__Assembler) AssignLink(v ipld.Link) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_Link__MinerV0SectorPreCommits{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (na *_Link__MinerV0SectorPreCommits__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Link__MinerV0SectorPreCommits); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsLink(); err != nil {
		return err
	} else {
		return na.AssignLink(v2)
	}
}
func (_Link__MinerV0SectorPreCommits__Assembler) Prototype() ipld.NodePrototype {
	return _Link__MinerV0SectorPreCommits__Prototype{}
}
func (Link__MinerV0SectorPreCommits) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (Link__MinerV0SectorPreCommits) LinkTargetNodePrototype() ipld.NodePrototype {
	return Type.Link__MinerV0SectorPreCommits__Repr
}
func (n Link__MinerV0SectorPreCommits) Representation() ipld.Node {
	return (*_Link__MinerV0SectorPreCommits__Repr)(n)
}
type _Link__MinerV0SectorPreCommits__Repr = _Link__MinerV0SectorPreCommits
var _ ipld.Node = &_Link__MinerV0SectorPreCommits__Repr{}
type _Link__MinerV0SectorPreCommits__ReprPrototype = _Link__MinerV0SectorPreCommits__Prototype
type _Link__MinerV0SectorPreCommits__ReprAssembler = _Link__MinerV0SectorPreCommits__Assembler
