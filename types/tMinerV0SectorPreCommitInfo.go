package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _MinerV0SectorPreCommitInfo struct {
	SealProof _Int
	SectorNumber _SectorNumber
	SealedCID _Link
	SealRandEpoch _ChainEpoch
	DealIDs _List__DealID__Maybe
	Expiration _ChainEpoch
	ReplaceCapacity _Bool
	ReplaceSectorDeadline _Int
	ReplaceSectorPartition _Int
	ReplaceSectorNumber _SectorNumber
}
type MinerV0SectorPreCommitInfo = *_MinerV0SectorPreCommitInfo

func (n _MinerV0SectorPreCommitInfo) FieldSealProof()	Int {
	return &n.SealProof
}
func (n _MinerV0SectorPreCommitInfo) FieldSectorNumber()	SectorNumber {
	return &n.SectorNumber
}
func (n _MinerV0SectorPreCommitInfo) FieldSealedCID()	Link {
	return &n.SealedCID
}
func (n _MinerV0SectorPreCommitInfo) FieldSealRandEpoch()	ChainEpoch {
	return &n.SealRandEpoch
}
func (n _MinerV0SectorPreCommitInfo) FieldDealIDs()	MaybeList__DealID {
	return &n.DealIDs
}
func (n _MinerV0SectorPreCommitInfo) FieldExpiration()	ChainEpoch {
	return &n.Expiration
}
func (n _MinerV0SectorPreCommitInfo) FieldReplaceCapacity()	Bool {
	return &n.ReplaceCapacity
}
func (n _MinerV0SectorPreCommitInfo) FieldReplaceSectorDeadline()	Int {
	return &n.ReplaceSectorDeadline
}
func (n _MinerV0SectorPreCommitInfo) FieldReplaceSectorPartition()	Int {
	return &n.ReplaceSectorPartition
}
func (n _MinerV0SectorPreCommitInfo) FieldReplaceSectorNumber()	SectorNumber {
	return &n.ReplaceSectorNumber
}
type _MinerV0SectorPreCommitInfo__Maybe struct {
	m schema.Maybe
	v MinerV0SectorPreCommitInfo
}
type MaybeMinerV0SectorPreCommitInfo = *_MinerV0SectorPreCommitInfo__Maybe

func (m MaybeMinerV0SectorPreCommitInfo) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeMinerV0SectorPreCommitInfo) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeMinerV0SectorPreCommitInfo) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeMinerV0SectorPreCommitInfo) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeMinerV0SectorPreCommitInfo) Must() MinerV0SectorPreCommitInfo {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__MinerV0SectorPreCommitInfo_SealProof = _String{"SealProof"}
	fieldName__MinerV0SectorPreCommitInfo_SectorNumber = _String{"SectorNumber"}
	fieldName__MinerV0SectorPreCommitInfo_SealedCID = _String{"SealedCID"}
	fieldName__MinerV0SectorPreCommitInfo_SealRandEpoch = _String{"SealRandEpoch"}
	fieldName__MinerV0SectorPreCommitInfo_DealIDs = _String{"DealIDs"}
	fieldName__MinerV0SectorPreCommitInfo_Expiration = _String{"Expiration"}
	fieldName__MinerV0SectorPreCommitInfo_ReplaceCapacity = _String{"ReplaceCapacity"}
	fieldName__MinerV0SectorPreCommitInfo_ReplaceSectorDeadline = _String{"ReplaceSectorDeadline"}
	fieldName__MinerV0SectorPreCommitInfo_ReplaceSectorPartition = _String{"ReplaceSectorPartition"}
	fieldName__MinerV0SectorPreCommitInfo_ReplaceSectorNumber = _String{"ReplaceSectorNumber"}
)
var _ ipld.Node = (MinerV0SectorPreCommitInfo)(&_MinerV0SectorPreCommitInfo{})
var _ schema.TypedNode = (MinerV0SectorPreCommitInfo)(&_MinerV0SectorPreCommitInfo{})
func (MinerV0SectorPreCommitInfo) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n MinerV0SectorPreCommitInfo) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "SealProof":
		return &n.SealProof, nil
	case "SectorNumber":
		return &n.SectorNumber, nil
	case "SealedCID":
		return &n.SealedCID, nil
	case "SealRandEpoch":
		return &n.SealRandEpoch, nil
	case "DealIDs":
		if n.DealIDs.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.DealIDs.v, nil
	case "Expiration":
		return &n.Expiration, nil
	case "ReplaceCapacity":
		return &n.ReplaceCapacity, nil
	case "ReplaceSectorDeadline":
		return &n.ReplaceSectorDeadline, nil
	case "ReplaceSectorPartition":
		return &n.ReplaceSectorPartition, nil
	case "ReplaceSectorNumber":
		return &n.ReplaceSectorNumber, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n MinerV0SectorPreCommitInfo) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (MinerV0SectorPreCommitInfo) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"types.MinerV0SectorPreCommitInfo"}.LookupByIndex(0)
}
func (n MinerV0SectorPreCommitInfo) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n MinerV0SectorPreCommitInfo) MapIterator() ipld.MapIterator {
	return &_MinerV0SectorPreCommitInfo__MapItr{n, 0}
}

type _MinerV0SectorPreCommitInfo__MapItr struct {
	n MinerV0SectorPreCommitInfo
	idx  int
}

func (itr *_MinerV0SectorPreCommitInfo__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 10 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__MinerV0SectorPreCommitInfo_SealProof
		v = &itr.n.SealProof
	case 1:
		k = &fieldName__MinerV0SectorPreCommitInfo_SectorNumber
		v = &itr.n.SectorNumber
	case 2:
		k = &fieldName__MinerV0SectorPreCommitInfo_SealedCID
		v = &itr.n.SealedCID
	case 3:
		k = &fieldName__MinerV0SectorPreCommitInfo_SealRandEpoch
		v = &itr.n.SealRandEpoch
	case 4:
		k = &fieldName__MinerV0SectorPreCommitInfo_DealIDs
		if itr.n.DealIDs.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.DealIDs.v
	case 5:
		k = &fieldName__MinerV0SectorPreCommitInfo_Expiration
		v = &itr.n.Expiration
	case 6:
		k = &fieldName__MinerV0SectorPreCommitInfo_ReplaceCapacity
		v = &itr.n.ReplaceCapacity
	case 7:
		k = &fieldName__MinerV0SectorPreCommitInfo_ReplaceSectorDeadline
		v = &itr.n.ReplaceSectorDeadline
	case 8:
		k = &fieldName__MinerV0SectorPreCommitInfo_ReplaceSectorPartition
		v = &itr.n.ReplaceSectorPartition
	case 9:
		k = &fieldName__MinerV0SectorPreCommitInfo_ReplaceSectorNumber
		v = &itr.n.ReplaceSectorNumber
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_MinerV0SectorPreCommitInfo__MapItr) Done() bool {
	return itr.idx >= 10
}

func (MinerV0SectorPreCommitInfo) ListIterator() ipld.ListIterator {
	return nil
}
func (MinerV0SectorPreCommitInfo) Length() int {
	return 10
}
func (MinerV0SectorPreCommitInfo) IsAbsent() bool {
	return false
}
func (MinerV0SectorPreCommitInfo) IsNull() bool {
	return false
}
func (MinerV0SectorPreCommitInfo) AsBool() (bool, error) {
	return mixins.Map{"types.MinerV0SectorPreCommitInfo"}.AsBool()
}
func (MinerV0SectorPreCommitInfo) AsInt() (int, error) {
	return mixins.Map{"types.MinerV0SectorPreCommitInfo"}.AsInt()
}
func (MinerV0SectorPreCommitInfo) AsFloat() (float64, error) {
	return mixins.Map{"types.MinerV0SectorPreCommitInfo"}.AsFloat()
}
func (MinerV0SectorPreCommitInfo) AsString() (string, error) {
	return mixins.Map{"types.MinerV0SectorPreCommitInfo"}.AsString()
}
func (MinerV0SectorPreCommitInfo) AsBytes() ([]byte, error) {
	return mixins.Map{"types.MinerV0SectorPreCommitInfo"}.AsBytes()
}
func (MinerV0SectorPreCommitInfo) AsLink() (ipld.Link, error) {
	return mixins.Map{"types.MinerV0SectorPreCommitInfo"}.AsLink()
}
func (MinerV0SectorPreCommitInfo) Prototype() ipld.NodePrototype {
	return _MinerV0SectorPreCommitInfo__Prototype{}
}
type _MinerV0SectorPreCommitInfo__Prototype struct{}

func (_MinerV0SectorPreCommitInfo__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _MinerV0SectorPreCommitInfo__Builder
	nb.Reset()
	return &nb
}
type _MinerV0SectorPreCommitInfo__Builder struct {
	_MinerV0SectorPreCommitInfo__Assembler
}
func (nb *_MinerV0SectorPreCommitInfo__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_MinerV0SectorPreCommitInfo__Builder) Reset() {
	var w _MinerV0SectorPreCommitInfo
	var m schema.Maybe
	*nb = _MinerV0SectorPreCommitInfo__Builder{_MinerV0SectorPreCommitInfo__Assembler{w: &w, m: &m}}
}
type _MinerV0SectorPreCommitInfo__Assembler struct {
	w *_MinerV0SectorPreCommitInfo
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_SealProof _Int__Assembler
	ca_SectorNumber _SectorNumber__Assembler
	ca_SealedCID _Link__Assembler
	ca_SealRandEpoch _ChainEpoch__Assembler
	ca_DealIDs _List__DealID__Assembler
	ca_Expiration _ChainEpoch__Assembler
	ca_ReplaceCapacity _Bool__Assembler
	ca_ReplaceSectorDeadline _Int__Assembler
	ca_ReplaceSectorPartition _Int__Assembler
	ca_ReplaceSectorNumber _SectorNumber__Assembler
	}

func (na *_MinerV0SectorPreCommitInfo__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_SealProof.reset()
	na.ca_SectorNumber.reset()
	na.ca_SealedCID.reset()
	na.ca_SealRandEpoch.reset()
	na.ca_DealIDs.reset()
	na.ca_Expiration.reset()
	na.ca_ReplaceCapacity.reset()
	na.ca_ReplaceSectorDeadline.reset()
	na.ca_ReplaceSectorPartition.reset()
	na.ca_ReplaceSectorNumber.reset()
}

var (
	fieldBit__MinerV0SectorPreCommitInfo_SealProof = 1 << 0
	fieldBit__MinerV0SectorPreCommitInfo_SectorNumber = 1 << 1
	fieldBit__MinerV0SectorPreCommitInfo_SealedCID = 1 << 2
	fieldBit__MinerV0SectorPreCommitInfo_SealRandEpoch = 1 << 3
	fieldBit__MinerV0SectorPreCommitInfo_DealIDs = 1 << 4
	fieldBit__MinerV0SectorPreCommitInfo_Expiration = 1 << 5
	fieldBit__MinerV0SectorPreCommitInfo_ReplaceCapacity = 1 << 6
	fieldBit__MinerV0SectorPreCommitInfo_ReplaceSectorDeadline = 1 << 7
	fieldBit__MinerV0SectorPreCommitInfo_ReplaceSectorPartition = 1 << 8
	fieldBit__MinerV0SectorPreCommitInfo_ReplaceSectorNumber = 1 << 9
	fieldBits__MinerV0SectorPreCommitInfo_sufficient = 0 + 1 << 0 + 1 << 1 + 1 << 2 + 1 << 3 + 1 << 4 + 1 << 5 + 1 << 6 + 1 << 7 + 1 << 8 + 1 << 9
)
func (na *_MinerV0SectorPreCommitInfo__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_MinerV0SectorPreCommitInfo{}
	}
	return na, nil
}
func (_MinerV0SectorPreCommitInfo__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"types.MinerV0SectorPreCommitInfo"}.BeginList(0)
}
func (na *_MinerV0SectorPreCommitInfo__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"types.MinerV0SectorPreCommitInfo"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_MinerV0SectorPreCommitInfo__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"types.MinerV0SectorPreCommitInfo"}.AssignBool(false)
}
func (_MinerV0SectorPreCommitInfo__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"types.MinerV0SectorPreCommitInfo"}.AssignInt(0)
}
func (_MinerV0SectorPreCommitInfo__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"types.MinerV0SectorPreCommitInfo"}.AssignFloat(0)
}
func (_MinerV0SectorPreCommitInfo__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"types.MinerV0SectorPreCommitInfo"}.AssignString("")
}
func (_MinerV0SectorPreCommitInfo__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"types.MinerV0SectorPreCommitInfo"}.AssignBytes(nil)
}
func (_MinerV0SectorPreCommitInfo__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"types.MinerV0SectorPreCommitInfo"}.AssignLink(nil)
}
func (na *_MinerV0SectorPreCommitInfo__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_MinerV0SectorPreCommitInfo); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "types.MinerV0SectorPreCommitInfo", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_MinerV0SectorPreCommitInfo__Assembler) Prototype() ipld.NodePrototype {
	return _MinerV0SectorPreCommitInfo__Prototype{}
}
func (ma *_MinerV0SectorPreCommitInfo__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_SealProof.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_SectorNumber.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_SealedCID.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_SealRandEpoch.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 4:
		switch ma.w.DealIDs.m {
		case schema.Maybe_Null:
			ma.state = maState_initial
			return true
		case schema.Maybe_Value:
			ma.w.DealIDs.v = ma.ca_DealIDs.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 5:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Expiration.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 6:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ReplaceCapacity.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 7:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ReplaceSectorDeadline.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 8:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ReplaceSectorPartition.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 9:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ReplaceSectorNumber.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_MinerV0SectorPreCommitInfo__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "SealProof":
		if ma.s & fieldBit__MinerV0SectorPreCommitInfo_SealProof != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorPreCommitInfo_SealProof}
		}
		ma.s += fieldBit__MinerV0SectorPreCommitInfo_SealProof
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_SealProof.w = &ma.w.SealProof
		ma.ca_SealProof.m = &ma.cm
		return &ma.ca_SealProof, nil
	case "SectorNumber":
		if ma.s & fieldBit__MinerV0SectorPreCommitInfo_SectorNumber != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorPreCommitInfo_SectorNumber}
		}
		ma.s += fieldBit__MinerV0SectorPreCommitInfo_SectorNumber
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_SectorNumber.w = &ma.w.SectorNumber
		ma.ca_SectorNumber.m = &ma.cm
		return &ma.ca_SectorNumber, nil
	case "SealedCID":
		if ma.s & fieldBit__MinerV0SectorPreCommitInfo_SealedCID != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorPreCommitInfo_SealedCID}
		}
		ma.s += fieldBit__MinerV0SectorPreCommitInfo_SealedCID
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_SealedCID.w = &ma.w.SealedCID
		ma.ca_SealedCID.m = &ma.cm
		return &ma.ca_SealedCID, nil
	case "SealRandEpoch":
		if ma.s & fieldBit__MinerV0SectorPreCommitInfo_SealRandEpoch != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorPreCommitInfo_SealRandEpoch}
		}
		ma.s += fieldBit__MinerV0SectorPreCommitInfo_SealRandEpoch
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_SealRandEpoch.w = &ma.w.SealRandEpoch
		ma.ca_SealRandEpoch.m = &ma.cm
		return &ma.ca_SealRandEpoch, nil
	case "DealIDs":
		if ma.s & fieldBit__MinerV0SectorPreCommitInfo_DealIDs != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorPreCommitInfo_DealIDs}
		}
		ma.s += fieldBit__MinerV0SectorPreCommitInfo_DealIDs
		ma.state = maState_midValue
		ma.f = 4
		ma.ca_DealIDs.w = ma.w.DealIDs.v
		ma.ca_DealIDs.m = &ma.w.DealIDs.m
		ma.w.DealIDs.m = allowNull
		return &ma.ca_DealIDs, nil
	case "Expiration":
		if ma.s & fieldBit__MinerV0SectorPreCommitInfo_Expiration != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorPreCommitInfo_Expiration}
		}
		ma.s += fieldBit__MinerV0SectorPreCommitInfo_Expiration
		ma.state = maState_midValue
		ma.f = 5
		ma.ca_Expiration.w = &ma.w.Expiration
		ma.ca_Expiration.m = &ma.cm
		return &ma.ca_Expiration, nil
	case "ReplaceCapacity":
		if ma.s & fieldBit__MinerV0SectorPreCommitInfo_ReplaceCapacity != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorPreCommitInfo_ReplaceCapacity}
		}
		ma.s += fieldBit__MinerV0SectorPreCommitInfo_ReplaceCapacity
		ma.state = maState_midValue
		ma.f = 6
		ma.ca_ReplaceCapacity.w = &ma.w.ReplaceCapacity
		ma.ca_ReplaceCapacity.m = &ma.cm
		return &ma.ca_ReplaceCapacity, nil
	case "ReplaceSectorDeadline":
		if ma.s & fieldBit__MinerV0SectorPreCommitInfo_ReplaceSectorDeadline != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorPreCommitInfo_ReplaceSectorDeadline}
		}
		ma.s += fieldBit__MinerV0SectorPreCommitInfo_ReplaceSectorDeadline
		ma.state = maState_midValue
		ma.f = 7
		ma.ca_ReplaceSectorDeadline.w = &ma.w.ReplaceSectorDeadline
		ma.ca_ReplaceSectorDeadline.m = &ma.cm
		return &ma.ca_ReplaceSectorDeadline, nil
	case "ReplaceSectorPartition":
		if ma.s & fieldBit__MinerV0SectorPreCommitInfo_ReplaceSectorPartition != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorPreCommitInfo_ReplaceSectorPartition}
		}
		ma.s += fieldBit__MinerV0SectorPreCommitInfo_ReplaceSectorPartition
		ma.state = maState_midValue
		ma.f = 8
		ma.ca_ReplaceSectorPartition.w = &ma.w.ReplaceSectorPartition
		ma.ca_ReplaceSectorPartition.m = &ma.cm
		return &ma.ca_ReplaceSectorPartition, nil
	case "ReplaceSectorNumber":
		if ma.s & fieldBit__MinerV0SectorPreCommitInfo_ReplaceSectorNumber != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorPreCommitInfo_ReplaceSectorNumber}
		}
		ma.s += fieldBit__MinerV0SectorPreCommitInfo_ReplaceSectorNumber
		ma.state = maState_midValue
		ma.f = 9
		ma.ca_ReplaceSectorNumber.w = &ma.w.ReplaceSectorNumber
		ma.ca_ReplaceSectorNumber.m = &ma.cm
		return &ma.ca_ReplaceSectorNumber, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"types.MinerV0SectorPreCommitInfo", Key:&_String{k}}
	}
}
func (ma *_MinerV0SectorPreCommitInfo__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_MinerV0SectorPreCommitInfo__KeyAssembler)(ma)
}
func (ma *_MinerV0SectorPreCommitInfo__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_SealProof.w = &ma.w.SealProof
		ma.ca_SealProof.m = &ma.cm
		return &ma.ca_SealProof
	case 1:
		ma.ca_SectorNumber.w = &ma.w.SectorNumber
		ma.ca_SectorNumber.m = &ma.cm
		return &ma.ca_SectorNumber
	case 2:
		ma.ca_SealedCID.w = &ma.w.SealedCID
		ma.ca_SealedCID.m = &ma.cm
		return &ma.ca_SealedCID
	case 3:
		ma.ca_SealRandEpoch.w = &ma.w.SealRandEpoch
		ma.ca_SealRandEpoch.m = &ma.cm
		return &ma.ca_SealRandEpoch
	case 4:
		ma.ca_DealIDs.w = ma.w.DealIDs.v
		ma.ca_DealIDs.m = &ma.w.DealIDs.m
		ma.w.DealIDs.m = allowNull
		return &ma.ca_DealIDs
	case 5:
		ma.ca_Expiration.w = &ma.w.Expiration
		ma.ca_Expiration.m = &ma.cm
		return &ma.ca_Expiration
	case 6:
		ma.ca_ReplaceCapacity.w = &ma.w.ReplaceCapacity
		ma.ca_ReplaceCapacity.m = &ma.cm
		return &ma.ca_ReplaceCapacity
	case 7:
		ma.ca_ReplaceSectorDeadline.w = &ma.w.ReplaceSectorDeadline
		ma.ca_ReplaceSectorDeadline.m = &ma.cm
		return &ma.ca_ReplaceSectorDeadline
	case 8:
		ma.ca_ReplaceSectorPartition.w = &ma.w.ReplaceSectorPartition
		ma.ca_ReplaceSectorPartition.m = &ma.cm
		return &ma.ca_ReplaceSectorPartition
	case 9:
		ma.ca_ReplaceSectorNumber.w = &ma.w.ReplaceSectorNumber
		ma.ca_ReplaceSectorNumber.m = &ma.cm
		return &ma.ca_ReplaceSectorNumber
	default:
		panic("unreachable")
	}
}
func (ma *_MinerV0SectorPreCommitInfo__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_MinerV0SectorPreCommitInfo__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_MinerV0SectorPreCommitInfo__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _MinerV0SectorPreCommitInfo__KeyAssembler _MinerV0SectorPreCommitInfo__Assembler
func (_MinerV0SectorPreCommitInfo__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"types.MinerV0SectorPreCommitInfo.KeyAssembler"}.BeginMap(0)
}
func (_MinerV0SectorPreCommitInfo__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"types.MinerV0SectorPreCommitInfo.KeyAssembler"}.BeginList(0)
}
func (na *_MinerV0SectorPreCommitInfo__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"types.MinerV0SectorPreCommitInfo.KeyAssembler"}.AssignNull()
}
func (_MinerV0SectorPreCommitInfo__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"types.MinerV0SectorPreCommitInfo.KeyAssembler"}.AssignBool(false)
}
func (_MinerV0SectorPreCommitInfo__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"types.MinerV0SectorPreCommitInfo.KeyAssembler"}.AssignInt(0)
}
func (_MinerV0SectorPreCommitInfo__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"types.MinerV0SectorPreCommitInfo.KeyAssembler"}.AssignFloat(0)
}
func (ka *_MinerV0SectorPreCommitInfo__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "SealProof":
		if ka.s & fieldBit__MinerV0SectorPreCommitInfo_SealProof != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorPreCommitInfo_SealProof}
		}
		ka.s += fieldBit__MinerV0SectorPreCommitInfo_SealProof
		ka.state = maState_expectValue
		ka.f = 0
	case "SectorNumber":
		if ka.s & fieldBit__MinerV0SectorPreCommitInfo_SectorNumber != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorPreCommitInfo_SectorNumber}
		}
		ka.s += fieldBit__MinerV0SectorPreCommitInfo_SectorNumber
		ka.state = maState_expectValue
		ka.f = 1
	case "SealedCID":
		if ka.s & fieldBit__MinerV0SectorPreCommitInfo_SealedCID != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorPreCommitInfo_SealedCID}
		}
		ka.s += fieldBit__MinerV0SectorPreCommitInfo_SealedCID
		ka.state = maState_expectValue
		ka.f = 2
	case "SealRandEpoch":
		if ka.s & fieldBit__MinerV0SectorPreCommitInfo_SealRandEpoch != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorPreCommitInfo_SealRandEpoch}
		}
		ka.s += fieldBit__MinerV0SectorPreCommitInfo_SealRandEpoch
		ka.state = maState_expectValue
		ka.f = 3
	case "DealIDs":
		if ka.s & fieldBit__MinerV0SectorPreCommitInfo_DealIDs != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorPreCommitInfo_DealIDs}
		}
		ka.s += fieldBit__MinerV0SectorPreCommitInfo_DealIDs
		ka.state = maState_expectValue
		ka.f = 4
	case "Expiration":
		if ka.s & fieldBit__MinerV0SectorPreCommitInfo_Expiration != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorPreCommitInfo_Expiration}
		}
		ka.s += fieldBit__MinerV0SectorPreCommitInfo_Expiration
		ka.state = maState_expectValue
		ka.f = 5
	case "ReplaceCapacity":
		if ka.s & fieldBit__MinerV0SectorPreCommitInfo_ReplaceCapacity != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorPreCommitInfo_ReplaceCapacity}
		}
		ka.s += fieldBit__MinerV0SectorPreCommitInfo_ReplaceCapacity
		ka.state = maState_expectValue
		ka.f = 6
	case "ReplaceSectorDeadline":
		if ka.s & fieldBit__MinerV0SectorPreCommitInfo_ReplaceSectorDeadline != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorPreCommitInfo_ReplaceSectorDeadline}
		}
		ka.s += fieldBit__MinerV0SectorPreCommitInfo_ReplaceSectorDeadline
		ka.state = maState_expectValue
		ka.f = 7
	case "ReplaceSectorPartition":
		if ka.s & fieldBit__MinerV0SectorPreCommitInfo_ReplaceSectorPartition != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorPreCommitInfo_ReplaceSectorPartition}
		}
		ka.s += fieldBit__MinerV0SectorPreCommitInfo_ReplaceSectorPartition
		ka.state = maState_expectValue
		ka.f = 8
	case "ReplaceSectorNumber":
		if ka.s & fieldBit__MinerV0SectorPreCommitInfo_ReplaceSectorNumber != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0SectorPreCommitInfo_ReplaceSectorNumber}
		}
		ka.s += fieldBit__MinerV0SectorPreCommitInfo_ReplaceSectorNumber
		ka.state = maState_expectValue
		ka.f = 9
	default:
		return ipld.ErrInvalidKey{TypeName:"types.MinerV0SectorPreCommitInfo", Key:&_String{k}}
	}
	return nil
}
func (_MinerV0SectorPreCommitInfo__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"types.MinerV0SectorPreCommitInfo.KeyAssembler"}.AssignBytes(nil)
}
func (_MinerV0SectorPreCommitInfo__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"types.MinerV0SectorPreCommitInfo.KeyAssembler"}.AssignLink(nil)
}
func (ka *_MinerV0SectorPreCommitInfo__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_MinerV0SectorPreCommitInfo__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (MinerV0SectorPreCommitInfo) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n MinerV0SectorPreCommitInfo) Representation() ipld.Node {
	return (*_MinerV0SectorPreCommitInfo__Repr)(n)
}
type _MinerV0SectorPreCommitInfo__Repr _MinerV0SectorPreCommitInfo
var _ ipld.Node = &_MinerV0SectorPreCommitInfo__Repr{}
func (_MinerV0SectorPreCommitInfo__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_List
}
func (_MinerV0SectorPreCommitInfo__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"types.MinerV0SectorPreCommitInfo.Repr"}.LookupByString("")
}
func (n *_MinerV0SectorPreCommitInfo__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ki, err := key.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(ki)
}
func (n *_MinerV0SectorPreCommitInfo__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	switch idx {
	case 0:
		return n.SealProof.Representation(), nil
	case 1:
		return n.SectorNumber.Representation(), nil
	case 2:
		return n.SealedCID.Representation(), nil
	case 3:
		return n.SealRandEpoch.Representation(), nil
	case 4:
		if n.DealIDs.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.DealIDs.v.Representation(), nil
	case 5:
		return n.Expiration.Representation(), nil
	case 6:
		return n.ReplaceCapacity.Representation(), nil
	case 7:
		return n.ReplaceSectorDeadline.Representation(), nil
	case 8:
		return n.ReplaceSectorPartition.Representation(), nil
	case 9:
		return n.ReplaceSectorNumber.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(idx)}
	}
}
func (n _MinerV0SectorPreCommitInfo__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "types.MinerV0SectorPreCommitInfo.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_MinerV0SectorPreCommitInfo__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (n *_MinerV0SectorPreCommitInfo__Repr) ListIterator() ipld.ListIterator {
	return &_MinerV0SectorPreCommitInfo__ReprListItr{n, 0}
}

type _MinerV0SectorPreCommitInfo__ReprListItr struct {
	n   *_MinerV0SectorPreCommitInfo__Repr
	idx int
	
}

func (itr *_MinerV0SectorPreCommitInfo__ReprListItr) Next() (idx int, v ipld.Node, err error) {
	if itr.idx >= 10 {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		idx = itr.idx
		v = itr.n.SealProof.Representation()
	case 1:
		idx = itr.idx
		v = itr.n.SectorNumber.Representation()
	case 2:
		idx = itr.idx
		v = itr.n.SealedCID.Representation()
	case 3:
		idx = itr.idx
		v = itr.n.SealRandEpoch.Representation()
	case 4:
		idx = itr.idx
		if itr.n.DealIDs.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.DealIDs.v.Representation()
	case 5:
		idx = itr.idx
		v = itr.n.Expiration.Representation()
	case 6:
		idx = itr.idx
		v = itr.n.ReplaceCapacity.Representation()
	case 7:
		idx = itr.idx
		v = itr.n.ReplaceSectorDeadline.Representation()
	case 8:
		idx = itr.idx
		v = itr.n.ReplaceSectorPartition.Representation()
	case 9:
		idx = itr.idx
		v = itr.n.ReplaceSectorNumber.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_MinerV0SectorPreCommitInfo__ReprListItr) Done() bool {
	return itr.idx >= 10
}

func (rn *_MinerV0SectorPreCommitInfo__Repr) Length() int {
	l := 10
	return l
}
func (_MinerV0SectorPreCommitInfo__Repr) IsAbsent() bool {
	return false
}
func (_MinerV0SectorPreCommitInfo__Repr) IsNull() bool {
	return false
}
func (_MinerV0SectorPreCommitInfo__Repr) AsBool() (bool, error) {
	return mixins.List{"types.MinerV0SectorPreCommitInfo.Repr"}.AsBool()
}
func (_MinerV0SectorPreCommitInfo__Repr) AsInt() (int, error) {
	return mixins.List{"types.MinerV0SectorPreCommitInfo.Repr"}.AsInt()
}
func (_MinerV0SectorPreCommitInfo__Repr) AsFloat() (float64, error) {
	return mixins.List{"types.MinerV0SectorPreCommitInfo.Repr"}.AsFloat()
}
func (_MinerV0SectorPreCommitInfo__Repr) AsString() (string, error) {
	return mixins.List{"types.MinerV0SectorPreCommitInfo.Repr"}.AsString()
}
func (_MinerV0SectorPreCommitInfo__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"types.MinerV0SectorPreCommitInfo.Repr"}.AsBytes()
}
func (_MinerV0SectorPreCommitInfo__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"types.MinerV0SectorPreCommitInfo.Repr"}.AsLink()
}
func (_MinerV0SectorPreCommitInfo__Repr) Prototype() ipld.NodePrototype {
	return _MinerV0SectorPreCommitInfo__ReprPrototype{}
}
type _MinerV0SectorPreCommitInfo__ReprPrototype struct{}

func (_MinerV0SectorPreCommitInfo__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _MinerV0SectorPreCommitInfo__ReprBuilder
	nb.Reset()
	return &nb
}
type _MinerV0SectorPreCommitInfo__ReprBuilder struct {
	_MinerV0SectorPreCommitInfo__ReprAssembler
}
func (nb *_MinerV0SectorPreCommitInfo__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_MinerV0SectorPreCommitInfo__ReprBuilder) Reset() {
	var w _MinerV0SectorPreCommitInfo
	var m schema.Maybe
	*nb = _MinerV0SectorPreCommitInfo__ReprBuilder{_MinerV0SectorPreCommitInfo__ReprAssembler{w: &w, m: &m}}
}
type _MinerV0SectorPreCommitInfo__ReprAssembler struct {
	w *_MinerV0SectorPreCommitInfo
	m *schema.Maybe
	state laState
	f int

	cm schema.Maybe
	ca_SealProof _Int__ReprAssembler
	ca_SectorNumber _SectorNumber__ReprAssembler
	ca_SealedCID _Link__ReprAssembler
	ca_SealRandEpoch _ChainEpoch__ReprAssembler
	ca_DealIDs _List__DealID__ReprAssembler
	ca_Expiration _ChainEpoch__ReprAssembler
	ca_ReplaceCapacity _Bool__ReprAssembler
	ca_ReplaceSectorDeadline _Int__ReprAssembler
	ca_ReplaceSectorPartition _Int__ReprAssembler
	ca_ReplaceSectorNumber _SectorNumber__ReprAssembler
	}

func (na *_MinerV0SectorPreCommitInfo__ReprAssembler) reset() {
	na.state = laState_initial
	na.f = 0
	na.ca_SealProof.reset()
	na.ca_SectorNumber.reset()
	na.ca_SealedCID.reset()
	na.ca_SealRandEpoch.reset()
	na.ca_DealIDs.reset()
	na.ca_Expiration.reset()
	na.ca_ReplaceCapacity.reset()
	na.ca_ReplaceSectorDeadline.reset()
	na.ca_ReplaceSectorPartition.reset()
	na.ca_ReplaceSectorNumber.reset()
}
func (_MinerV0SectorPreCommitInfo__ReprAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"types.MinerV0SectorPreCommitInfo.Repr"}.BeginMap(0)
}
func (na *_MinerV0SectorPreCommitInfo__ReprAssembler) BeginList(int) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_MinerV0SectorPreCommitInfo{}
	}
	return na, nil
}
func (na *_MinerV0SectorPreCommitInfo__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"types.MinerV0SectorPreCommitInfo.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_MinerV0SectorPreCommitInfo__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"types.MinerV0SectorPreCommitInfo.Repr"}.AssignBool(false)
}
func (_MinerV0SectorPreCommitInfo__ReprAssembler) AssignInt(int) error {
	return mixins.ListAssembler{"types.MinerV0SectorPreCommitInfo.Repr"}.AssignInt(0)
}
func (_MinerV0SectorPreCommitInfo__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"types.MinerV0SectorPreCommitInfo.Repr"}.AssignFloat(0)
}
func (_MinerV0SectorPreCommitInfo__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"types.MinerV0SectorPreCommitInfo.Repr"}.AssignString("")
}
func (_MinerV0SectorPreCommitInfo__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"types.MinerV0SectorPreCommitInfo.Repr"}.AssignBytes(nil)
}
func (_MinerV0SectorPreCommitInfo__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"types.MinerV0SectorPreCommitInfo.Repr"}.AssignLink(nil)
}
func (na *_MinerV0SectorPreCommitInfo__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_MinerV0SectorPreCommitInfo); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_List {
		return ipld.ErrWrongKind{TypeName: "types.MinerV0SectorPreCommitInfo.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustList, ActualKind: v.ReprKind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_MinerV0SectorPreCommitInfo__ReprAssembler) Prototype() ipld.NodePrototype {
	return _MinerV0SectorPreCommitInfo__ReprPrototype{}
}
func (la *_MinerV0SectorPreCommitInfo__ReprAssembler) valueFinishTidy() bool {
	switch la.f {
	case 0:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 1:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 2:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 3:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 4:
		switch la.w.DealIDs.m {
		case schema.Maybe_Value:
			la.w.DealIDs.v = la.ca_DealIDs.w
			la.state = laState_initial
			la.f++
			return true
		case schema.Maybe_Null:
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 5:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 6:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 7:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 8:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 9:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (la *_MinerV0SectorPreCommitInfo__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	if la.f >= 10 {
		return _ErrorThunkAssembler{schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(10)}}
	}
	la.state = laState_midValue
	switch la.f {
	case 0:
		la.ca_SealProof.w = &la.w.SealProof
		la.ca_SealProof.m = &la.cm
		return &la.ca_SealProof
	case 1:
		la.ca_SectorNumber.w = &la.w.SectorNumber
		la.ca_SectorNumber.m = &la.cm
		return &la.ca_SectorNumber
	case 2:
		la.ca_SealedCID.w = &la.w.SealedCID
		la.ca_SealedCID.m = &la.cm
		return &la.ca_SealedCID
	case 3:
		la.ca_SealRandEpoch.w = &la.w.SealRandEpoch
		la.ca_SealRandEpoch.m = &la.cm
		return &la.ca_SealRandEpoch
	case 4:
		la.ca_DealIDs.w = la.w.DealIDs.v
		la.ca_DealIDs.m = &la.w.DealIDs.m
		la.w.DealIDs.m = allowNull
		return &la.ca_DealIDs
	case 5:
		la.ca_Expiration.w = &la.w.Expiration
		la.ca_Expiration.m = &la.cm
		return &la.ca_Expiration
	case 6:
		la.ca_ReplaceCapacity.w = &la.w.ReplaceCapacity
		la.ca_ReplaceCapacity.m = &la.cm
		return &la.ca_ReplaceCapacity
	case 7:
		la.ca_ReplaceSectorDeadline.w = &la.w.ReplaceSectorDeadline
		la.ca_ReplaceSectorDeadline.m = &la.cm
		return &la.ca_ReplaceSectorDeadline
	case 8:
		la.ca_ReplaceSectorPartition.w = &la.w.ReplaceSectorPartition
		la.ca_ReplaceSectorPartition.m = &la.cm
		return &la.ca_ReplaceSectorPartition
	case 9:
		la.ca_ReplaceSectorNumber.w = &la.w.ReplaceSectorNumber
		la.ca_ReplaceSectorNumber.m = &la.cm
		return &la.ca_ReplaceSectorNumber
	default:
		panic("unreachable")
	}
}
func (la *_MinerV0SectorPreCommitInfo__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_MinerV0SectorPreCommitInfo__ReprAssembler) ValuePrototype(_ int) ipld.NodePrototype {
	panic("todo structbuilder tuplerepr valueprototype")
}
