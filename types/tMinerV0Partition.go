package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _MinerV0Partition struct {
	Sectors _BitField
	Faults _BitField
	Recoveries _BitField
	Terminated _BitField
	ExpirationsEpochs _Link__MinerV0ExpirationSet
	EarlyTerminated _Link
	LivePower _MinerV0PowerPair
	FaultyPower _MinerV0PowerPair
	RecoveringPower _MinerV0PowerPair
}
type MinerV0Partition = *_MinerV0Partition

func (n _MinerV0Partition) FieldSectors()	BitField {
	return &n.Sectors
}
func (n _MinerV0Partition) FieldFaults()	BitField {
	return &n.Faults
}
func (n _MinerV0Partition) FieldRecoveries()	BitField {
	return &n.Recoveries
}
func (n _MinerV0Partition) FieldTerminated()	BitField {
	return &n.Terminated
}
func (n _MinerV0Partition) FieldExpirationsEpochs()	Link__MinerV0ExpirationSet {
	return &n.ExpirationsEpochs
}
func (n _MinerV0Partition) FieldEarlyTerminated()	Link {
	return &n.EarlyTerminated
}
func (n _MinerV0Partition) FieldLivePower()	MinerV0PowerPair {
	return &n.LivePower
}
func (n _MinerV0Partition) FieldFaultyPower()	MinerV0PowerPair {
	return &n.FaultyPower
}
func (n _MinerV0Partition) FieldRecoveringPower()	MinerV0PowerPair {
	return &n.RecoveringPower
}
type _MinerV0Partition__Maybe struct {
	m schema.Maybe
	v MinerV0Partition
}
type MaybeMinerV0Partition = *_MinerV0Partition__Maybe

func (m MaybeMinerV0Partition) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeMinerV0Partition) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeMinerV0Partition) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeMinerV0Partition) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeMinerV0Partition) Must() MinerV0Partition {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__MinerV0Partition_Sectors = _String{"Sectors"}
	fieldName__MinerV0Partition_Faults = _String{"Faults"}
	fieldName__MinerV0Partition_Recoveries = _String{"Recoveries"}
	fieldName__MinerV0Partition_Terminated = _String{"Terminated"}
	fieldName__MinerV0Partition_ExpirationsEpochs = _String{"ExpirationsEpochs"}
	fieldName__MinerV0Partition_EarlyTerminated = _String{"EarlyTerminated"}
	fieldName__MinerV0Partition_LivePower = _String{"LivePower"}
	fieldName__MinerV0Partition_FaultyPower = _String{"FaultyPower"}
	fieldName__MinerV0Partition_RecoveringPower = _String{"RecoveringPower"}
)
var _ ipld.Node = (MinerV0Partition)(&_MinerV0Partition{})
var _ schema.TypedNode = (MinerV0Partition)(&_MinerV0Partition{})
func (MinerV0Partition) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n MinerV0Partition) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Sectors":
		return &n.Sectors, nil
	case "Faults":
		return &n.Faults, nil
	case "Recoveries":
		return &n.Recoveries, nil
	case "Terminated":
		return &n.Terminated, nil
	case "ExpirationsEpochs":
		return &n.ExpirationsEpochs, nil
	case "EarlyTerminated":
		return &n.EarlyTerminated, nil
	case "LivePower":
		return &n.LivePower, nil
	case "FaultyPower":
		return &n.FaultyPower, nil
	case "RecoveringPower":
		return &n.RecoveringPower, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n MinerV0Partition) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (MinerV0Partition) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"types.MinerV0Partition"}.LookupByIndex(0)
}
func (n MinerV0Partition) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n MinerV0Partition) MapIterator() ipld.MapIterator {
	return &_MinerV0Partition__MapItr{n, 0}
}

type _MinerV0Partition__MapItr struct {
	n MinerV0Partition
	idx  int
}

func (itr *_MinerV0Partition__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 9 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__MinerV0Partition_Sectors
		v = &itr.n.Sectors
	case 1:
		k = &fieldName__MinerV0Partition_Faults
		v = &itr.n.Faults
	case 2:
		k = &fieldName__MinerV0Partition_Recoveries
		v = &itr.n.Recoveries
	case 3:
		k = &fieldName__MinerV0Partition_Terminated
		v = &itr.n.Terminated
	case 4:
		k = &fieldName__MinerV0Partition_ExpirationsEpochs
		v = &itr.n.ExpirationsEpochs
	case 5:
		k = &fieldName__MinerV0Partition_EarlyTerminated
		v = &itr.n.EarlyTerminated
	case 6:
		k = &fieldName__MinerV0Partition_LivePower
		v = &itr.n.LivePower
	case 7:
		k = &fieldName__MinerV0Partition_FaultyPower
		v = &itr.n.FaultyPower
	case 8:
		k = &fieldName__MinerV0Partition_RecoveringPower
		v = &itr.n.RecoveringPower
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_MinerV0Partition__MapItr) Done() bool {
	return itr.idx >= 9
}

func (MinerV0Partition) ListIterator() ipld.ListIterator {
	return nil
}
func (MinerV0Partition) Length() int {
	return 9
}
func (MinerV0Partition) IsAbsent() bool {
	return false
}
func (MinerV0Partition) IsNull() bool {
	return false
}
func (MinerV0Partition) AsBool() (bool, error) {
	return mixins.Map{"types.MinerV0Partition"}.AsBool()
}
func (MinerV0Partition) AsInt() (int, error) {
	return mixins.Map{"types.MinerV0Partition"}.AsInt()
}
func (MinerV0Partition) AsFloat() (float64, error) {
	return mixins.Map{"types.MinerV0Partition"}.AsFloat()
}
func (MinerV0Partition) AsString() (string, error) {
	return mixins.Map{"types.MinerV0Partition"}.AsString()
}
func (MinerV0Partition) AsBytes() ([]byte, error) {
	return mixins.Map{"types.MinerV0Partition"}.AsBytes()
}
func (MinerV0Partition) AsLink() (ipld.Link, error) {
	return mixins.Map{"types.MinerV0Partition"}.AsLink()
}
func (MinerV0Partition) Prototype() ipld.NodePrototype {
	return _MinerV0Partition__Prototype{}
}
type _MinerV0Partition__Prototype struct{}

func (_MinerV0Partition__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _MinerV0Partition__Builder
	nb.Reset()
	return &nb
}
type _MinerV0Partition__Builder struct {
	_MinerV0Partition__Assembler
}
func (nb *_MinerV0Partition__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_MinerV0Partition__Builder) Reset() {
	var w _MinerV0Partition
	var m schema.Maybe
	*nb = _MinerV0Partition__Builder{_MinerV0Partition__Assembler{w: &w, m: &m}}
}
type _MinerV0Partition__Assembler struct {
	w *_MinerV0Partition
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_Sectors _BitField__Assembler
	ca_Faults _BitField__Assembler
	ca_Recoveries _BitField__Assembler
	ca_Terminated _BitField__Assembler
	ca_ExpirationsEpochs _Link__MinerV0ExpirationSet__Assembler
	ca_EarlyTerminated _Link__Assembler
	ca_LivePower _MinerV0PowerPair__Assembler
	ca_FaultyPower _MinerV0PowerPair__Assembler
	ca_RecoveringPower _MinerV0PowerPair__Assembler
	}

func (na *_MinerV0Partition__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Sectors.reset()
	na.ca_Faults.reset()
	na.ca_Recoveries.reset()
	na.ca_Terminated.reset()
	na.ca_ExpirationsEpochs.reset()
	na.ca_EarlyTerminated.reset()
	na.ca_LivePower.reset()
	na.ca_FaultyPower.reset()
	na.ca_RecoveringPower.reset()
}

var (
	fieldBit__MinerV0Partition_Sectors = 1 << 0
	fieldBit__MinerV0Partition_Faults = 1 << 1
	fieldBit__MinerV0Partition_Recoveries = 1 << 2
	fieldBit__MinerV0Partition_Terminated = 1 << 3
	fieldBit__MinerV0Partition_ExpirationsEpochs = 1 << 4
	fieldBit__MinerV0Partition_EarlyTerminated = 1 << 5
	fieldBit__MinerV0Partition_LivePower = 1 << 6
	fieldBit__MinerV0Partition_FaultyPower = 1 << 7
	fieldBit__MinerV0Partition_RecoveringPower = 1 << 8
	fieldBits__MinerV0Partition_sufficient = 0 + 1 << 0 + 1 << 1 + 1 << 2 + 1 << 3 + 1 << 4 + 1 << 5 + 1 << 6 + 1 << 7 + 1 << 8
)
func (na *_MinerV0Partition__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_MinerV0Partition{}
	}
	return na, nil
}
func (_MinerV0Partition__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"types.MinerV0Partition"}.BeginList(0)
}
func (na *_MinerV0Partition__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"types.MinerV0Partition"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_MinerV0Partition__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"types.MinerV0Partition"}.AssignBool(false)
}
func (_MinerV0Partition__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"types.MinerV0Partition"}.AssignInt(0)
}
func (_MinerV0Partition__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"types.MinerV0Partition"}.AssignFloat(0)
}
func (_MinerV0Partition__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"types.MinerV0Partition"}.AssignString("")
}
func (_MinerV0Partition__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"types.MinerV0Partition"}.AssignBytes(nil)
}
func (_MinerV0Partition__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"types.MinerV0Partition"}.AssignLink(nil)
}
func (na *_MinerV0Partition__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_MinerV0Partition); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "types.MinerV0Partition", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_MinerV0Partition__Assembler) Prototype() ipld.NodePrototype {
	return _MinerV0Partition__Prototype{}
}
func (ma *_MinerV0Partition__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Sectors.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Faults.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Recoveries.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Terminated.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 4:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ExpirationsEpochs.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 5:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_EarlyTerminated.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 6:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_LivePower.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 7:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_FaultyPower.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 8:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_RecoveringPower.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_MinerV0Partition__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Sectors":
		if ma.s & fieldBit__MinerV0Partition_Sectors != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0Partition_Sectors}
		}
		ma.s += fieldBit__MinerV0Partition_Sectors
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Sectors.w = &ma.w.Sectors
		ma.ca_Sectors.m = &ma.cm
		return &ma.ca_Sectors, nil
	case "Faults":
		if ma.s & fieldBit__MinerV0Partition_Faults != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0Partition_Faults}
		}
		ma.s += fieldBit__MinerV0Partition_Faults
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_Faults.w = &ma.w.Faults
		ma.ca_Faults.m = &ma.cm
		return &ma.ca_Faults, nil
	case "Recoveries":
		if ma.s & fieldBit__MinerV0Partition_Recoveries != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0Partition_Recoveries}
		}
		ma.s += fieldBit__MinerV0Partition_Recoveries
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_Recoveries.w = &ma.w.Recoveries
		ma.ca_Recoveries.m = &ma.cm
		return &ma.ca_Recoveries, nil
	case "Terminated":
		if ma.s & fieldBit__MinerV0Partition_Terminated != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0Partition_Terminated}
		}
		ma.s += fieldBit__MinerV0Partition_Terminated
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_Terminated.w = &ma.w.Terminated
		ma.ca_Terminated.m = &ma.cm
		return &ma.ca_Terminated, nil
	case "ExpirationsEpochs":
		if ma.s & fieldBit__MinerV0Partition_ExpirationsEpochs != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0Partition_ExpirationsEpochs}
		}
		ma.s += fieldBit__MinerV0Partition_ExpirationsEpochs
		ma.state = maState_midValue
		ma.f = 4
		ma.ca_ExpirationsEpochs.w = &ma.w.ExpirationsEpochs
		ma.ca_ExpirationsEpochs.m = &ma.cm
		return &ma.ca_ExpirationsEpochs, nil
	case "EarlyTerminated":
		if ma.s & fieldBit__MinerV0Partition_EarlyTerminated != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0Partition_EarlyTerminated}
		}
		ma.s += fieldBit__MinerV0Partition_EarlyTerminated
		ma.state = maState_midValue
		ma.f = 5
		ma.ca_EarlyTerminated.w = &ma.w.EarlyTerminated
		ma.ca_EarlyTerminated.m = &ma.cm
		return &ma.ca_EarlyTerminated, nil
	case "LivePower":
		if ma.s & fieldBit__MinerV0Partition_LivePower != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0Partition_LivePower}
		}
		ma.s += fieldBit__MinerV0Partition_LivePower
		ma.state = maState_midValue
		ma.f = 6
		ma.ca_LivePower.w = &ma.w.LivePower
		ma.ca_LivePower.m = &ma.cm
		return &ma.ca_LivePower, nil
	case "FaultyPower":
		if ma.s & fieldBit__MinerV0Partition_FaultyPower != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0Partition_FaultyPower}
		}
		ma.s += fieldBit__MinerV0Partition_FaultyPower
		ma.state = maState_midValue
		ma.f = 7
		ma.ca_FaultyPower.w = &ma.w.FaultyPower
		ma.ca_FaultyPower.m = &ma.cm
		return &ma.ca_FaultyPower, nil
	case "RecoveringPower":
		if ma.s & fieldBit__MinerV0Partition_RecoveringPower != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV0Partition_RecoveringPower}
		}
		ma.s += fieldBit__MinerV0Partition_RecoveringPower
		ma.state = maState_midValue
		ma.f = 8
		ma.ca_RecoveringPower.w = &ma.w.RecoveringPower
		ma.ca_RecoveringPower.m = &ma.cm
		return &ma.ca_RecoveringPower, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"types.MinerV0Partition", Key:&_String{k}}
	}
}
func (ma *_MinerV0Partition__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_MinerV0Partition__KeyAssembler)(ma)
}
func (ma *_MinerV0Partition__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Sectors.w = &ma.w.Sectors
		ma.ca_Sectors.m = &ma.cm
		return &ma.ca_Sectors
	case 1:
		ma.ca_Faults.w = &ma.w.Faults
		ma.ca_Faults.m = &ma.cm
		return &ma.ca_Faults
	case 2:
		ma.ca_Recoveries.w = &ma.w.Recoveries
		ma.ca_Recoveries.m = &ma.cm
		return &ma.ca_Recoveries
	case 3:
		ma.ca_Terminated.w = &ma.w.Terminated
		ma.ca_Terminated.m = &ma.cm
		return &ma.ca_Terminated
	case 4:
		ma.ca_ExpirationsEpochs.w = &ma.w.ExpirationsEpochs
		ma.ca_ExpirationsEpochs.m = &ma.cm
		return &ma.ca_ExpirationsEpochs
	case 5:
		ma.ca_EarlyTerminated.w = &ma.w.EarlyTerminated
		ma.ca_EarlyTerminated.m = &ma.cm
		return &ma.ca_EarlyTerminated
	case 6:
		ma.ca_LivePower.w = &ma.w.LivePower
		ma.ca_LivePower.m = &ma.cm
		return &ma.ca_LivePower
	case 7:
		ma.ca_FaultyPower.w = &ma.w.FaultyPower
		ma.ca_FaultyPower.m = &ma.cm
		return &ma.ca_FaultyPower
	case 8:
		ma.ca_RecoveringPower.w = &ma.w.RecoveringPower
		ma.ca_RecoveringPower.m = &ma.cm
		return &ma.ca_RecoveringPower
	default:
		panic("unreachable")
	}
}
func (ma *_MinerV0Partition__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_MinerV0Partition__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_MinerV0Partition__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _MinerV0Partition__KeyAssembler _MinerV0Partition__Assembler
func (_MinerV0Partition__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"types.MinerV0Partition.KeyAssembler"}.BeginMap(0)
}
func (_MinerV0Partition__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"types.MinerV0Partition.KeyAssembler"}.BeginList(0)
}
func (na *_MinerV0Partition__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"types.MinerV0Partition.KeyAssembler"}.AssignNull()
}
func (_MinerV0Partition__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"types.MinerV0Partition.KeyAssembler"}.AssignBool(false)
}
func (_MinerV0Partition__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"types.MinerV0Partition.KeyAssembler"}.AssignInt(0)
}
func (_MinerV0Partition__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"types.MinerV0Partition.KeyAssembler"}.AssignFloat(0)
}
func (ka *_MinerV0Partition__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Sectors":
		if ka.s & fieldBit__MinerV0Partition_Sectors != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0Partition_Sectors}
		}
		ka.s += fieldBit__MinerV0Partition_Sectors
		ka.state = maState_expectValue
		ka.f = 0
	case "Faults":
		if ka.s & fieldBit__MinerV0Partition_Faults != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0Partition_Faults}
		}
		ka.s += fieldBit__MinerV0Partition_Faults
		ka.state = maState_expectValue
		ka.f = 1
	case "Recoveries":
		if ka.s & fieldBit__MinerV0Partition_Recoveries != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0Partition_Recoveries}
		}
		ka.s += fieldBit__MinerV0Partition_Recoveries
		ka.state = maState_expectValue
		ka.f = 2
	case "Terminated":
		if ka.s & fieldBit__MinerV0Partition_Terminated != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0Partition_Terminated}
		}
		ka.s += fieldBit__MinerV0Partition_Terminated
		ka.state = maState_expectValue
		ka.f = 3
	case "ExpirationsEpochs":
		if ka.s & fieldBit__MinerV0Partition_ExpirationsEpochs != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0Partition_ExpirationsEpochs}
		}
		ka.s += fieldBit__MinerV0Partition_ExpirationsEpochs
		ka.state = maState_expectValue
		ka.f = 4
	case "EarlyTerminated":
		if ka.s & fieldBit__MinerV0Partition_EarlyTerminated != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0Partition_EarlyTerminated}
		}
		ka.s += fieldBit__MinerV0Partition_EarlyTerminated
		ka.state = maState_expectValue
		ka.f = 5
	case "LivePower":
		if ka.s & fieldBit__MinerV0Partition_LivePower != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0Partition_LivePower}
		}
		ka.s += fieldBit__MinerV0Partition_LivePower
		ka.state = maState_expectValue
		ka.f = 6
	case "FaultyPower":
		if ka.s & fieldBit__MinerV0Partition_FaultyPower != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0Partition_FaultyPower}
		}
		ka.s += fieldBit__MinerV0Partition_FaultyPower
		ka.state = maState_expectValue
		ka.f = 7
	case "RecoveringPower":
		if ka.s & fieldBit__MinerV0Partition_RecoveringPower != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV0Partition_RecoveringPower}
		}
		ka.s += fieldBit__MinerV0Partition_RecoveringPower
		ka.state = maState_expectValue
		ka.f = 8
	default:
		return ipld.ErrInvalidKey{TypeName:"types.MinerV0Partition", Key:&_String{k}}
	}
	return nil
}
func (_MinerV0Partition__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"types.MinerV0Partition.KeyAssembler"}.AssignBytes(nil)
}
func (_MinerV0Partition__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"types.MinerV0Partition.KeyAssembler"}.AssignLink(nil)
}
func (ka *_MinerV0Partition__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_MinerV0Partition__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (MinerV0Partition) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n MinerV0Partition) Representation() ipld.Node {
	return (*_MinerV0Partition__Repr)(n)
}
type _MinerV0Partition__Repr _MinerV0Partition
var _ ipld.Node = &_MinerV0Partition__Repr{}
func (_MinerV0Partition__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_List
}
func (_MinerV0Partition__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"types.MinerV0Partition.Repr"}.LookupByString("")
}
func (n *_MinerV0Partition__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ki, err := key.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(ki)
}
func (n *_MinerV0Partition__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	switch idx {
	case 0:
		return n.Sectors.Representation(), nil
	case 1:
		return n.Faults.Representation(), nil
	case 2:
		return n.Recoveries.Representation(), nil
	case 3:
		return n.Terminated.Representation(), nil
	case 4:
		return n.ExpirationsEpochs.Representation(), nil
	case 5:
		return n.EarlyTerminated.Representation(), nil
	case 6:
		return n.LivePower.Representation(), nil
	case 7:
		return n.FaultyPower.Representation(), nil
	case 8:
		return n.RecoveringPower.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(idx)}
	}
}
func (n _MinerV0Partition__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "types.MinerV0Partition.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_MinerV0Partition__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (n *_MinerV0Partition__Repr) ListIterator() ipld.ListIterator {
	return &_MinerV0Partition__ReprListItr{n, 0}
}

type _MinerV0Partition__ReprListItr struct {
	n   *_MinerV0Partition__Repr
	idx int
	
}

func (itr *_MinerV0Partition__ReprListItr) Next() (idx int, v ipld.Node, err error) {
	if itr.idx >= 9 {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		idx = itr.idx
		v = itr.n.Sectors.Representation()
	case 1:
		idx = itr.idx
		v = itr.n.Faults.Representation()
	case 2:
		idx = itr.idx
		v = itr.n.Recoveries.Representation()
	case 3:
		idx = itr.idx
		v = itr.n.Terminated.Representation()
	case 4:
		idx = itr.idx
		v = itr.n.ExpirationsEpochs.Representation()
	case 5:
		idx = itr.idx
		v = itr.n.EarlyTerminated.Representation()
	case 6:
		idx = itr.idx
		v = itr.n.LivePower.Representation()
	case 7:
		idx = itr.idx
		v = itr.n.FaultyPower.Representation()
	case 8:
		idx = itr.idx
		v = itr.n.RecoveringPower.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_MinerV0Partition__ReprListItr) Done() bool {
	return itr.idx >= 9
}

func (rn *_MinerV0Partition__Repr) Length() int {
	l := 9
	return l
}
func (_MinerV0Partition__Repr) IsAbsent() bool {
	return false
}
func (_MinerV0Partition__Repr) IsNull() bool {
	return false
}
func (_MinerV0Partition__Repr) AsBool() (bool, error) {
	return mixins.List{"types.MinerV0Partition.Repr"}.AsBool()
}
func (_MinerV0Partition__Repr) AsInt() (int, error) {
	return mixins.List{"types.MinerV0Partition.Repr"}.AsInt()
}
func (_MinerV0Partition__Repr) AsFloat() (float64, error) {
	return mixins.List{"types.MinerV0Partition.Repr"}.AsFloat()
}
func (_MinerV0Partition__Repr) AsString() (string, error) {
	return mixins.List{"types.MinerV0Partition.Repr"}.AsString()
}
func (_MinerV0Partition__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"types.MinerV0Partition.Repr"}.AsBytes()
}
func (_MinerV0Partition__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"types.MinerV0Partition.Repr"}.AsLink()
}
func (_MinerV0Partition__Repr) Prototype() ipld.NodePrototype {
	return _MinerV0Partition__ReprPrototype{}
}
type _MinerV0Partition__ReprPrototype struct{}

func (_MinerV0Partition__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _MinerV0Partition__ReprBuilder
	nb.Reset()
	return &nb
}
type _MinerV0Partition__ReprBuilder struct {
	_MinerV0Partition__ReprAssembler
}
func (nb *_MinerV0Partition__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_MinerV0Partition__ReprBuilder) Reset() {
	var w _MinerV0Partition
	var m schema.Maybe
	*nb = _MinerV0Partition__ReprBuilder{_MinerV0Partition__ReprAssembler{w: &w, m: &m}}
}
type _MinerV0Partition__ReprAssembler struct {
	w *_MinerV0Partition
	m *schema.Maybe
	state laState
	f int

	cm schema.Maybe
	ca_Sectors _BitField__ReprAssembler
	ca_Faults _BitField__ReprAssembler
	ca_Recoveries _BitField__ReprAssembler
	ca_Terminated _BitField__ReprAssembler
	ca_ExpirationsEpochs _Link__MinerV0ExpirationSet__ReprAssembler
	ca_EarlyTerminated _Link__ReprAssembler
	ca_LivePower _MinerV0PowerPair__ReprAssembler
	ca_FaultyPower _MinerV0PowerPair__ReprAssembler
	ca_RecoveringPower _MinerV0PowerPair__ReprAssembler
	}

func (na *_MinerV0Partition__ReprAssembler) reset() {
	na.state = laState_initial
	na.f = 0
	na.ca_Sectors.reset()
	na.ca_Faults.reset()
	na.ca_Recoveries.reset()
	na.ca_Terminated.reset()
	na.ca_ExpirationsEpochs.reset()
	na.ca_EarlyTerminated.reset()
	na.ca_LivePower.reset()
	na.ca_FaultyPower.reset()
	na.ca_RecoveringPower.reset()
}
func (_MinerV0Partition__ReprAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"types.MinerV0Partition.Repr"}.BeginMap(0)
}
func (na *_MinerV0Partition__ReprAssembler) BeginList(int) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_MinerV0Partition{}
	}
	return na, nil
}
func (na *_MinerV0Partition__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"types.MinerV0Partition.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_MinerV0Partition__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"types.MinerV0Partition.Repr"}.AssignBool(false)
}
func (_MinerV0Partition__ReprAssembler) AssignInt(int) error {
	return mixins.ListAssembler{"types.MinerV0Partition.Repr"}.AssignInt(0)
}
func (_MinerV0Partition__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"types.MinerV0Partition.Repr"}.AssignFloat(0)
}
func (_MinerV0Partition__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"types.MinerV0Partition.Repr"}.AssignString("")
}
func (_MinerV0Partition__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"types.MinerV0Partition.Repr"}.AssignBytes(nil)
}
func (_MinerV0Partition__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"types.MinerV0Partition.Repr"}.AssignLink(nil)
}
func (na *_MinerV0Partition__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_MinerV0Partition); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_List {
		return ipld.ErrWrongKind{TypeName: "types.MinerV0Partition.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustList, ActualKind: v.ReprKind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_MinerV0Partition__ReprAssembler) Prototype() ipld.NodePrototype {
	return _MinerV0Partition__ReprPrototype{}
}
func (la *_MinerV0Partition__ReprAssembler) valueFinishTidy() bool {
	switch la.f {
	case 0:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 1:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 2:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 3:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 4:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 5:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 6:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 7:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 8:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (la *_MinerV0Partition__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	if la.f >= 9 {
		return _ErrorThunkAssembler{schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(9)}}
	}
	la.state = laState_midValue
	switch la.f {
	case 0:
		la.ca_Sectors.w = &la.w.Sectors
		la.ca_Sectors.m = &la.cm
		return &la.ca_Sectors
	case 1:
		la.ca_Faults.w = &la.w.Faults
		la.ca_Faults.m = &la.cm
		return &la.ca_Faults
	case 2:
		la.ca_Recoveries.w = &la.w.Recoveries
		la.ca_Recoveries.m = &la.cm
		return &la.ca_Recoveries
	case 3:
		la.ca_Terminated.w = &la.w.Terminated
		la.ca_Terminated.m = &la.cm
		return &la.ca_Terminated
	case 4:
		la.ca_ExpirationsEpochs.w = &la.w.ExpirationsEpochs
		la.ca_ExpirationsEpochs.m = &la.cm
		return &la.ca_ExpirationsEpochs
	case 5:
		la.ca_EarlyTerminated.w = &la.w.EarlyTerminated
		la.ca_EarlyTerminated.m = &la.cm
		return &la.ca_EarlyTerminated
	case 6:
		la.ca_LivePower.w = &la.w.LivePower
		la.ca_LivePower.m = &la.cm
		return &la.ca_LivePower
	case 7:
		la.ca_FaultyPower.w = &la.w.FaultyPower
		la.ca_FaultyPower.m = &la.cm
		return &la.ca_FaultyPower
	case 8:
		la.ca_RecoveringPower.w = &la.w.RecoveringPower
		la.ca_RecoveringPower.m = &la.cm
		return &la.ca_RecoveringPower
	default:
		panic("unreachable")
	}
}
func (la *_MinerV0Partition__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_MinerV0Partition__ReprAssembler) ValuePrototype(_ int) ipld.NodePrototype {
	panic("todo structbuilder tuplerepr valueprototype")
}
