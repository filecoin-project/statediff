package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _MarketV0DealProposal struct {
	PieceCID _Link
	PieceSize _PaddedPieceSize
	VerifiedDeal _Bool
	Client _Address
	Provider _Address
	Label _String
	StartEpoch _ChainEpoch
	EndEpoch _ChainEpoch
	StoragePricePerEpoch _BigInt
	ProviderCollateral _BigInt
	ClientCollateral _BigInt
}
type MarketV0DealProposal = *_MarketV0DealProposal

func (n _MarketV0DealProposal) FieldPieceCID()	Link {
	return &n.PieceCID
}
func (n _MarketV0DealProposal) FieldPieceSize()	PaddedPieceSize {
	return &n.PieceSize
}
func (n _MarketV0DealProposal) FieldVerifiedDeal()	Bool {
	return &n.VerifiedDeal
}
func (n _MarketV0DealProposal) FieldClient()	Address {
	return &n.Client
}
func (n _MarketV0DealProposal) FieldProvider()	Address {
	return &n.Provider
}
func (n _MarketV0DealProposal) FieldLabel()	String {
	return &n.Label
}
func (n _MarketV0DealProposal) FieldStartEpoch()	ChainEpoch {
	return &n.StartEpoch
}
func (n _MarketV0DealProposal) FieldEndEpoch()	ChainEpoch {
	return &n.EndEpoch
}
func (n _MarketV0DealProposal) FieldStoragePricePerEpoch()	BigInt {
	return &n.StoragePricePerEpoch
}
func (n _MarketV0DealProposal) FieldProviderCollateral()	BigInt {
	return &n.ProviderCollateral
}
func (n _MarketV0DealProposal) FieldClientCollateral()	BigInt {
	return &n.ClientCollateral
}
type _MarketV0DealProposal__Maybe struct {
	m schema.Maybe
	v MarketV0DealProposal
}
type MaybeMarketV0DealProposal = *_MarketV0DealProposal__Maybe

func (m MaybeMarketV0DealProposal) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeMarketV0DealProposal) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeMarketV0DealProposal) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeMarketV0DealProposal) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeMarketV0DealProposal) Must() MarketV0DealProposal {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__MarketV0DealProposal_PieceCID = _String{"PieceCID"}
	fieldName__MarketV0DealProposal_PieceSize = _String{"PieceSize"}
	fieldName__MarketV0DealProposal_VerifiedDeal = _String{"VerifiedDeal"}
	fieldName__MarketV0DealProposal_Client = _String{"Client"}
	fieldName__MarketV0DealProposal_Provider = _String{"Provider"}
	fieldName__MarketV0DealProposal_Label = _String{"Label"}
	fieldName__MarketV0DealProposal_StartEpoch = _String{"StartEpoch"}
	fieldName__MarketV0DealProposal_EndEpoch = _String{"EndEpoch"}
	fieldName__MarketV0DealProposal_StoragePricePerEpoch = _String{"StoragePricePerEpoch"}
	fieldName__MarketV0DealProposal_ProviderCollateral = _String{"ProviderCollateral"}
	fieldName__MarketV0DealProposal_ClientCollateral = _String{"ClientCollateral"}
)
var _ ipld.Node = (MarketV0DealProposal)(&_MarketV0DealProposal{})
var _ schema.TypedNode = (MarketV0DealProposal)(&_MarketV0DealProposal{})
func (MarketV0DealProposal) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n MarketV0DealProposal) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "PieceCID":
		return &n.PieceCID, nil
	case "PieceSize":
		return &n.PieceSize, nil
	case "VerifiedDeal":
		return &n.VerifiedDeal, nil
	case "Client":
		return &n.Client, nil
	case "Provider":
		return &n.Provider, nil
	case "Label":
		return &n.Label, nil
	case "StartEpoch":
		return &n.StartEpoch, nil
	case "EndEpoch":
		return &n.EndEpoch, nil
	case "StoragePricePerEpoch":
		return &n.StoragePricePerEpoch, nil
	case "ProviderCollateral":
		return &n.ProviderCollateral, nil
	case "ClientCollateral":
		return &n.ClientCollateral, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n MarketV0DealProposal) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (MarketV0DealProposal) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"types.MarketV0DealProposal"}.LookupByIndex(0)
}
func (n MarketV0DealProposal) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n MarketV0DealProposal) MapIterator() ipld.MapIterator {
	return &_MarketV0DealProposal__MapItr{n, 0}
}

type _MarketV0DealProposal__MapItr struct {
	n MarketV0DealProposal
	idx  int
}

func (itr *_MarketV0DealProposal__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 11 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__MarketV0DealProposal_PieceCID
		v = &itr.n.PieceCID
	case 1:
		k = &fieldName__MarketV0DealProposal_PieceSize
		v = &itr.n.PieceSize
	case 2:
		k = &fieldName__MarketV0DealProposal_VerifiedDeal
		v = &itr.n.VerifiedDeal
	case 3:
		k = &fieldName__MarketV0DealProposal_Client
		v = &itr.n.Client
	case 4:
		k = &fieldName__MarketV0DealProposal_Provider
		v = &itr.n.Provider
	case 5:
		k = &fieldName__MarketV0DealProposal_Label
		v = &itr.n.Label
	case 6:
		k = &fieldName__MarketV0DealProposal_StartEpoch
		v = &itr.n.StartEpoch
	case 7:
		k = &fieldName__MarketV0DealProposal_EndEpoch
		v = &itr.n.EndEpoch
	case 8:
		k = &fieldName__MarketV0DealProposal_StoragePricePerEpoch
		v = &itr.n.StoragePricePerEpoch
	case 9:
		k = &fieldName__MarketV0DealProposal_ProviderCollateral
		v = &itr.n.ProviderCollateral
	case 10:
		k = &fieldName__MarketV0DealProposal_ClientCollateral
		v = &itr.n.ClientCollateral
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_MarketV0DealProposal__MapItr) Done() bool {
	return itr.idx >= 11
}

func (MarketV0DealProposal) ListIterator() ipld.ListIterator {
	return nil
}
func (MarketV0DealProposal) Length() int {
	return 11
}
func (MarketV0DealProposal) IsAbsent() bool {
	return false
}
func (MarketV0DealProposal) IsNull() bool {
	return false
}
func (MarketV0DealProposal) AsBool() (bool, error) {
	return mixins.Map{"types.MarketV0DealProposal"}.AsBool()
}
func (MarketV0DealProposal) AsInt() (int, error) {
	return mixins.Map{"types.MarketV0DealProposal"}.AsInt()
}
func (MarketV0DealProposal) AsFloat() (float64, error) {
	return mixins.Map{"types.MarketV0DealProposal"}.AsFloat()
}
func (MarketV0DealProposal) AsString() (string, error) {
	return mixins.Map{"types.MarketV0DealProposal"}.AsString()
}
func (MarketV0DealProposal) AsBytes() ([]byte, error) {
	return mixins.Map{"types.MarketV0DealProposal"}.AsBytes()
}
func (MarketV0DealProposal) AsLink() (ipld.Link, error) {
	return mixins.Map{"types.MarketV0DealProposal"}.AsLink()
}
func (MarketV0DealProposal) Prototype() ipld.NodePrototype {
	return _MarketV0DealProposal__Prototype{}
}
type _MarketV0DealProposal__Prototype struct{}

func (_MarketV0DealProposal__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _MarketV0DealProposal__Builder
	nb.Reset()
	return &nb
}
type _MarketV0DealProposal__Builder struct {
	_MarketV0DealProposal__Assembler
}
func (nb *_MarketV0DealProposal__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_MarketV0DealProposal__Builder) Reset() {
	var w _MarketV0DealProposal
	var m schema.Maybe
	*nb = _MarketV0DealProposal__Builder{_MarketV0DealProposal__Assembler{w: &w, m: &m}}
}
type _MarketV0DealProposal__Assembler struct {
	w *_MarketV0DealProposal
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_PieceCID _Link__Assembler
	ca_PieceSize _PaddedPieceSize__Assembler
	ca_VerifiedDeal _Bool__Assembler
	ca_Client _Address__Assembler
	ca_Provider _Address__Assembler
	ca_Label _String__Assembler
	ca_StartEpoch _ChainEpoch__Assembler
	ca_EndEpoch _ChainEpoch__Assembler
	ca_StoragePricePerEpoch _BigInt__Assembler
	ca_ProviderCollateral _BigInt__Assembler
	ca_ClientCollateral _BigInt__Assembler
	}

func (na *_MarketV0DealProposal__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_PieceCID.reset()
	na.ca_PieceSize.reset()
	na.ca_VerifiedDeal.reset()
	na.ca_Client.reset()
	na.ca_Provider.reset()
	na.ca_Label.reset()
	na.ca_StartEpoch.reset()
	na.ca_EndEpoch.reset()
	na.ca_StoragePricePerEpoch.reset()
	na.ca_ProviderCollateral.reset()
	na.ca_ClientCollateral.reset()
}

var (
	fieldBit__MarketV0DealProposal_PieceCID = 1 << 0
	fieldBit__MarketV0DealProposal_PieceSize = 1 << 1
	fieldBit__MarketV0DealProposal_VerifiedDeal = 1 << 2
	fieldBit__MarketV0DealProposal_Client = 1 << 3
	fieldBit__MarketV0DealProposal_Provider = 1 << 4
	fieldBit__MarketV0DealProposal_Label = 1 << 5
	fieldBit__MarketV0DealProposal_StartEpoch = 1 << 6
	fieldBit__MarketV0DealProposal_EndEpoch = 1 << 7
	fieldBit__MarketV0DealProposal_StoragePricePerEpoch = 1 << 8
	fieldBit__MarketV0DealProposal_ProviderCollateral = 1 << 9
	fieldBit__MarketV0DealProposal_ClientCollateral = 1 << 10
	fieldBits__MarketV0DealProposal_sufficient = 0 + 1 << 0 + 1 << 1 + 1 << 2 + 1 << 3 + 1 << 4 + 1 << 5 + 1 << 6 + 1 << 7 + 1 << 8 + 1 << 9 + 1 << 10
)
func (na *_MarketV0DealProposal__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_MarketV0DealProposal{}
	}
	return na, nil
}
func (_MarketV0DealProposal__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"types.MarketV0DealProposal"}.BeginList(0)
}
func (na *_MarketV0DealProposal__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"types.MarketV0DealProposal"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_MarketV0DealProposal__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"types.MarketV0DealProposal"}.AssignBool(false)
}
func (_MarketV0DealProposal__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"types.MarketV0DealProposal"}.AssignInt(0)
}
func (_MarketV0DealProposal__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"types.MarketV0DealProposal"}.AssignFloat(0)
}
func (_MarketV0DealProposal__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"types.MarketV0DealProposal"}.AssignString("")
}
func (_MarketV0DealProposal__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"types.MarketV0DealProposal"}.AssignBytes(nil)
}
func (_MarketV0DealProposal__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"types.MarketV0DealProposal"}.AssignLink(nil)
}
func (na *_MarketV0DealProposal__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_MarketV0DealProposal); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "types.MarketV0DealProposal", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_MarketV0DealProposal__Assembler) Prototype() ipld.NodePrototype {
	return _MarketV0DealProposal__Prototype{}
}
func (ma *_MarketV0DealProposal__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_PieceCID.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_PieceSize.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_VerifiedDeal.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Client.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 4:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Provider.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 5:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Label.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 6:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_StartEpoch.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 7:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_EndEpoch.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 8:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_StoragePricePerEpoch.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 9:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ProviderCollateral.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 10:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ClientCollateral.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_MarketV0DealProposal__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "PieceCID":
		if ma.s & fieldBit__MarketV0DealProposal_PieceCID != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MarketV0DealProposal_PieceCID}
		}
		ma.s += fieldBit__MarketV0DealProposal_PieceCID
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_PieceCID.w = &ma.w.PieceCID
		ma.ca_PieceCID.m = &ma.cm
		return &ma.ca_PieceCID, nil
	case "PieceSize":
		if ma.s & fieldBit__MarketV0DealProposal_PieceSize != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MarketV0DealProposal_PieceSize}
		}
		ma.s += fieldBit__MarketV0DealProposal_PieceSize
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_PieceSize.w = &ma.w.PieceSize
		ma.ca_PieceSize.m = &ma.cm
		return &ma.ca_PieceSize, nil
	case "VerifiedDeal":
		if ma.s & fieldBit__MarketV0DealProposal_VerifiedDeal != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MarketV0DealProposal_VerifiedDeal}
		}
		ma.s += fieldBit__MarketV0DealProposal_VerifiedDeal
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_VerifiedDeal.w = &ma.w.VerifiedDeal
		ma.ca_VerifiedDeal.m = &ma.cm
		return &ma.ca_VerifiedDeal, nil
	case "Client":
		if ma.s & fieldBit__MarketV0DealProposal_Client != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MarketV0DealProposal_Client}
		}
		ma.s += fieldBit__MarketV0DealProposal_Client
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_Client.w = &ma.w.Client
		ma.ca_Client.m = &ma.cm
		return &ma.ca_Client, nil
	case "Provider":
		if ma.s & fieldBit__MarketV0DealProposal_Provider != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MarketV0DealProposal_Provider}
		}
		ma.s += fieldBit__MarketV0DealProposal_Provider
		ma.state = maState_midValue
		ma.f = 4
		ma.ca_Provider.w = &ma.w.Provider
		ma.ca_Provider.m = &ma.cm
		return &ma.ca_Provider, nil
	case "Label":
		if ma.s & fieldBit__MarketV0DealProposal_Label != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MarketV0DealProposal_Label}
		}
		ma.s += fieldBit__MarketV0DealProposal_Label
		ma.state = maState_midValue
		ma.f = 5
		ma.ca_Label.w = &ma.w.Label
		ma.ca_Label.m = &ma.cm
		return &ma.ca_Label, nil
	case "StartEpoch":
		if ma.s & fieldBit__MarketV0DealProposal_StartEpoch != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MarketV0DealProposal_StartEpoch}
		}
		ma.s += fieldBit__MarketV0DealProposal_StartEpoch
		ma.state = maState_midValue
		ma.f = 6
		ma.ca_StartEpoch.w = &ma.w.StartEpoch
		ma.ca_StartEpoch.m = &ma.cm
		return &ma.ca_StartEpoch, nil
	case "EndEpoch":
		if ma.s & fieldBit__MarketV0DealProposal_EndEpoch != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MarketV0DealProposal_EndEpoch}
		}
		ma.s += fieldBit__MarketV0DealProposal_EndEpoch
		ma.state = maState_midValue
		ma.f = 7
		ma.ca_EndEpoch.w = &ma.w.EndEpoch
		ma.ca_EndEpoch.m = &ma.cm
		return &ma.ca_EndEpoch, nil
	case "StoragePricePerEpoch":
		if ma.s & fieldBit__MarketV0DealProposal_StoragePricePerEpoch != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MarketV0DealProposal_StoragePricePerEpoch}
		}
		ma.s += fieldBit__MarketV0DealProposal_StoragePricePerEpoch
		ma.state = maState_midValue
		ma.f = 8
		ma.ca_StoragePricePerEpoch.w = &ma.w.StoragePricePerEpoch
		ma.ca_StoragePricePerEpoch.m = &ma.cm
		return &ma.ca_StoragePricePerEpoch, nil
	case "ProviderCollateral":
		if ma.s & fieldBit__MarketV0DealProposal_ProviderCollateral != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MarketV0DealProposal_ProviderCollateral}
		}
		ma.s += fieldBit__MarketV0DealProposal_ProviderCollateral
		ma.state = maState_midValue
		ma.f = 9
		ma.ca_ProviderCollateral.w = &ma.w.ProviderCollateral
		ma.ca_ProviderCollateral.m = &ma.cm
		return &ma.ca_ProviderCollateral, nil
	case "ClientCollateral":
		if ma.s & fieldBit__MarketV0DealProposal_ClientCollateral != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MarketV0DealProposal_ClientCollateral}
		}
		ma.s += fieldBit__MarketV0DealProposal_ClientCollateral
		ma.state = maState_midValue
		ma.f = 10
		ma.ca_ClientCollateral.w = &ma.w.ClientCollateral
		ma.ca_ClientCollateral.m = &ma.cm
		return &ma.ca_ClientCollateral, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"types.MarketV0DealProposal", Key:&_String{k}}
	}
}
func (ma *_MarketV0DealProposal__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_MarketV0DealProposal__KeyAssembler)(ma)
}
func (ma *_MarketV0DealProposal__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_PieceCID.w = &ma.w.PieceCID
		ma.ca_PieceCID.m = &ma.cm
		return &ma.ca_PieceCID
	case 1:
		ma.ca_PieceSize.w = &ma.w.PieceSize
		ma.ca_PieceSize.m = &ma.cm
		return &ma.ca_PieceSize
	case 2:
		ma.ca_VerifiedDeal.w = &ma.w.VerifiedDeal
		ma.ca_VerifiedDeal.m = &ma.cm
		return &ma.ca_VerifiedDeal
	case 3:
		ma.ca_Client.w = &ma.w.Client
		ma.ca_Client.m = &ma.cm
		return &ma.ca_Client
	case 4:
		ma.ca_Provider.w = &ma.w.Provider
		ma.ca_Provider.m = &ma.cm
		return &ma.ca_Provider
	case 5:
		ma.ca_Label.w = &ma.w.Label
		ma.ca_Label.m = &ma.cm
		return &ma.ca_Label
	case 6:
		ma.ca_StartEpoch.w = &ma.w.StartEpoch
		ma.ca_StartEpoch.m = &ma.cm
		return &ma.ca_StartEpoch
	case 7:
		ma.ca_EndEpoch.w = &ma.w.EndEpoch
		ma.ca_EndEpoch.m = &ma.cm
		return &ma.ca_EndEpoch
	case 8:
		ma.ca_StoragePricePerEpoch.w = &ma.w.StoragePricePerEpoch
		ma.ca_StoragePricePerEpoch.m = &ma.cm
		return &ma.ca_StoragePricePerEpoch
	case 9:
		ma.ca_ProviderCollateral.w = &ma.w.ProviderCollateral
		ma.ca_ProviderCollateral.m = &ma.cm
		return &ma.ca_ProviderCollateral
	case 10:
		ma.ca_ClientCollateral.w = &ma.w.ClientCollateral
		ma.ca_ClientCollateral.m = &ma.cm
		return &ma.ca_ClientCollateral
	default:
		panic("unreachable")
	}
}
func (ma *_MarketV0DealProposal__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_MarketV0DealProposal__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_MarketV0DealProposal__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _MarketV0DealProposal__KeyAssembler _MarketV0DealProposal__Assembler
func (_MarketV0DealProposal__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"types.MarketV0DealProposal.KeyAssembler"}.BeginMap(0)
}
func (_MarketV0DealProposal__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"types.MarketV0DealProposal.KeyAssembler"}.BeginList(0)
}
func (na *_MarketV0DealProposal__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"types.MarketV0DealProposal.KeyAssembler"}.AssignNull()
}
func (_MarketV0DealProposal__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"types.MarketV0DealProposal.KeyAssembler"}.AssignBool(false)
}
func (_MarketV0DealProposal__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"types.MarketV0DealProposal.KeyAssembler"}.AssignInt(0)
}
func (_MarketV0DealProposal__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"types.MarketV0DealProposal.KeyAssembler"}.AssignFloat(0)
}
func (ka *_MarketV0DealProposal__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "PieceCID":
		if ka.s & fieldBit__MarketV0DealProposal_PieceCID != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MarketV0DealProposal_PieceCID}
		}
		ka.s += fieldBit__MarketV0DealProposal_PieceCID
		ka.state = maState_expectValue
		ka.f = 0
	case "PieceSize":
		if ka.s & fieldBit__MarketV0DealProposal_PieceSize != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MarketV0DealProposal_PieceSize}
		}
		ka.s += fieldBit__MarketV0DealProposal_PieceSize
		ka.state = maState_expectValue
		ka.f = 1
	case "VerifiedDeal":
		if ka.s & fieldBit__MarketV0DealProposal_VerifiedDeal != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MarketV0DealProposal_VerifiedDeal}
		}
		ka.s += fieldBit__MarketV0DealProposal_VerifiedDeal
		ka.state = maState_expectValue
		ka.f = 2
	case "Client":
		if ka.s & fieldBit__MarketV0DealProposal_Client != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MarketV0DealProposal_Client}
		}
		ka.s += fieldBit__MarketV0DealProposal_Client
		ka.state = maState_expectValue
		ka.f = 3
	case "Provider":
		if ka.s & fieldBit__MarketV0DealProposal_Provider != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MarketV0DealProposal_Provider}
		}
		ka.s += fieldBit__MarketV0DealProposal_Provider
		ka.state = maState_expectValue
		ka.f = 4
	case "Label":
		if ka.s & fieldBit__MarketV0DealProposal_Label != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MarketV0DealProposal_Label}
		}
		ka.s += fieldBit__MarketV0DealProposal_Label
		ka.state = maState_expectValue
		ka.f = 5
	case "StartEpoch":
		if ka.s & fieldBit__MarketV0DealProposal_StartEpoch != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MarketV0DealProposal_StartEpoch}
		}
		ka.s += fieldBit__MarketV0DealProposal_StartEpoch
		ka.state = maState_expectValue
		ka.f = 6
	case "EndEpoch":
		if ka.s & fieldBit__MarketV0DealProposal_EndEpoch != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MarketV0DealProposal_EndEpoch}
		}
		ka.s += fieldBit__MarketV0DealProposal_EndEpoch
		ka.state = maState_expectValue
		ka.f = 7
	case "StoragePricePerEpoch":
		if ka.s & fieldBit__MarketV0DealProposal_StoragePricePerEpoch != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MarketV0DealProposal_StoragePricePerEpoch}
		}
		ka.s += fieldBit__MarketV0DealProposal_StoragePricePerEpoch
		ka.state = maState_expectValue
		ka.f = 8
	case "ProviderCollateral":
		if ka.s & fieldBit__MarketV0DealProposal_ProviderCollateral != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MarketV0DealProposal_ProviderCollateral}
		}
		ka.s += fieldBit__MarketV0DealProposal_ProviderCollateral
		ka.state = maState_expectValue
		ka.f = 9
	case "ClientCollateral":
		if ka.s & fieldBit__MarketV0DealProposal_ClientCollateral != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MarketV0DealProposal_ClientCollateral}
		}
		ka.s += fieldBit__MarketV0DealProposal_ClientCollateral
		ka.state = maState_expectValue
		ka.f = 10
	default:
		return ipld.ErrInvalidKey{TypeName:"types.MarketV0DealProposal", Key:&_String{k}}
	}
	return nil
}
func (_MarketV0DealProposal__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"types.MarketV0DealProposal.KeyAssembler"}.AssignBytes(nil)
}
func (_MarketV0DealProposal__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"types.MarketV0DealProposal.KeyAssembler"}.AssignLink(nil)
}
func (ka *_MarketV0DealProposal__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_MarketV0DealProposal__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (MarketV0DealProposal) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n MarketV0DealProposal) Representation() ipld.Node {
	return (*_MarketV0DealProposal__Repr)(n)
}
type _MarketV0DealProposal__Repr _MarketV0DealProposal
var _ ipld.Node = &_MarketV0DealProposal__Repr{}
func (_MarketV0DealProposal__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_List
}
func (_MarketV0DealProposal__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"types.MarketV0DealProposal.Repr"}.LookupByString("")
}
func (n *_MarketV0DealProposal__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ki, err := key.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(ki)
}
func (n *_MarketV0DealProposal__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	switch idx {
	case 0:
		return n.PieceCID.Representation(), nil
	case 1:
		return n.PieceSize.Representation(), nil
	case 2:
		return n.VerifiedDeal.Representation(), nil
	case 3:
		return n.Client.Representation(), nil
	case 4:
		return n.Provider.Representation(), nil
	case 5:
		return n.Label.Representation(), nil
	case 6:
		return n.StartEpoch.Representation(), nil
	case 7:
		return n.EndEpoch.Representation(), nil
	case 8:
		return n.StoragePricePerEpoch.Representation(), nil
	case 9:
		return n.ProviderCollateral.Representation(), nil
	case 10:
		return n.ClientCollateral.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(idx)}
	}
}
func (n _MarketV0DealProposal__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "types.MarketV0DealProposal.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_MarketV0DealProposal__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (n *_MarketV0DealProposal__Repr) ListIterator() ipld.ListIterator {
	return &_MarketV0DealProposal__ReprListItr{n, 0}
}

type _MarketV0DealProposal__ReprListItr struct {
	n   *_MarketV0DealProposal__Repr
	idx int
	
}

func (itr *_MarketV0DealProposal__ReprListItr) Next() (idx int, v ipld.Node, err error) {
	if itr.idx >= 11 {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		idx = itr.idx
		v = itr.n.PieceCID.Representation()
	case 1:
		idx = itr.idx
		v = itr.n.PieceSize.Representation()
	case 2:
		idx = itr.idx
		v = itr.n.VerifiedDeal.Representation()
	case 3:
		idx = itr.idx
		v = itr.n.Client.Representation()
	case 4:
		idx = itr.idx
		v = itr.n.Provider.Representation()
	case 5:
		idx = itr.idx
		v = itr.n.Label.Representation()
	case 6:
		idx = itr.idx
		v = itr.n.StartEpoch.Representation()
	case 7:
		idx = itr.idx
		v = itr.n.EndEpoch.Representation()
	case 8:
		idx = itr.idx
		v = itr.n.StoragePricePerEpoch.Representation()
	case 9:
		idx = itr.idx
		v = itr.n.ProviderCollateral.Representation()
	case 10:
		idx = itr.idx
		v = itr.n.ClientCollateral.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_MarketV0DealProposal__ReprListItr) Done() bool {
	return itr.idx >= 11
}

func (rn *_MarketV0DealProposal__Repr) Length() int {
	l := 11
	return l
}
func (_MarketV0DealProposal__Repr) IsAbsent() bool {
	return false
}
func (_MarketV0DealProposal__Repr) IsNull() bool {
	return false
}
func (_MarketV0DealProposal__Repr) AsBool() (bool, error) {
	return mixins.List{"types.MarketV0DealProposal.Repr"}.AsBool()
}
func (_MarketV0DealProposal__Repr) AsInt() (int, error) {
	return mixins.List{"types.MarketV0DealProposal.Repr"}.AsInt()
}
func (_MarketV0DealProposal__Repr) AsFloat() (float64, error) {
	return mixins.List{"types.MarketV0DealProposal.Repr"}.AsFloat()
}
func (_MarketV0DealProposal__Repr) AsString() (string, error) {
	return mixins.List{"types.MarketV0DealProposal.Repr"}.AsString()
}
func (_MarketV0DealProposal__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"types.MarketV0DealProposal.Repr"}.AsBytes()
}
func (_MarketV0DealProposal__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"types.MarketV0DealProposal.Repr"}.AsLink()
}
func (_MarketV0DealProposal__Repr) Prototype() ipld.NodePrototype {
	return _MarketV0DealProposal__ReprPrototype{}
}
type _MarketV0DealProposal__ReprPrototype struct{}

func (_MarketV0DealProposal__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _MarketV0DealProposal__ReprBuilder
	nb.Reset()
	return &nb
}
type _MarketV0DealProposal__ReprBuilder struct {
	_MarketV0DealProposal__ReprAssembler
}
func (nb *_MarketV0DealProposal__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_MarketV0DealProposal__ReprBuilder) Reset() {
	var w _MarketV0DealProposal
	var m schema.Maybe
	*nb = _MarketV0DealProposal__ReprBuilder{_MarketV0DealProposal__ReprAssembler{w: &w, m: &m}}
}
type _MarketV0DealProposal__ReprAssembler struct {
	w *_MarketV0DealProposal
	m *schema.Maybe
	state laState
	f int

	cm schema.Maybe
	ca_PieceCID _Link__ReprAssembler
	ca_PieceSize _PaddedPieceSize__ReprAssembler
	ca_VerifiedDeal _Bool__ReprAssembler
	ca_Client _Address__ReprAssembler
	ca_Provider _Address__ReprAssembler
	ca_Label _String__ReprAssembler
	ca_StartEpoch _ChainEpoch__ReprAssembler
	ca_EndEpoch _ChainEpoch__ReprAssembler
	ca_StoragePricePerEpoch _BigInt__ReprAssembler
	ca_ProviderCollateral _BigInt__ReprAssembler
	ca_ClientCollateral _BigInt__ReprAssembler
	}

func (na *_MarketV0DealProposal__ReprAssembler) reset() {
	na.state = laState_initial
	na.f = 0
	na.ca_PieceCID.reset()
	na.ca_PieceSize.reset()
	na.ca_VerifiedDeal.reset()
	na.ca_Client.reset()
	na.ca_Provider.reset()
	na.ca_Label.reset()
	na.ca_StartEpoch.reset()
	na.ca_EndEpoch.reset()
	na.ca_StoragePricePerEpoch.reset()
	na.ca_ProviderCollateral.reset()
	na.ca_ClientCollateral.reset()
}
func (_MarketV0DealProposal__ReprAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"types.MarketV0DealProposal.Repr"}.BeginMap(0)
}
func (na *_MarketV0DealProposal__ReprAssembler) BeginList(int) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_MarketV0DealProposal{}
	}
	return na, nil
}
func (na *_MarketV0DealProposal__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"types.MarketV0DealProposal.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_MarketV0DealProposal__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"types.MarketV0DealProposal.Repr"}.AssignBool(false)
}
func (_MarketV0DealProposal__ReprAssembler) AssignInt(int) error {
	return mixins.ListAssembler{"types.MarketV0DealProposal.Repr"}.AssignInt(0)
}
func (_MarketV0DealProposal__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"types.MarketV0DealProposal.Repr"}.AssignFloat(0)
}
func (_MarketV0DealProposal__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"types.MarketV0DealProposal.Repr"}.AssignString("")
}
func (_MarketV0DealProposal__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"types.MarketV0DealProposal.Repr"}.AssignBytes(nil)
}
func (_MarketV0DealProposal__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"types.MarketV0DealProposal.Repr"}.AssignLink(nil)
}
func (na *_MarketV0DealProposal__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_MarketV0DealProposal); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_List {
		return ipld.ErrWrongKind{TypeName: "types.MarketV0DealProposal.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustList, ActualKind: v.ReprKind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_MarketV0DealProposal__ReprAssembler) Prototype() ipld.NodePrototype {
	return _MarketV0DealProposal__ReprPrototype{}
}
func (la *_MarketV0DealProposal__ReprAssembler) valueFinishTidy() bool {
	switch la.f {
	case 0:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 1:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 2:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 3:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 4:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 5:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 6:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 7:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 8:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 9:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 10:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (la *_MarketV0DealProposal__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	if la.f >= 11 {
		return _ErrorThunkAssembler{schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(11)}}
	}
	la.state = laState_midValue
	switch la.f {
	case 0:
		la.ca_PieceCID.w = &la.w.PieceCID
		la.ca_PieceCID.m = &la.cm
		return &la.ca_PieceCID
	case 1:
		la.ca_PieceSize.w = &la.w.PieceSize
		la.ca_PieceSize.m = &la.cm
		return &la.ca_PieceSize
	case 2:
		la.ca_VerifiedDeal.w = &la.w.VerifiedDeal
		la.ca_VerifiedDeal.m = &la.cm
		return &la.ca_VerifiedDeal
	case 3:
		la.ca_Client.w = &la.w.Client
		la.ca_Client.m = &la.cm
		return &la.ca_Client
	case 4:
		la.ca_Provider.w = &la.w.Provider
		la.ca_Provider.m = &la.cm
		return &la.ca_Provider
	case 5:
		la.ca_Label.w = &la.w.Label
		la.ca_Label.m = &la.cm
		return &la.ca_Label
	case 6:
		la.ca_StartEpoch.w = &la.w.StartEpoch
		la.ca_StartEpoch.m = &la.cm
		return &la.ca_StartEpoch
	case 7:
		la.ca_EndEpoch.w = &la.w.EndEpoch
		la.ca_EndEpoch.m = &la.cm
		return &la.ca_EndEpoch
	case 8:
		la.ca_StoragePricePerEpoch.w = &la.w.StoragePricePerEpoch
		la.ca_StoragePricePerEpoch.m = &la.cm
		return &la.ca_StoragePricePerEpoch
	case 9:
		la.ca_ProviderCollateral.w = &la.w.ProviderCollateral
		la.ca_ProviderCollateral.m = &la.cm
		return &la.ca_ProviderCollateral
	case 10:
		la.ca_ClientCollateral.w = &la.w.ClientCollateral
		la.ca_ClientCollateral.m = &la.cm
		return &la.ca_ClientCollateral
	default:
		panic("unreachable")
	}
}
func (la *_MarketV0DealProposal__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_MarketV0DealProposal__ReprAssembler) ValuePrototype(_ int) ipld.NodePrototype {
	panic("todo structbuilder tuplerepr valueprototype")
}
