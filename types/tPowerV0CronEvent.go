package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _PowerV0CronEvent struct {
	MinerAddr _Address
	CallbackPayload _Bytes
}
type PowerV0CronEvent = *_PowerV0CronEvent

func (n _PowerV0CronEvent) FieldMinerAddr()	Address {
	return &n.MinerAddr
}
func (n _PowerV0CronEvent) FieldCallbackPayload()	Bytes {
	return &n.CallbackPayload
}
type _PowerV0CronEvent__Maybe struct {
	m schema.Maybe
	v PowerV0CronEvent
}
type MaybePowerV0CronEvent = *_PowerV0CronEvent__Maybe

func (m MaybePowerV0CronEvent) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybePowerV0CronEvent) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybePowerV0CronEvent) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybePowerV0CronEvent) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybePowerV0CronEvent) Must() PowerV0CronEvent {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__PowerV0CronEvent_MinerAddr = _String{"MinerAddr"}
	fieldName__PowerV0CronEvent_CallbackPayload = _String{"CallbackPayload"}
)
var _ ipld.Node = (PowerV0CronEvent)(&_PowerV0CronEvent{})
var _ schema.TypedNode = (PowerV0CronEvent)(&_PowerV0CronEvent{})
func (PowerV0CronEvent) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n PowerV0CronEvent) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "MinerAddr":
		return &n.MinerAddr, nil
	case "CallbackPayload":
		return &n.CallbackPayload, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n PowerV0CronEvent) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (PowerV0CronEvent) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"types.PowerV0CronEvent"}.LookupByIndex(0)
}
func (n PowerV0CronEvent) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n PowerV0CronEvent) MapIterator() ipld.MapIterator {
	return &_PowerV0CronEvent__MapItr{n, 0}
}

type _PowerV0CronEvent__MapItr struct {
	n PowerV0CronEvent
	idx  int
}

func (itr *_PowerV0CronEvent__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 2 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__PowerV0CronEvent_MinerAddr
		v = &itr.n.MinerAddr
	case 1:
		k = &fieldName__PowerV0CronEvent_CallbackPayload
		v = &itr.n.CallbackPayload
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_PowerV0CronEvent__MapItr) Done() bool {
	return itr.idx >= 2
}

func (PowerV0CronEvent) ListIterator() ipld.ListIterator {
	return nil
}
func (PowerV0CronEvent) Length() int {
	return 2
}
func (PowerV0CronEvent) IsAbsent() bool {
	return false
}
func (PowerV0CronEvent) IsNull() bool {
	return false
}
func (PowerV0CronEvent) AsBool() (bool, error) {
	return mixins.Map{"types.PowerV0CronEvent"}.AsBool()
}
func (PowerV0CronEvent) AsInt() (int, error) {
	return mixins.Map{"types.PowerV0CronEvent"}.AsInt()
}
func (PowerV0CronEvent) AsFloat() (float64, error) {
	return mixins.Map{"types.PowerV0CronEvent"}.AsFloat()
}
func (PowerV0CronEvent) AsString() (string, error) {
	return mixins.Map{"types.PowerV0CronEvent"}.AsString()
}
func (PowerV0CronEvent) AsBytes() ([]byte, error) {
	return mixins.Map{"types.PowerV0CronEvent"}.AsBytes()
}
func (PowerV0CronEvent) AsLink() (ipld.Link, error) {
	return mixins.Map{"types.PowerV0CronEvent"}.AsLink()
}
func (PowerV0CronEvent) Prototype() ipld.NodePrototype {
	return _PowerV0CronEvent__Prototype{}
}
type _PowerV0CronEvent__Prototype struct{}

func (_PowerV0CronEvent__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _PowerV0CronEvent__Builder
	nb.Reset()
	return &nb
}
type _PowerV0CronEvent__Builder struct {
	_PowerV0CronEvent__Assembler
}
func (nb *_PowerV0CronEvent__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_PowerV0CronEvent__Builder) Reset() {
	var w _PowerV0CronEvent
	var m schema.Maybe
	*nb = _PowerV0CronEvent__Builder{_PowerV0CronEvent__Assembler{w: &w, m: &m}}
}
type _PowerV0CronEvent__Assembler struct {
	w *_PowerV0CronEvent
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_MinerAddr _Address__Assembler
	ca_CallbackPayload _Bytes__Assembler
	}

func (na *_PowerV0CronEvent__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_MinerAddr.reset()
	na.ca_CallbackPayload.reset()
}

var (
	fieldBit__PowerV0CronEvent_MinerAddr = 1 << 0
	fieldBit__PowerV0CronEvent_CallbackPayload = 1 << 1
	fieldBits__PowerV0CronEvent_sufficient = 0 + 1 << 0 + 1 << 1
)
func (na *_PowerV0CronEvent__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_PowerV0CronEvent{}
	}
	return na, nil
}
func (_PowerV0CronEvent__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"types.PowerV0CronEvent"}.BeginList(0)
}
func (na *_PowerV0CronEvent__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"types.PowerV0CronEvent"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_PowerV0CronEvent__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"types.PowerV0CronEvent"}.AssignBool(false)
}
func (_PowerV0CronEvent__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"types.PowerV0CronEvent"}.AssignInt(0)
}
func (_PowerV0CronEvent__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"types.PowerV0CronEvent"}.AssignFloat(0)
}
func (_PowerV0CronEvent__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"types.PowerV0CronEvent"}.AssignString("")
}
func (_PowerV0CronEvent__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"types.PowerV0CronEvent"}.AssignBytes(nil)
}
func (_PowerV0CronEvent__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"types.PowerV0CronEvent"}.AssignLink(nil)
}
func (na *_PowerV0CronEvent__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_PowerV0CronEvent); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "types.PowerV0CronEvent", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_PowerV0CronEvent__Assembler) Prototype() ipld.NodePrototype {
	return _PowerV0CronEvent__Prototype{}
}
func (ma *_PowerV0CronEvent__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_MinerAddr.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_CallbackPayload.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_PowerV0CronEvent__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "MinerAddr":
		if ma.s & fieldBit__PowerV0CronEvent_MinerAddr != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__PowerV0CronEvent_MinerAddr}
		}
		ma.s += fieldBit__PowerV0CronEvent_MinerAddr
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_MinerAddr.w = &ma.w.MinerAddr
		ma.ca_MinerAddr.m = &ma.cm
		return &ma.ca_MinerAddr, nil
	case "CallbackPayload":
		if ma.s & fieldBit__PowerV0CronEvent_CallbackPayload != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__PowerV0CronEvent_CallbackPayload}
		}
		ma.s += fieldBit__PowerV0CronEvent_CallbackPayload
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_CallbackPayload.w = &ma.w.CallbackPayload
		ma.ca_CallbackPayload.m = &ma.cm
		return &ma.ca_CallbackPayload, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"types.PowerV0CronEvent", Key:&_String{k}}
	}
}
func (ma *_PowerV0CronEvent__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_PowerV0CronEvent__KeyAssembler)(ma)
}
func (ma *_PowerV0CronEvent__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_MinerAddr.w = &ma.w.MinerAddr
		ma.ca_MinerAddr.m = &ma.cm
		return &ma.ca_MinerAddr
	case 1:
		ma.ca_CallbackPayload.w = &ma.w.CallbackPayload
		ma.ca_CallbackPayload.m = &ma.cm
		return &ma.ca_CallbackPayload
	default:
		panic("unreachable")
	}
}
func (ma *_PowerV0CronEvent__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_PowerV0CronEvent__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_PowerV0CronEvent__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _PowerV0CronEvent__KeyAssembler _PowerV0CronEvent__Assembler
func (_PowerV0CronEvent__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"types.PowerV0CronEvent.KeyAssembler"}.BeginMap(0)
}
func (_PowerV0CronEvent__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"types.PowerV0CronEvent.KeyAssembler"}.BeginList(0)
}
func (na *_PowerV0CronEvent__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"types.PowerV0CronEvent.KeyAssembler"}.AssignNull()
}
func (_PowerV0CronEvent__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"types.PowerV0CronEvent.KeyAssembler"}.AssignBool(false)
}
func (_PowerV0CronEvent__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"types.PowerV0CronEvent.KeyAssembler"}.AssignInt(0)
}
func (_PowerV0CronEvent__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"types.PowerV0CronEvent.KeyAssembler"}.AssignFloat(0)
}
func (ka *_PowerV0CronEvent__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "MinerAddr":
		if ka.s & fieldBit__PowerV0CronEvent_MinerAddr != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__PowerV0CronEvent_MinerAddr}
		}
		ka.s += fieldBit__PowerV0CronEvent_MinerAddr
		ka.state = maState_expectValue
		ka.f = 0
	case "CallbackPayload":
		if ka.s & fieldBit__PowerV0CronEvent_CallbackPayload != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__PowerV0CronEvent_CallbackPayload}
		}
		ka.s += fieldBit__PowerV0CronEvent_CallbackPayload
		ka.state = maState_expectValue
		ka.f = 1
	default:
		return ipld.ErrInvalidKey{TypeName:"types.PowerV0CronEvent", Key:&_String{k}}
	}
	return nil
}
func (_PowerV0CronEvent__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"types.PowerV0CronEvent.KeyAssembler"}.AssignBytes(nil)
}
func (_PowerV0CronEvent__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"types.PowerV0CronEvent.KeyAssembler"}.AssignLink(nil)
}
func (ka *_PowerV0CronEvent__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_PowerV0CronEvent__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (PowerV0CronEvent) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n PowerV0CronEvent) Representation() ipld.Node {
	return (*_PowerV0CronEvent__Repr)(n)
}
type _PowerV0CronEvent__Repr _PowerV0CronEvent
var _ ipld.Node = &_PowerV0CronEvent__Repr{}
func (_PowerV0CronEvent__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_List
}
func (_PowerV0CronEvent__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"types.PowerV0CronEvent.Repr"}.LookupByString("")
}
func (n *_PowerV0CronEvent__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ki, err := key.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(ki)
}
func (n *_PowerV0CronEvent__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	switch idx {
	case 0:
		return n.MinerAddr.Representation(), nil
	case 1:
		return n.CallbackPayload.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(idx)}
	}
}
func (n _PowerV0CronEvent__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "types.PowerV0CronEvent.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_PowerV0CronEvent__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (n *_PowerV0CronEvent__Repr) ListIterator() ipld.ListIterator {
	return &_PowerV0CronEvent__ReprListItr{n, 0}
}

type _PowerV0CronEvent__ReprListItr struct {
	n   *_PowerV0CronEvent__Repr
	idx int
	
}

func (itr *_PowerV0CronEvent__ReprListItr) Next() (idx int, v ipld.Node, err error) {
	if itr.idx >= 2 {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		idx = itr.idx
		v = itr.n.MinerAddr.Representation()
	case 1:
		idx = itr.idx
		v = itr.n.CallbackPayload.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_PowerV0CronEvent__ReprListItr) Done() bool {
	return itr.idx >= 2
}

func (rn *_PowerV0CronEvent__Repr) Length() int {
	l := 2
	return l
}
func (_PowerV0CronEvent__Repr) IsAbsent() bool {
	return false
}
func (_PowerV0CronEvent__Repr) IsNull() bool {
	return false
}
func (_PowerV0CronEvent__Repr) AsBool() (bool, error) {
	return mixins.List{"types.PowerV0CronEvent.Repr"}.AsBool()
}
func (_PowerV0CronEvent__Repr) AsInt() (int, error) {
	return mixins.List{"types.PowerV0CronEvent.Repr"}.AsInt()
}
func (_PowerV0CronEvent__Repr) AsFloat() (float64, error) {
	return mixins.List{"types.PowerV0CronEvent.Repr"}.AsFloat()
}
func (_PowerV0CronEvent__Repr) AsString() (string, error) {
	return mixins.List{"types.PowerV0CronEvent.Repr"}.AsString()
}
func (_PowerV0CronEvent__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"types.PowerV0CronEvent.Repr"}.AsBytes()
}
func (_PowerV0CronEvent__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"types.PowerV0CronEvent.Repr"}.AsLink()
}
func (_PowerV0CronEvent__Repr) Prototype() ipld.NodePrototype {
	return _PowerV0CronEvent__ReprPrototype{}
}
type _PowerV0CronEvent__ReprPrototype struct{}

func (_PowerV0CronEvent__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _PowerV0CronEvent__ReprBuilder
	nb.Reset()
	return &nb
}
type _PowerV0CronEvent__ReprBuilder struct {
	_PowerV0CronEvent__ReprAssembler
}
func (nb *_PowerV0CronEvent__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_PowerV0CronEvent__ReprBuilder) Reset() {
	var w _PowerV0CronEvent
	var m schema.Maybe
	*nb = _PowerV0CronEvent__ReprBuilder{_PowerV0CronEvent__ReprAssembler{w: &w, m: &m}}
}
type _PowerV0CronEvent__ReprAssembler struct {
	w *_PowerV0CronEvent
	m *schema.Maybe
	state laState
	f int

	cm schema.Maybe
	ca_MinerAddr _Address__ReprAssembler
	ca_CallbackPayload _Bytes__ReprAssembler
	}

func (na *_PowerV0CronEvent__ReprAssembler) reset() {
	na.state = laState_initial
	na.f = 0
	na.ca_MinerAddr.reset()
	na.ca_CallbackPayload.reset()
}
func (_PowerV0CronEvent__ReprAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"types.PowerV0CronEvent.Repr"}.BeginMap(0)
}
func (na *_PowerV0CronEvent__ReprAssembler) BeginList(int) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_PowerV0CronEvent{}
	}
	return na, nil
}
func (na *_PowerV0CronEvent__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"types.PowerV0CronEvent.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_PowerV0CronEvent__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"types.PowerV0CronEvent.Repr"}.AssignBool(false)
}
func (_PowerV0CronEvent__ReprAssembler) AssignInt(int) error {
	return mixins.ListAssembler{"types.PowerV0CronEvent.Repr"}.AssignInt(0)
}
func (_PowerV0CronEvent__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"types.PowerV0CronEvent.Repr"}.AssignFloat(0)
}
func (_PowerV0CronEvent__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"types.PowerV0CronEvent.Repr"}.AssignString("")
}
func (_PowerV0CronEvent__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"types.PowerV0CronEvent.Repr"}.AssignBytes(nil)
}
func (_PowerV0CronEvent__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"types.PowerV0CronEvent.Repr"}.AssignLink(nil)
}
func (na *_PowerV0CronEvent__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_PowerV0CronEvent); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_List {
		return ipld.ErrWrongKind{TypeName: "types.PowerV0CronEvent.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustList, ActualKind: v.ReprKind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_PowerV0CronEvent__ReprAssembler) Prototype() ipld.NodePrototype {
	return _PowerV0CronEvent__ReprPrototype{}
}
func (la *_PowerV0CronEvent__ReprAssembler) valueFinishTidy() bool {
	switch la.f {
	case 0:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 1:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (la *_PowerV0CronEvent__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	if la.f >= 2 {
		return _ErrorThunkAssembler{schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(2)}}
	}
	la.state = laState_midValue
	switch la.f {
	case 0:
		la.ca_MinerAddr.w = &la.w.MinerAddr
		la.ca_MinerAddr.m = &la.cm
		return &la.ca_MinerAddr
	case 1:
		la.ca_CallbackPayload.w = &la.w.CallbackPayload
		la.ca_CallbackPayload.m = &la.cm
		return &la.ca_CallbackPayload
	default:
		panic("unreachable")
	}
}
func (la *_PowerV0CronEvent__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_PowerV0CronEvent__ReprAssembler) ValuePrototype(_ int) ipld.NodePrototype {
	panic("todo structbuilder tuplerepr valueprototype")
}
