package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _MessageParamsMinerChangeMultiaddrs struct {
	NewMultiaddrs _List__Multiaddrs
}
type MessageParamsMinerChangeMultiaddrs = *_MessageParamsMinerChangeMultiaddrs

func (n _MessageParamsMinerChangeMultiaddrs) FieldNewMultiaddrs()	List__Multiaddrs {
	return &n.NewMultiaddrs
}
type _MessageParamsMinerChangeMultiaddrs__Maybe struct {
	m schema.Maybe
	v MessageParamsMinerChangeMultiaddrs
}
type MaybeMessageParamsMinerChangeMultiaddrs = *_MessageParamsMinerChangeMultiaddrs__Maybe

func (m MaybeMessageParamsMinerChangeMultiaddrs) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeMessageParamsMinerChangeMultiaddrs) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeMessageParamsMinerChangeMultiaddrs) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeMessageParamsMinerChangeMultiaddrs) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeMessageParamsMinerChangeMultiaddrs) Must() MessageParamsMinerChangeMultiaddrs {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__MessageParamsMinerChangeMultiaddrs_NewMultiaddrs = _String{"NewMultiaddrs"}
)
var _ ipld.Node = (MessageParamsMinerChangeMultiaddrs)(&_MessageParamsMinerChangeMultiaddrs{})
var _ schema.TypedNode = (MessageParamsMinerChangeMultiaddrs)(&_MessageParamsMinerChangeMultiaddrs{})
func (MessageParamsMinerChangeMultiaddrs) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n MessageParamsMinerChangeMultiaddrs) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "NewMultiaddrs":
		return &n.NewMultiaddrs, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n MessageParamsMinerChangeMultiaddrs) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (MessageParamsMinerChangeMultiaddrs) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"types.MessageParamsMinerChangeMultiaddrs"}.LookupByIndex(0)
}
func (n MessageParamsMinerChangeMultiaddrs) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n MessageParamsMinerChangeMultiaddrs) MapIterator() ipld.MapIterator {
	return &_MessageParamsMinerChangeMultiaddrs__MapItr{n, 0}
}

type _MessageParamsMinerChangeMultiaddrs__MapItr struct {
	n MessageParamsMinerChangeMultiaddrs
	idx  int
}

func (itr *_MessageParamsMinerChangeMultiaddrs__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 1 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__MessageParamsMinerChangeMultiaddrs_NewMultiaddrs
		v = &itr.n.NewMultiaddrs
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_MessageParamsMinerChangeMultiaddrs__MapItr) Done() bool {
	return itr.idx >= 1
}

func (MessageParamsMinerChangeMultiaddrs) ListIterator() ipld.ListIterator {
	return nil
}
func (MessageParamsMinerChangeMultiaddrs) Length() int {
	return 1
}
func (MessageParamsMinerChangeMultiaddrs) IsAbsent() bool {
	return false
}
func (MessageParamsMinerChangeMultiaddrs) IsNull() bool {
	return false
}
func (MessageParamsMinerChangeMultiaddrs) AsBool() (bool, error) {
	return mixins.Map{"types.MessageParamsMinerChangeMultiaddrs"}.AsBool()
}
func (MessageParamsMinerChangeMultiaddrs) AsInt() (int, error) {
	return mixins.Map{"types.MessageParamsMinerChangeMultiaddrs"}.AsInt()
}
func (MessageParamsMinerChangeMultiaddrs) AsFloat() (float64, error) {
	return mixins.Map{"types.MessageParamsMinerChangeMultiaddrs"}.AsFloat()
}
func (MessageParamsMinerChangeMultiaddrs) AsString() (string, error) {
	return mixins.Map{"types.MessageParamsMinerChangeMultiaddrs"}.AsString()
}
func (MessageParamsMinerChangeMultiaddrs) AsBytes() ([]byte, error) {
	return mixins.Map{"types.MessageParamsMinerChangeMultiaddrs"}.AsBytes()
}
func (MessageParamsMinerChangeMultiaddrs) AsLink() (ipld.Link, error) {
	return mixins.Map{"types.MessageParamsMinerChangeMultiaddrs"}.AsLink()
}
func (MessageParamsMinerChangeMultiaddrs) Prototype() ipld.NodePrototype {
	return _MessageParamsMinerChangeMultiaddrs__Prototype{}
}
type _MessageParamsMinerChangeMultiaddrs__Prototype struct{}

func (_MessageParamsMinerChangeMultiaddrs__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _MessageParamsMinerChangeMultiaddrs__Builder
	nb.Reset()
	return &nb
}
type _MessageParamsMinerChangeMultiaddrs__Builder struct {
	_MessageParamsMinerChangeMultiaddrs__Assembler
}
func (nb *_MessageParamsMinerChangeMultiaddrs__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_MessageParamsMinerChangeMultiaddrs__Builder) Reset() {
	var w _MessageParamsMinerChangeMultiaddrs
	var m schema.Maybe
	*nb = _MessageParamsMinerChangeMultiaddrs__Builder{_MessageParamsMinerChangeMultiaddrs__Assembler{w: &w, m: &m}}
}
type _MessageParamsMinerChangeMultiaddrs__Assembler struct {
	w *_MessageParamsMinerChangeMultiaddrs
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_NewMultiaddrs _List__Multiaddrs__Assembler
	}

func (na *_MessageParamsMinerChangeMultiaddrs__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_NewMultiaddrs.reset()
}

var (
	fieldBit__MessageParamsMinerChangeMultiaddrs_NewMultiaddrs = 1 << 0
	fieldBits__MessageParamsMinerChangeMultiaddrs_sufficient = 0 + 1 << 0
)
func (na *_MessageParamsMinerChangeMultiaddrs__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_MessageParamsMinerChangeMultiaddrs{}
	}
	return na, nil
}
func (_MessageParamsMinerChangeMultiaddrs__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"types.MessageParamsMinerChangeMultiaddrs"}.BeginList(0)
}
func (na *_MessageParamsMinerChangeMultiaddrs__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"types.MessageParamsMinerChangeMultiaddrs"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_MessageParamsMinerChangeMultiaddrs__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"types.MessageParamsMinerChangeMultiaddrs"}.AssignBool(false)
}
func (_MessageParamsMinerChangeMultiaddrs__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"types.MessageParamsMinerChangeMultiaddrs"}.AssignInt(0)
}
func (_MessageParamsMinerChangeMultiaddrs__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"types.MessageParamsMinerChangeMultiaddrs"}.AssignFloat(0)
}
func (_MessageParamsMinerChangeMultiaddrs__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"types.MessageParamsMinerChangeMultiaddrs"}.AssignString("")
}
func (_MessageParamsMinerChangeMultiaddrs__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"types.MessageParamsMinerChangeMultiaddrs"}.AssignBytes(nil)
}
func (_MessageParamsMinerChangeMultiaddrs__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"types.MessageParamsMinerChangeMultiaddrs"}.AssignLink(nil)
}
func (na *_MessageParamsMinerChangeMultiaddrs__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_MessageParamsMinerChangeMultiaddrs); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "types.MessageParamsMinerChangeMultiaddrs", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_MessageParamsMinerChangeMultiaddrs__Assembler) Prototype() ipld.NodePrototype {
	return _MessageParamsMinerChangeMultiaddrs__Prototype{}
}
func (ma *_MessageParamsMinerChangeMultiaddrs__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_NewMultiaddrs.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_MessageParamsMinerChangeMultiaddrs__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "NewMultiaddrs":
		if ma.s & fieldBit__MessageParamsMinerChangeMultiaddrs_NewMultiaddrs != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MessageParamsMinerChangeMultiaddrs_NewMultiaddrs}
		}
		ma.s += fieldBit__MessageParamsMinerChangeMultiaddrs_NewMultiaddrs
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_NewMultiaddrs.w = &ma.w.NewMultiaddrs
		ma.ca_NewMultiaddrs.m = &ma.cm
		return &ma.ca_NewMultiaddrs, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"types.MessageParamsMinerChangeMultiaddrs", Key:&_String{k}}
	}
}
func (ma *_MessageParamsMinerChangeMultiaddrs__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_MessageParamsMinerChangeMultiaddrs__KeyAssembler)(ma)
}
func (ma *_MessageParamsMinerChangeMultiaddrs__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_NewMultiaddrs.w = &ma.w.NewMultiaddrs
		ma.ca_NewMultiaddrs.m = &ma.cm
		return &ma.ca_NewMultiaddrs
	default:
		panic("unreachable")
	}
}
func (ma *_MessageParamsMinerChangeMultiaddrs__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_MessageParamsMinerChangeMultiaddrs__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_MessageParamsMinerChangeMultiaddrs__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _MessageParamsMinerChangeMultiaddrs__KeyAssembler _MessageParamsMinerChangeMultiaddrs__Assembler
func (_MessageParamsMinerChangeMultiaddrs__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"types.MessageParamsMinerChangeMultiaddrs.KeyAssembler"}.BeginMap(0)
}
func (_MessageParamsMinerChangeMultiaddrs__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"types.MessageParamsMinerChangeMultiaddrs.KeyAssembler"}.BeginList(0)
}
func (na *_MessageParamsMinerChangeMultiaddrs__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"types.MessageParamsMinerChangeMultiaddrs.KeyAssembler"}.AssignNull()
}
func (_MessageParamsMinerChangeMultiaddrs__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"types.MessageParamsMinerChangeMultiaddrs.KeyAssembler"}.AssignBool(false)
}
func (_MessageParamsMinerChangeMultiaddrs__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"types.MessageParamsMinerChangeMultiaddrs.KeyAssembler"}.AssignInt(0)
}
func (_MessageParamsMinerChangeMultiaddrs__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"types.MessageParamsMinerChangeMultiaddrs.KeyAssembler"}.AssignFloat(0)
}
func (ka *_MessageParamsMinerChangeMultiaddrs__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "NewMultiaddrs":
		if ka.s & fieldBit__MessageParamsMinerChangeMultiaddrs_NewMultiaddrs != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MessageParamsMinerChangeMultiaddrs_NewMultiaddrs}
		}
		ka.s += fieldBit__MessageParamsMinerChangeMultiaddrs_NewMultiaddrs
		ka.state = maState_expectValue
		ka.f = 0
	default:
		return ipld.ErrInvalidKey{TypeName:"types.MessageParamsMinerChangeMultiaddrs", Key:&_String{k}}
	}
	return nil
}
func (_MessageParamsMinerChangeMultiaddrs__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"types.MessageParamsMinerChangeMultiaddrs.KeyAssembler"}.AssignBytes(nil)
}
func (_MessageParamsMinerChangeMultiaddrs__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"types.MessageParamsMinerChangeMultiaddrs.KeyAssembler"}.AssignLink(nil)
}
func (ka *_MessageParamsMinerChangeMultiaddrs__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_MessageParamsMinerChangeMultiaddrs__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (MessageParamsMinerChangeMultiaddrs) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n MessageParamsMinerChangeMultiaddrs) Representation() ipld.Node {
	return (*_MessageParamsMinerChangeMultiaddrs__Repr)(n)
}
type _MessageParamsMinerChangeMultiaddrs__Repr _MessageParamsMinerChangeMultiaddrs
var _ ipld.Node = &_MessageParamsMinerChangeMultiaddrs__Repr{}
func (_MessageParamsMinerChangeMultiaddrs__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_List
}
func (_MessageParamsMinerChangeMultiaddrs__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"types.MessageParamsMinerChangeMultiaddrs.Repr"}.LookupByString("")
}
func (n *_MessageParamsMinerChangeMultiaddrs__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ki, err := key.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(ki)
}
func (n *_MessageParamsMinerChangeMultiaddrs__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	switch idx {
	case 0:
		return n.NewMultiaddrs.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(idx)}
	}
}
func (n _MessageParamsMinerChangeMultiaddrs__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "types.MessageParamsMinerChangeMultiaddrs.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_MessageParamsMinerChangeMultiaddrs__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (n *_MessageParamsMinerChangeMultiaddrs__Repr) ListIterator() ipld.ListIterator {
	return &_MessageParamsMinerChangeMultiaddrs__ReprListItr{n, 0}
}

type _MessageParamsMinerChangeMultiaddrs__ReprListItr struct {
	n   *_MessageParamsMinerChangeMultiaddrs__Repr
	idx int
	
}

func (itr *_MessageParamsMinerChangeMultiaddrs__ReprListItr) Next() (idx int, v ipld.Node, err error) {
	if itr.idx >= 1 {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		idx = itr.idx
		v = itr.n.NewMultiaddrs.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_MessageParamsMinerChangeMultiaddrs__ReprListItr) Done() bool {
	return itr.idx >= 1
}

func (rn *_MessageParamsMinerChangeMultiaddrs__Repr) Length() int {
	l := 1
	return l
}
func (_MessageParamsMinerChangeMultiaddrs__Repr) IsAbsent() bool {
	return false
}
func (_MessageParamsMinerChangeMultiaddrs__Repr) IsNull() bool {
	return false
}
func (_MessageParamsMinerChangeMultiaddrs__Repr) AsBool() (bool, error) {
	return mixins.List{"types.MessageParamsMinerChangeMultiaddrs.Repr"}.AsBool()
}
func (_MessageParamsMinerChangeMultiaddrs__Repr) AsInt() (int, error) {
	return mixins.List{"types.MessageParamsMinerChangeMultiaddrs.Repr"}.AsInt()
}
func (_MessageParamsMinerChangeMultiaddrs__Repr) AsFloat() (float64, error) {
	return mixins.List{"types.MessageParamsMinerChangeMultiaddrs.Repr"}.AsFloat()
}
func (_MessageParamsMinerChangeMultiaddrs__Repr) AsString() (string, error) {
	return mixins.List{"types.MessageParamsMinerChangeMultiaddrs.Repr"}.AsString()
}
func (_MessageParamsMinerChangeMultiaddrs__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"types.MessageParamsMinerChangeMultiaddrs.Repr"}.AsBytes()
}
func (_MessageParamsMinerChangeMultiaddrs__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"types.MessageParamsMinerChangeMultiaddrs.Repr"}.AsLink()
}
func (_MessageParamsMinerChangeMultiaddrs__Repr) Prototype() ipld.NodePrototype {
	return _MessageParamsMinerChangeMultiaddrs__ReprPrototype{}
}
type _MessageParamsMinerChangeMultiaddrs__ReprPrototype struct{}

func (_MessageParamsMinerChangeMultiaddrs__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _MessageParamsMinerChangeMultiaddrs__ReprBuilder
	nb.Reset()
	return &nb
}
type _MessageParamsMinerChangeMultiaddrs__ReprBuilder struct {
	_MessageParamsMinerChangeMultiaddrs__ReprAssembler
}
func (nb *_MessageParamsMinerChangeMultiaddrs__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_MessageParamsMinerChangeMultiaddrs__ReprBuilder) Reset() {
	var w _MessageParamsMinerChangeMultiaddrs
	var m schema.Maybe
	*nb = _MessageParamsMinerChangeMultiaddrs__ReprBuilder{_MessageParamsMinerChangeMultiaddrs__ReprAssembler{w: &w, m: &m}}
}
type _MessageParamsMinerChangeMultiaddrs__ReprAssembler struct {
	w *_MessageParamsMinerChangeMultiaddrs
	m *schema.Maybe
	state laState
	f int

	cm schema.Maybe
	ca_NewMultiaddrs _List__Multiaddrs__ReprAssembler
	}

func (na *_MessageParamsMinerChangeMultiaddrs__ReprAssembler) reset() {
	na.state = laState_initial
	na.f = 0
	na.ca_NewMultiaddrs.reset()
}
func (_MessageParamsMinerChangeMultiaddrs__ReprAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"types.MessageParamsMinerChangeMultiaddrs.Repr"}.BeginMap(0)
}
func (na *_MessageParamsMinerChangeMultiaddrs__ReprAssembler) BeginList(int) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_MessageParamsMinerChangeMultiaddrs{}
	}
	return na, nil
}
func (na *_MessageParamsMinerChangeMultiaddrs__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"types.MessageParamsMinerChangeMultiaddrs.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_MessageParamsMinerChangeMultiaddrs__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"types.MessageParamsMinerChangeMultiaddrs.Repr"}.AssignBool(false)
}
func (_MessageParamsMinerChangeMultiaddrs__ReprAssembler) AssignInt(int) error {
	return mixins.ListAssembler{"types.MessageParamsMinerChangeMultiaddrs.Repr"}.AssignInt(0)
}
func (_MessageParamsMinerChangeMultiaddrs__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"types.MessageParamsMinerChangeMultiaddrs.Repr"}.AssignFloat(0)
}
func (_MessageParamsMinerChangeMultiaddrs__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"types.MessageParamsMinerChangeMultiaddrs.Repr"}.AssignString("")
}
func (_MessageParamsMinerChangeMultiaddrs__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"types.MessageParamsMinerChangeMultiaddrs.Repr"}.AssignBytes(nil)
}
func (_MessageParamsMinerChangeMultiaddrs__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"types.MessageParamsMinerChangeMultiaddrs.Repr"}.AssignLink(nil)
}
func (na *_MessageParamsMinerChangeMultiaddrs__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_MessageParamsMinerChangeMultiaddrs); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_List {
		return ipld.ErrWrongKind{TypeName: "types.MessageParamsMinerChangeMultiaddrs.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustList, ActualKind: v.ReprKind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_MessageParamsMinerChangeMultiaddrs__ReprAssembler) Prototype() ipld.NodePrototype {
	return _MessageParamsMinerChangeMultiaddrs__ReprPrototype{}
}
func (la *_MessageParamsMinerChangeMultiaddrs__ReprAssembler) valueFinishTidy() bool {
	switch la.f {
	case 0:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (la *_MessageParamsMinerChangeMultiaddrs__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	if la.f >= 1 {
		return nil // schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(1)} // FIXME: need an error thunking assembler!  it has returned.  sigh.
	}
	la.state = laState_midValue
	switch la.f {
	case 0:
		la.ca_NewMultiaddrs.w = &la.w.NewMultiaddrs
		la.ca_NewMultiaddrs.m = &la.cm
		return &la.ca_NewMultiaddrs
	default:
		panic("unreachable")
	}
}
func (la *_MessageParamsMinerChangeMultiaddrs__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_MessageParamsMinerChangeMultiaddrs__ReprAssembler) ValuePrototype(_ int) ipld.NodePrototype {
	panic("todo structbuilder tuplerepr valueprototype")
}
