package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _SealVerifyInfo struct {
	SealProof _RegisteredSealProof
	SectorID _Int
	DealIDs _List__DealID
	Randomness _Bytes
	InteractiveRandomness _Bytes
	Proof _Bytes
	SealedCID _Link
	UnsealedCID _Link
}
type SealVerifyInfo = *_SealVerifyInfo

func (n _SealVerifyInfo) FieldSealProof()	RegisteredSealProof {
	return &n.SealProof
}
func (n _SealVerifyInfo) FieldSectorID()	Int {
	return &n.SectorID
}
func (n _SealVerifyInfo) FieldDealIDs()	List__DealID {
	return &n.DealIDs
}
func (n _SealVerifyInfo) FieldRandomness()	Bytes {
	return &n.Randomness
}
func (n _SealVerifyInfo) FieldInteractiveRandomness()	Bytes {
	return &n.InteractiveRandomness
}
func (n _SealVerifyInfo) FieldProof()	Bytes {
	return &n.Proof
}
func (n _SealVerifyInfo) FieldSealedCID()	Link {
	return &n.SealedCID
}
func (n _SealVerifyInfo) FieldUnsealedCID()	Link {
	return &n.UnsealedCID
}
type _SealVerifyInfo__Maybe struct {
	m schema.Maybe
	v SealVerifyInfo
}
type MaybeSealVerifyInfo = *_SealVerifyInfo__Maybe

func (m MaybeSealVerifyInfo) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeSealVerifyInfo) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeSealVerifyInfo) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeSealVerifyInfo) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeSealVerifyInfo) Must() SealVerifyInfo {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__SealVerifyInfo_SealProof = _String{"SealProof"}
	fieldName__SealVerifyInfo_SectorID = _String{"SectorID"}
	fieldName__SealVerifyInfo_DealIDs = _String{"DealIDs"}
	fieldName__SealVerifyInfo_Randomness = _String{"Randomness"}
	fieldName__SealVerifyInfo_InteractiveRandomness = _String{"InteractiveRandomness"}
	fieldName__SealVerifyInfo_Proof = _String{"Proof"}
	fieldName__SealVerifyInfo_SealedCID = _String{"SealedCID"}
	fieldName__SealVerifyInfo_UnsealedCID = _String{"UnsealedCID"}
)
var _ ipld.Node = (SealVerifyInfo)(&_SealVerifyInfo{})
var _ schema.TypedNode = (SealVerifyInfo)(&_SealVerifyInfo{})
func (SealVerifyInfo) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n SealVerifyInfo) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "SealProof":
		return &n.SealProof, nil
	case "SectorID":
		return &n.SectorID, nil
	case "DealIDs":
		return &n.DealIDs, nil
	case "Randomness":
		return &n.Randomness, nil
	case "InteractiveRandomness":
		return &n.InteractiveRandomness, nil
	case "Proof":
		return &n.Proof, nil
	case "SealedCID":
		return &n.SealedCID, nil
	case "UnsealedCID":
		return &n.UnsealedCID, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n SealVerifyInfo) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (SealVerifyInfo) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"types.SealVerifyInfo"}.LookupByIndex(0)
}
func (n SealVerifyInfo) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n SealVerifyInfo) MapIterator() ipld.MapIterator {
	return &_SealVerifyInfo__MapItr{n, 0}
}

type _SealVerifyInfo__MapItr struct {
	n SealVerifyInfo
	idx  int
}

func (itr *_SealVerifyInfo__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 8 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__SealVerifyInfo_SealProof
		v = &itr.n.SealProof
	case 1:
		k = &fieldName__SealVerifyInfo_SectorID
		v = &itr.n.SectorID
	case 2:
		k = &fieldName__SealVerifyInfo_DealIDs
		v = &itr.n.DealIDs
	case 3:
		k = &fieldName__SealVerifyInfo_Randomness
		v = &itr.n.Randomness
	case 4:
		k = &fieldName__SealVerifyInfo_InteractiveRandomness
		v = &itr.n.InteractiveRandomness
	case 5:
		k = &fieldName__SealVerifyInfo_Proof
		v = &itr.n.Proof
	case 6:
		k = &fieldName__SealVerifyInfo_SealedCID
		v = &itr.n.SealedCID
	case 7:
		k = &fieldName__SealVerifyInfo_UnsealedCID
		v = &itr.n.UnsealedCID
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_SealVerifyInfo__MapItr) Done() bool {
	return itr.idx >= 8
}

func (SealVerifyInfo) ListIterator() ipld.ListIterator {
	return nil
}
func (SealVerifyInfo) Length() int {
	return 8
}
func (SealVerifyInfo) IsAbsent() bool {
	return false
}
func (SealVerifyInfo) IsNull() bool {
	return false
}
func (SealVerifyInfo) AsBool() (bool, error) {
	return mixins.Map{"types.SealVerifyInfo"}.AsBool()
}
func (SealVerifyInfo) AsInt() (int, error) {
	return mixins.Map{"types.SealVerifyInfo"}.AsInt()
}
func (SealVerifyInfo) AsFloat() (float64, error) {
	return mixins.Map{"types.SealVerifyInfo"}.AsFloat()
}
func (SealVerifyInfo) AsString() (string, error) {
	return mixins.Map{"types.SealVerifyInfo"}.AsString()
}
func (SealVerifyInfo) AsBytes() ([]byte, error) {
	return mixins.Map{"types.SealVerifyInfo"}.AsBytes()
}
func (SealVerifyInfo) AsLink() (ipld.Link, error) {
	return mixins.Map{"types.SealVerifyInfo"}.AsLink()
}
func (SealVerifyInfo) Prototype() ipld.NodePrototype {
	return _SealVerifyInfo__Prototype{}
}
type _SealVerifyInfo__Prototype struct{}

func (_SealVerifyInfo__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _SealVerifyInfo__Builder
	nb.Reset()
	return &nb
}
type _SealVerifyInfo__Builder struct {
	_SealVerifyInfo__Assembler
}
func (nb *_SealVerifyInfo__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_SealVerifyInfo__Builder) Reset() {
	var w _SealVerifyInfo
	var m schema.Maybe
	*nb = _SealVerifyInfo__Builder{_SealVerifyInfo__Assembler{w: &w, m: &m}}
}
type _SealVerifyInfo__Assembler struct {
	w *_SealVerifyInfo
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_SealProof _RegisteredSealProof__Assembler
	ca_SectorID _Int__Assembler
	ca_DealIDs _List__DealID__Assembler
	ca_Randomness _Bytes__Assembler
	ca_InteractiveRandomness _Bytes__Assembler
	ca_Proof _Bytes__Assembler
	ca_SealedCID _Link__Assembler
	ca_UnsealedCID _Link__Assembler
	}

func (na *_SealVerifyInfo__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_SealProof.reset()
	na.ca_SectorID.reset()
	na.ca_DealIDs.reset()
	na.ca_Randomness.reset()
	na.ca_InteractiveRandomness.reset()
	na.ca_Proof.reset()
	na.ca_SealedCID.reset()
	na.ca_UnsealedCID.reset()
}

var (
	fieldBit__SealVerifyInfo_SealProof = 1 << 0
	fieldBit__SealVerifyInfo_SectorID = 1 << 1
	fieldBit__SealVerifyInfo_DealIDs = 1 << 2
	fieldBit__SealVerifyInfo_Randomness = 1 << 3
	fieldBit__SealVerifyInfo_InteractiveRandomness = 1 << 4
	fieldBit__SealVerifyInfo_Proof = 1 << 5
	fieldBit__SealVerifyInfo_SealedCID = 1 << 6
	fieldBit__SealVerifyInfo_UnsealedCID = 1 << 7
	fieldBits__SealVerifyInfo_sufficient = 0 + 1 << 0 + 1 << 1 + 1 << 2 + 1 << 3 + 1 << 4 + 1 << 5 + 1 << 6 + 1 << 7
)
func (na *_SealVerifyInfo__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_SealVerifyInfo{}
	}
	return na, nil
}
func (_SealVerifyInfo__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"types.SealVerifyInfo"}.BeginList(0)
}
func (na *_SealVerifyInfo__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"types.SealVerifyInfo"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_SealVerifyInfo__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"types.SealVerifyInfo"}.AssignBool(false)
}
func (_SealVerifyInfo__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"types.SealVerifyInfo"}.AssignInt(0)
}
func (_SealVerifyInfo__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"types.SealVerifyInfo"}.AssignFloat(0)
}
func (_SealVerifyInfo__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"types.SealVerifyInfo"}.AssignString("")
}
func (_SealVerifyInfo__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"types.SealVerifyInfo"}.AssignBytes(nil)
}
func (_SealVerifyInfo__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"types.SealVerifyInfo"}.AssignLink(nil)
}
func (na *_SealVerifyInfo__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_SealVerifyInfo); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "types.SealVerifyInfo", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_SealVerifyInfo__Assembler) Prototype() ipld.NodePrototype {
	return _SealVerifyInfo__Prototype{}
}
func (ma *_SealVerifyInfo__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_SealProof.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_SectorID.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_DealIDs.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Randomness.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 4:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_InteractiveRandomness.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 5:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Proof.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 6:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_SealedCID.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 7:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_UnsealedCID.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_SealVerifyInfo__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "SealProof":
		if ma.s & fieldBit__SealVerifyInfo_SealProof != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__SealVerifyInfo_SealProof}
		}
		ma.s += fieldBit__SealVerifyInfo_SealProof
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_SealProof.w = &ma.w.SealProof
		ma.ca_SealProof.m = &ma.cm
		return &ma.ca_SealProof, nil
	case "SectorID":
		if ma.s & fieldBit__SealVerifyInfo_SectorID != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__SealVerifyInfo_SectorID}
		}
		ma.s += fieldBit__SealVerifyInfo_SectorID
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_SectorID.w = &ma.w.SectorID
		ma.ca_SectorID.m = &ma.cm
		return &ma.ca_SectorID, nil
	case "DealIDs":
		if ma.s & fieldBit__SealVerifyInfo_DealIDs != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__SealVerifyInfo_DealIDs}
		}
		ma.s += fieldBit__SealVerifyInfo_DealIDs
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_DealIDs.w = &ma.w.DealIDs
		ma.ca_DealIDs.m = &ma.cm
		return &ma.ca_DealIDs, nil
	case "Randomness":
		if ma.s & fieldBit__SealVerifyInfo_Randomness != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__SealVerifyInfo_Randomness}
		}
		ma.s += fieldBit__SealVerifyInfo_Randomness
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_Randomness.w = &ma.w.Randomness
		ma.ca_Randomness.m = &ma.cm
		return &ma.ca_Randomness, nil
	case "InteractiveRandomness":
		if ma.s & fieldBit__SealVerifyInfo_InteractiveRandomness != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__SealVerifyInfo_InteractiveRandomness}
		}
		ma.s += fieldBit__SealVerifyInfo_InteractiveRandomness
		ma.state = maState_midValue
		ma.f = 4
		ma.ca_InteractiveRandomness.w = &ma.w.InteractiveRandomness
		ma.ca_InteractiveRandomness.m = &ma.cm
		return &ma.ca_InteractiveRandomness, nil
	case "Proof":
		if ma.s & fieldBit__SealVerifyInfo_Proof != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__SealVerifyInfo_Proof}
		}
		ma.s += fieldBit__SealVerifyInfo_Proof
		ma.state = maState_midValue
		ma.f = 5
		ma.ca_Proof.w = &ma.w.Proof
		ma.ca_Proof.m = &ma.cm
		return &ma.ca_Proof, nil
	case "SealedCID":
		if ma.s & fieldBit__SealVerifyInfo_SealedCID != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__SealVerifyInfo_SealedCID}
		}
		ma.s += fieldBit__SealVerifyInfo_SealedCID
		ma.state = maState_midValue
		ma.f = 6
		ma.ca_SealedCID.w = &ma.w.SealedCID
		ma.ca_SealedCID.m = &ma.cm
		return &ma.ca_SealedCID, nil
	case "UnsealedCID":
		if ma.s & fieldBit__SealVerifyInfo_UnsealedCID != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__SealVerifyInfo_UnsealedCID}
		}
		ma.s += fieldBit__SealVerifyInfo_UnsealedCID
		ma.state = maState_midValue
		ma.f = 7
		ma.ca_UnsealedCID.w = &ma.w.UnsealedCID
		ma.ca_UnsealedCID.m = &ma.cm
		return &ma.ca_UnsealedCID, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"types.SealVerifyInfo", Key:&_String{k}}
	}
}
func (ma *_SealVerifyInfo__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_SealVerifyInfo__KeyAssembler)(ma)
}
func (ma *_SealVerifyInfo__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_SealProof.w = &ma.w.SealProof
		ma.ca_SealProof.m = &ma.cm
		return &ma.ca_SealProof
	case 1:
		ma.ca_SectorID.w = &ma.w.SectorID
		ma.ca_SectorID.m = &ma.cm
		return &ma.ca_SectorID
	case 2:
		ma.ca_DealIDs.w = &ma.w.DealIDs
		ma.ca_DealIDs.m = &ma.cm
		return &ma.ca_DealIDs
	case 3:
		ma.ca_Randomness.w = &ma.w.Randomness
		ma.ca_Randomness.m = &ma.cm
		return &ma.ca_Randomness
	case 4:
		ma.ca_InteractiveRandomness.w = &ma.w.InteractiveRandomness
		ma.ca_InteractiveRandomness.m = &ma.cm
		return &ma.ca_InteractiveRandomness
	case 5:
		ma.ca_Proof.w = &ma.w.Proof
		ma.ca_Proof.m = &ma.cm
		return &ma.ca_Proof
	case 6:
		ma.ca_SealedCID.w = &ma.w.SealedCID
		ma.ca_SealedCID.m = &ma.cm
		return &ma.ca_SealedCID
	case 7:
		ma.ca_UnsealedCID.w = &ma.w.UnsealedCID
		ma.ca_UnsealedCID.m = &ma.cm
		return &ma.ca_UnsealedCID
	default:
		panic("unreachable")
	}
}
func (ma *_SealVerifyInfo__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_SealVerifyInfo__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_SealVerifyInfo__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _SealVerifyInfo__KeyAssembler _SealVerifyInfo__Assembler
func (_SealVerifyInfo__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"types.SealVerifyInfo.KeyAssembler"}.BeginMap(0)
}
func (_SealVerifyInfo__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"types.SealVerifyInfo.KeyAssembler"}.BeginList(0)
}
func (na *_SealVerifyInfo__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"types.SealVerifyInfo.KeyAssembler"}.AssignNull()
}
func (_SealVerifyInfo__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"types.SealVerifyInfo.KeyAssembler"}.AssignBool(false)
}
func (_SealVerifyInfo__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"types.SealVerifyInfo.KeyAssembler"}.AssignInt(0)
}
func (_SealVerifyInfo__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"types.SealVerifyInfo.KeyAssembler"}.AssignFloat(0)
}
func (ka *_SealVerifyInfo__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "SealProof":
		if ka.s & fieldBit__SealVerifyInfo_SealProof != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__SealVerifyInfo_SealProof}
		}
		ka.s += fieldBit__SealVerifyInfo_SealProof
		ka.state = maState_expectValue
		ka.f = 0
	case "SectorID":
		if ka.s & fieldBit__SealVerifyInfo_SectorID != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__SealVerifyInfo_SectorID}
		}
		ka.s += fieldBit__SealVerifyInfo_SectorID
		ka.state = maState_expectValue
		ka.f = 1
	case "DealIDs":
		if ka.s & fieldBit__SealVerifyInfo_DealIDs != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__SealVerifyInfo_DealIDs}
		}
		ka.s += fieldBit__SealVerifyInfo_DealIDs
		ka.state = maState_expectValue
		ka.f = 2
	case "Randomness":
		if ka.s & fieldBit__SealVerifyInfo_Randomness != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__SealVerifyInfo_Randomness}
		}
		ka.s += fieldBit__SealVerifyInfo_Randomness
		ka.state = maState_expectValue
		ka.f = 3
	case "InteractiveRandomness":
		if ka.s & fieldBit__SealVerifyInfo_InteractiveRandomness != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__SealVerifyInfo_InteractiveRandomness}
		}
		ka.s += fieldBit__SealVerifyInfo_InteractiveRandomness
		ka.state = maState_expectValue
		ka.f = 4
	case "Proof":
		if ka.s & fieldBit__SealVerifyInfo_Proof != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__SealVerifyInfo_Proof}
		}
		ka.s += fieldBit__SealVerifyInfo_Proof
		ka.state = maState_expectValue
		ka.f = 5
	case "SealedCID":
		if ka.s & fieldBit__SealVerifyInfo_SealedCID != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__SealVerifyInfo_SealedCID}
		}
		ka.s += fieldBit__SealVerifyInfo_SealedCID
		ka.state = maState_expectValue
		ka.f = 6
	case "UnsealedCID":
		if ka.s & fieldBit__SealVerifyInfo_UnsealedCID != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__SealVerifyInfo_UnsealedCID}
		}
		ka.s += fieldBit__SealVerifyInfo_UnsealedCID
		ka.state = maState_expectValue
		ka.f = 7
	default:
		return ipld.ErrInvalidKey{TypeName:"types.SealVerifyInfo", Key:&_String{k}}
	}
	return nil
}
func (_SealVerifyInfo__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"types.SealVerifyInfo.KeyAssembler"}.AssignBytes(nil)
}
func (_SealVerifyInfo__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"types.SealVerifyInfo.KeyAssembler"}.AssignLink(nil)
}
func (ka *_SealVerifyInfo__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_SealVerifyInfo__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (SealVerifyInfo) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n SealVerifyInfo) Representation() ipld.Node {
	return (*_SealVerifyInfo__Repr)(n)
}
type _SealVerifyInfo__Repr _SealVerifyInfo
var _ ipld.Node = &_SealVerifyInfo__Repr{}
func (_SealVerifyInfo__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_List
}
func (_SealVerifyInfo__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"types.SealVerifyInfo.Repr"}.LookupByString("")
}
func (n *_SealVerifyInfo__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ki, err := key.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(ki)
}
func (n *_SealVerifyInfo__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	switch idx {
	case 0:
		return n.SealProof.Representation(), nil
	case 1:
		return n.SectorID.Representation(), nil
	case 2:
		return n.DealIDs.Representation(), nil
	case 3:
		return n.Randomness.Representation(), nil
	case 4:
		return n.InteractiveRandomness.Representation(), nil
	case 5:
		return n.Proof.Representation(), nil
	case 6:
		return n.SealedCID.Representation(), nil
	case 7:
		return n.UnsealedCID.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(idx)}
	}
}
func (n _SealVerifyInfo__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "types.SealVerifyInfo.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_SealVerifyInfo__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (n *_SealVerifyInfo__Repr) ListIterator() ipld.ListIterator {
	return &_SealVerifyInfo__ReprListItr{n, 0}
}

type _SealVerifyInfo__ReprListItr struct {
	n   *_SealVerifyInfo__Repr
	idx int
	
}

func (itr *_SealVerifyInfo__ReprListItr) Next() (idx int, v ipld.Node, err error) {
	if itr.idx >= 8 {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		idx = itr.idx
		v = itr.n.SealProof.Representation()
	case 1:
		idx = itr.idx
		v = itr.n.SectorID.Representation()
	case 2:
		idx = itr.idx
		v = itr.n.DealIDs.Representation()
	case 3:
		idx = itr.idx
		v = itr.n.Randomness.Representation()
	case 4:
		idx = itr.idx
		v = itr.n.InteractiveRandomness.Representation()
	case 5:
		idx = itr.idx
		v = itr.n.Proof.Representation()
	case 6:
		idx = itr.idx
		v = itr.n.SealedCID.Representation()
	case 7:
		idx = itr.idx
		v = itr.n.UnsealedCID.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_SealVerifyInfo__ReprListItr) Done() bool {
	return itr.idx >= 8
}

func (rn *_SealVerifyInfo__Repr) Length() int {
	l := 8
	return l
}
func (_SealVerifyInfo__Repr) IsAbsent() bool {
	return false
}
func (_SealVerifyInfo__Repr) IsNull() bool {
	return false
}
func (_SealVerifyInfo__Repr) AsBool() (bool, error) {
	return mixins.List{"types.SealVerifyInfo.Repr"}.AsBool()
}
func (_SealVerifyInfo__Repr) AsInt() (int, error) {
	return mixins.List{"types.SealVerifyInfo.Repr"}.AsInt()
}
func (_SealVerifyInfo__Repr) AsFloat() (float64, error) {
	return mixins.List{"types.SealVerifyInfo.Repr"}.AsFloat()
}
func (_SealVerifyInfo__Repr) AsString() (string, error) {
	return mixins.List{"types.SealVerifyInfo.Repr"}.AsString()
}
func (_SealVerifyInfo__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"types.SealVerifyInfo.Repr"}.AsBytes()
}
func (_SealVerifyInfo__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"types.SealVerifyInfo.Repr"}.AsLink()
}
func (_SealVerifyInfo__Repr) Prototype() ipld.NodePrototype {
	return _SealVerifyInfo__ReprPrototype{}
}
type _SealVerifyInfo__ReprPrototype struct{}

func (_SealVerifyInfo__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _SealVerifyInfo__ReprBuilder
	nb.Reset()
	return &nb
}
type _SealVerifyInfo__ReprBuilder struct {
	_SealVerifyInfo__ReprAssembler
}
func (nb *_SealVerifyInfo__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_SealVerifyInfo__ReprBuilder) Reset() {
	var w _SealVerifyInfo
	var m schema.Maybe
	*nb = _SealVerifyInfo__ReprBuilder{_SealVerifyInfo__ReprAssembler{w: &w, m: &m}}
}
type _SealVerifyInfo__ReprAssembler struct {
	w *_SealVerifyInfo
	m *schema.Maybe
	state laState
	f int

	cm schema.Maybe
	ca_SealProof _RegisteredSealProof__ReprAssembler
	ca_SectorID _Int__ReprAssembler
	ca_DealIDs _List__DealID__ReprAssembler
	ca_Randomness _Bytes__ReprAssembler
	ca_InteractiveRandomness _Bytes__ReprAssembler
	ca_Proof _Bytes__ReprAssembler
	ca_SealedCID _Link__ReprAssembler
	ca_UnsealedCID _Link__ReprAssembler
	}

func (na *_SealVerifyInfo__ReprAssembler) reset() {
	na.state = laState_initial
	na.f = 0
	na.ca_SealProof.reset()
	na.ca_SectorID.reset()
	na.ca_DealIDs.reset()
	na.ca_Randomness.reset()
	na.ca_InteractiveRandomness.reset()
	na.ca_Proof.reset()
	na.ca_SealedCID.reset()
	na.ca_UnsealedCID.reset()
}
func (_SealVerifyInfo__ReprAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"types.SealVerifyInfo.Repr"}.BeginMap(0)
}
func (na *_SealVerifyInfo__ReprAssembler) BeginList(int) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_SealVerifyInfo{}
	}
	return na, nil
}
func (na *_SealVerifyInfo__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"types.SealVerifyInfo.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_SealVerifyInfo__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"types.SealVerifyInfo.Repr"}.AssignBool(false)
}
func (_SealVerifyInfo__ReprAssembler) AssignInt(int) error {
	return mixins.ListAssembler{"types.SealVerifyInfo.Repr"}.AssignInt(0)
}
func (_SealVerifyInfo__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"types.SealVerifyInfo.Repr"}.AssignFloat(0)
}
func (_SealVerifyInfo__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"types.SealVerifyInfo.Repr"}.AssignString("")
}
func (_SealVerifyInfo__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"types.SealVerifyInfo.Repr"}.AssignBytes(nil)
}
func (_SealVerifyInfo__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"types.SealVerifyInfo.Repr"}.AssignLink(nil)
}
func (na *_SealVerifyInfo__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_SealVerifyInfo); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_List {
		return ipld.ErrWrongKind{TypeName: "types.SealVerifyInfo.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustList, ActualKind: v.ReprKind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_SealVerifyInfo__ReprAssembler) Prototype() ipld.NodePrototype {
	return _SealVerifyInfo__ReprPrototype{}
}
func (la *_SealVerifyInfo__ReprAssembler) valueFinishTidy() bool {
	switch la.f {
	case 0:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 1:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 2:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 3:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 4:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 5:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 6:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 7:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (la *_SealVerifyInfo__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	if la.f >= 8 {
		return nil // schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(8)} // FIXME: need an error thunking assembler!  it has returned.  sigh.
	}
	la.state = laState_midValue
	switch la.f {
	case 0:
		la.ca_SealProof.w = &la.w.SealProof
		la.ca_SealProof.m = &la.cm
		return &la.ca_SealProof
	case 1:
		la.ca_SectorID.w = &la.w.SectorID
		la.ca_SectorID.m = &la.cm
		return &la.ca_SectorID
	case 2:
		la.ca_DealIDs.w = &la.w.DealIDs
		la.ca_DealIDs.m = &la.cm
		return &la.ca_DealIDs
	case 3:
		la.ca_Randomness.w = &la.w.Randomness
		la.ca_Randomness.m = &la.cm
		return &la.ca_Randomness
	case 4:
		la.ca_InteractiveRandomness.w = &la.w.InteractiveRandomness
		la.ca_InteractiveRandomness.m = &la.cm
		return &la.ca_InteractiveRandomness
	case 5:
		la.ca_Proof.w = &la.w.Proof
		la.ca_Proof.m = &la.cm
		return &la.ca_Proof
	case 6:
		la.ca_SealedCID.w = &la.w.SealedCID
		la.ca_SealedCID.m = &la.cm
		return &la.ca_SealedCID
	case 7:
		la.ca_UnsealedCID.w = &la.w.UnsealedCID
		la.ca_UnsealedCID.m = &la.cm
		return &la.ca_UnsealedCID
	default:
		panic("unreachable")
	}
}
func (la *_SealVerifyInfo__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_SealVerifyInfo__ReprAssembler) ValuePrototype(_ int) ipld.NodePrototype {
	panic("todo structbuilder tuplerepr valueprototype")
}
