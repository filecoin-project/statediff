package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _LotusMessage struct {
	Version _Int
	To _Address
	From _Address
	Nonce _Int
	Value _BigInt
	GasLimit _Int
	GasFeeCap _BigInt
	GasPremium _BigInt
	Method _MethodNum
	Params _Bytes
}
type LotusMessage = *_LotusMessage

func (n _LotusMessage) FieldVersion()	Int {
	return &n.Version
}
func (n _LotusMessage) FieldTo()	Address {
	return &n.To
}
func (n _LotusMessage) FieldFrom()	Address {
	return &n.From
}
func (n _LotusMessage) FieldNonce()	Int {
	return &n.Nonce
}
func (n _LotusMessage) FieldValue()	BigInt {
	return &n.Value
}
func (n _LotusMessage) FieldGasLimit()	Int {
	return &n.GasLimit
}
func (n _LotusMessage) FieldGasFeeCap()	BigInt {
	return &n.GasFeeCap
}
func (n _LotusMessage) FieldGasPremium()	BigInt {
	return &n.GasPremium
}
func (n _LotusMessage) FieldMethod()	MethodNum {
	return &n.Method
}
func (n _LotusMessage) FieldParams()	Bytes {
	return &n.Params
}
type _LotusMessage__Maybe struct {
	m schema.Maybe
	v LotusMessage
}
type MaybeLotusMessage = *_LotusMessage__Maybe

func (m MaybeLotusMessage) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeLotusMessage) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeLotusMessage) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeLotusMessage) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeLotusMessage) Must() LotusMessage {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__LotusMessage_Version = _String{"Version"}
	fieldName__LotusMessage_To = _String{"To"}
	fieldName__LotusMessage_From = _String{"From"}
	fieldName__LotusMessage_Nonce = _String{"Nonce"}
	fieldName__LotusMessage_Value = _String{"Value"}
	fieldName__LotusMessage_GasLimit = _String{"GasLimit"}
	fieldName__LotusMessage_GasFeeCap = _String{"GasFeeCap"}
	fieldName__LotusMessage_GasPremium = _String{"GasPremium"}
	fieldName__LotusMessage_Method = _String{"Method"}
	fieldName__LotusMessage_Params = _String{"Params"}
)
var _ ipld.Node = (LotusMessage)(&_LotusMessage{})
var _ schema.TypedNode = (LotusMessage)(&_LotusMessage{})
func (LotusMessage) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n LotusMessage) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Version":
		return &n.Version, nil
	case "To":
		return &n.To, nil
	case "From":
		return &n.From, nil
	case "Nonce":
		return &n.Nonce, nil
	case "Value":
		return &n.Value, nil
	case "GasLimit":
		return &n.GasLimit, nil
	case "GasFeeCap":
		return &n.GasFeeCap, nil
	case "GasPremium":
		return &n.GasPremium, nil
	case "Method":
		return &n.Method, nil
	case "Params":
		return &n.Params, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n LotusMessage) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (LotusMessage) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"types.LotusMessage"}.LookupByIndex(0)
}
func (n LotusMessage) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n LotusMessage) MapIterator() ipld.MapIterator {
	return &_LotusMessage__MapItr{n, 0}
}

type _LotusMessage__MapItr struct {
	n LotusMessage
	idx  int
}

func (itr *_LotusMessage__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 10 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__LotusMessage_Version
		v = &itr.n.Version
	case 1:
		k = &fieldName__LotusMessage_To
		v = &itr.n.To
	case 2:
		k = &fieldName__LotusMessage_From
		v = &itr.n.From
	case 3:
		k = &fieldName__LotusMessage_Nonce
		v = &itr.n.Nonce
	case 4:
		k = &fieldName__LotusMessage_Value
		v = &itr.n.Value
	case 5:
		k = &fieldName__LotusMessage_GasLimit
		v = &itr.n.GasLimit
	case 6:
		k = &fieldName__LotusMessage_GasFeeCap
		v = &itr.n.GasFeeCap
	case 7:
		k = &fieldName__LotusMessage_GasPremium
		v = &itr.n.GasPremium
	case 8:
		k = &fieldName__LotusMessage_Method
		v = &itr.n.Method
	case 9:
		k = &fieldName__LotusMessage_Params
		v = &itr.n.Params
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_LotusMessage__MapItr) Done() bool {
	return itr.idx >= 10
}

func (LotusMessage) ListIterator() ipld.ListIterator {
	return nil
}
func (LotusMessage) Length() int {
	return 10
}
func (LotusMessage) IsAbsent() bool {
	return false
}
func (LotusMessage) IsNull() bool {
	return false
}
func (LotusMessage) AsBool() (bool, error) {
	return mixins.Map{"types.LotusMessage"}.AsBool()
}
func (LotusMessage) AsInt() (int, error) {
	return mixins.Map{"types.LotusMessage"}.AsInt()
}
func (LotusMessage) AsFloat() (float64, error) {
	return mixins.Map{"types.LotusMessage"}.AsFloat()
}
func (LotusMessage) AsString() (string, error) {
	return mixins.Map{"types.LotusMessage"}.AsString()
}
func (LotusMessage) AsBytes() ([]byte, error) {
	return mixins.Map{"types.LotusMessage"}.AsBytes()
}
func (LotusMessage) AsLink() (ipld.Link, error) {
	return mixins.Map{"types.LotusMessage"}.AsLink()
}
func (LotusMessage) Prototype() ipld.NodePrototype {
	return _LotusMessage__Prototype{}
}
type _LotusMessage__Prototype struct{}

func (_LotusMessage__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _LotusMessage__Builder
	nb.Reset()
	return &nb
}
type _LotusMessage__Builder struct {
	_LotusMessage__Assembler
}
func (nb *_LotusMessage__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_LotusMessage__Builder) Reset() {
	var w _LotusMessage
	var m schema.Maybe
	*nb = _LotusMessage__Builder{_LotusMessage__Assembler{w: &w, m: &m}}
}
type _LotusMessage__Assembler struct {
	w *_LotusMessage
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_Version _Int__Assembler
	ca_To _Address__Assembler
	ca_From _Address__Assembler
	ca_Nonce _Int__Assembler
	ca_Value _BigInt__Assembler
	ca_GasLimit _Int__Assembler
	ca_GasFeeCap _BigInt__Assembler
	ca_GasPremium _BigInt__Assembler
	ca_Method _MethodNum__Assembler
	ca_Params _Bytes__Assembler
	}

func (na *_LotusMessage__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Version.reset()
	na.ca_To.reset()
	na.ca_From.reset()
	na.ca_Nonce.reset()
	na.ca_Value.reset()
	na.ca_GasLimit.reset()
	na.ca_GasFeeCap.reset()
	na.ca_GasPremium.reset()
	na.ca_Method.reset()
	na.ca_Params.reset()
}

var (
	fieldBit__LotusMessage_Version = 1 << 0
	fieldBit__LotusMessage_To = 1 << 1
	fieldBit__LotusMessage_From = 1 << 2
	fieldBit__LotusMessage_Nonce = 1 << 3
	fieldBit__LotusMessage_Value = 1 << 4
	fieldBit__LotusMessage_GasLimit = 1 << 5
	fieldBit__LotusMessage_GasFeeCap = 1 << 6
	fieldBit__LotusMessage_GasPremium = 1 << 7
	fieldBit__LotusMessage_Method = 1 << 8
	fieldBit__LotusMessage_Params = 1 << 9
	fieldBits__LotusMessage_sufficient = 0 + 1 << 0 + 1 << 1 + 1 << 2 + 1 << 3 + 1 << 4 + 1 << 5 + 1 << 6 + 1 << 7 + 1 << 8 + 1 << 9
)
func (na *_LotusMessage__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_LotusMessage{}
	}
	return na, nil
}
func (_LotusMessage__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"types.LotusMessage"}.BeginList(0)
}
func (na *_LotusMessage__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"types.LotusMessage"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_LotusMessage__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"types.LotusMessage"}.AssignBool(false)
}
func (_LotusMessage__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"types.LotusMessage"}.AssignInt(0)
}
func (_LotusMessage__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"types.LotusMessage"}.AssignFloat(0)
}
func (_LotusMessage__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"types.LotusMessage"}.AssignString("")
}
func (_LotusMessage__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"types.LotusMessage"}.AssignBytes(nil)
}
func (_LotusMessage__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"types.LotusMessage"}.AssignLink(nil)
}
func (na *_LotusMessage__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_LotusMessage); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "types.LotusMessage", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_LotusMessage__Assembler) Prototype() ipld.NodePrototype {
	return _LotusMessage__Prototype{}
}
func (ma *_LotusMessage__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Version.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_To.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_From.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Nonce.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 4:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Value.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 5:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_GasLimit.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 6:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_GasFeeCap.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 7:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_GasPremium.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 8:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Method.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 9:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Params.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_LotusMessage__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Version":
		if ma.s & fieldBit__LotusMessage_Version != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusMessage_Version}
		}
		ma.s += fieldBit__LotusMessage_Version
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Version.w = &ma.w.Version
		ma.ca_Version.m = &ma.cm
		return &ma.ca_Version, nil
	case "To":
		if ma.s & fieldBit__LotusMessage_To != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusMessage_To}
		}
		ma.s += fieldBit__LotusMessage_To
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_To.w = &ma.w.To
		ma.ca_To.m = &ma.cm
		return &ma.ca_To, nil
	case "From":
		if ma.s & fieldBit__LotusMessage_From != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusMessage_From}
		}
		ma.s += fieldBit__LotusMessage_From
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_From.w = &ma.w.From
		ma.ca_From.m = &ma.cm
		return &ma.ca_From, nil
	case "Nonce":
		if ma.s & fieldBit__LotusMessage_Nonce != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusMessage_Nonce}
		}
		ma.s += fieldBit__LotusMessage_Nonce
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_Nonce.w = &ma.w.Nonce
		ma.ca_Nonce.m = &ma.cm
		return &ma.ca_Nonce, nil
	case "Value":
		if ma.s & fieldBit__LotusMessage_Value != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusMessage_Value}
		}
		ma.s += fieldBit__LotusMessage_Value
		ma.state = maState_midValue
		ma.f = 4
		ma.ca_Value.w = &ma.w.Value
		ma.ca_Value.m = &ma.cm
		return &ma.ca_Value, nil
	case "GasLimit":
		if ma.s & fieldBit__LotusMessage_GasLimit != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusMessage_GasLimit}
		}
		ma.s += fieldBit__LotusMessage_GasLimit
		ma.state = maState_midValue
		ma.f = 5
		ma.ca_GasLimit.w = &ma.w.GasLimit
		ma.ca_GasLimit.m = &ma.cm
		return &ma.ca_GasLimit, nil
	case "GasFeeCap":
		if ma.s & fieldBit__LotusMessage_GasFeeCap != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusMessage_GasFeeCap}
		}
		ma.s += fieldBit__LotusMessage_GasFeeCap
		ma.state = maState_midValue
		ma.f = 6
		ma.ca_GasFeeCap.w = &ma.w.GasFeeCap
		ma.ca_GasFeeCap.m = &ma.cm
		return &ma.ca_GasFeeCap, nil
	case "GasPremium":
		if ma.s & fieldBit__LotusMessage_GasPremium != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusMessage_GasPremium}
		}
		ma.s += fieldBit__LotusMessage_GasPremium
		ma.state = maState_midValue
		ma.f = 7
		ma.ca_GasPremium.w = &ma.w.GasPremium
		ma.ca_GasPremium.m = &ma.cm
		return &ma.ca_GasPremium, nil
	case "Method":
		if ma.s & fieldBit__LotusMessage_Method != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusMessage_Method}
		}
		ma.s += fieldBit__LotusMessage_Method
		ma.state = maState_midValue
		ma.f = 8
		ma.ca_Method.w = &ma.w.Method
		ma.ca_Method.m = &ma.cm
		return &ma.ca_Method, nil
	case "Params":
		if ma.s & fieldBit__LotusMessage_Params != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__LotusMessage_Params}
		}
		ma.s += fieldBit__LotusMessage_Params
		ma.state = maState_midValue
		ma.f = 9
		ma.ca_Params.w = &ma.w.Params
		ma.ca_Params.m = &ma.cm
		return &ma.ca_Params, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"types.LotusMessage", Key:&_String{k}}
	}
}
func (ma *_LotusMessage__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_LotusMessage__KeyAssembler)(ma)
}
func (ma *_LotusMessage__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Version.w = &ma.w.Version
		ma.ca_Version.m = &ma.cm
		return &ma.ca_Version
	case 1:
		ma.ca_To.w = &ma.w.To
		ma.ca_To.m = &ma.cm
		return &ma.ca_To
	case 2:
		ma.ca_From.w = &ma.w.From
		ma.ca_From.m = &ma.cm
		return &ma.ca_From
	case 3:
		ma.ca_Nonce.w = &ma.w.Nonce
		ma.ca_Nonce.m = &ma.cm
		return &ma.ca_Nonce
	case 4:
		ma.ca_Value.w = &ma.w.Value
		ma.ca_Value.m = &ma.cm
		return &ma.ca_Value
	case 5:
		ma.ca_GasLimit.w = &ma.w.GasLimit
		ma.ca_GasLimit.m = &ma.cm
		return &ma.ca_GasLimit
	case 6:
		ma.ca_GasFeeCap.w = &ma.w.GasFeeCap
		ma.ca_GasFeeCap.m = &ma.cm
		return &ma.ca_GasFeeCap
	case 7:
		ma.ca_GasPremium.w = &ma.w.GasPremium
		ma.ca_GasPremium.m = &ma.cm
		return &ma.ca_GasPremium
	case 8:
		ma.ca_Method.w = &ma.w.Method
		ma.ca_Method.m = &ma.cm
		return &ma.ca_Method
	case 9:
		ma.ca_Params.w = &ma.w.Params
		ma.ca_Params.m = &ma.cm
		return &ma.ca_Params
	default:
		panic("unreachable")
	}
}
func (ma *_LotusMessage__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_LotusMessage__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_LotusMessage__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _LotusMessage__KeyAssembler _LotusMessage__Assembler
func (_LotusMessage__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"types.LotusMessage.KeyAssembler"}.BeginMap(0)
}
func (_LotusMessage__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"types.LotusMessage.KeyAssembler"}.BeginList(0)
}
func (na *_LotusMessage__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"types.LotusMessage.KeyAssembler"}.AssignNull()
}
func (_LotusMessage__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"types.LotusMessage.KeyAssembler"}.AssignBool(false)
}
func (_LotusMessage__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"types.LotusMessage.KeyAssembler"}.AssignInt(0)
}
func (_LotusMessage__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"types.LotusMessage.KeyAssembler"}.AssignFloat(0)
}
func (ka *_LotusMessage__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Version":
		if ka.s & fieldBit__LotusMessage_Version != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusMessage_Version}
		}
		ka.s += fieldBit__LotusMessage_Version
		ka.state = maState_expectValue
		ka.f = 0
	case "To":
		if ka.s & fieldBit__LotusMessage_To != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusMessage_To}
		}
		ka.s += fieldBit__LotusMessage_To
		ka.state = maState_expectValue
		ka.f = 1
	case "From":
		if ka.s & fieldBit__LotusMessage_From != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusMessage_From}
		}
		ka.s += fieldBit__LotusMessage_From
		ka.state = maState_expectValue
		ka.f = 2
	case "Nonce":
		if ka.s & fieldBit__LotusMessage_Nonce != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusMessage_Nonce}
		}
		ka.s += fieldBit__LotusMessage_Nonce
		ka.state = maState_expectValue
		ka.f = 3
	case "Value":
		if ka.s & fieldBit__LotusMessage_Value != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusMessage_Value}
		}
		ka.s += fieldBit__LotusMessage_Value
		ka.state = maState_expectValue
		ka.f = 4
	case "GasLimit":
		if ka.s & fieldBit__LotusMessage_GasLimit != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusMessage_GasLimit}
		}
		ka.s += fieldBit__LotusMessage_GasLimit
		ka.state = maState_expectValue
		ka.f = 5
	case "GasFeeCap":
		if ka.s & fieldBit__LotusMessage_GasFeeCap != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusMessage_GasFeeCap}
		}
		ka.s += fieldBit__LotusMessage_GasFeeCap
		ka.state = maState_expectValue
		ka.f = 6
	case "GasPremium":
		if ka.s & fieldBit__LotusMessage_GasPremium != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusMessage_GasPremium}
		}
		ka.s += fieldBit__LotusMessage_GasPremium
		ka.state = maState_expectValue
		ka.f = 7
	case "Method":
		if ka.s & fieldBit__LotusMessage_Method != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusMessage_Method}
		}
		ka.s += fieldBit__LotusMessage_Method
		ka.state = maState_expectValue
		ka.f = 8
	case "Params":
		if ka.s & fieldBit__LotusMessage_Params != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__LotusMessage_Params}
		}
		ka.s += fieldBit__LotusMessage_Params
		ka.state = maState_expectValue
		ka.f = 9
	default:
		return ipld.ErrInvalidKey{TypeName:"types.LotusMessage", Key:&_String{k}}
	}
	return nil
}
func (_LotusMessage__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"types.LotusMessage.KeyAssembler"}.AssignBytes(nil)
}
func (_LotusMessage__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"types.LotusMessage.KeyAssembler"}.AssignLink(nil)
}
func (ka *_LotusMessage__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_LotusMessage__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (LotusMessage) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n LotusMessage) Representation() ipld.Node {
	return (*_LotusMessage__Repr)(n)
}
type _LotusMessage__Repr _LotusMessage
var _ ipld.Node = &_LotusMessage__Repr{}
func (_LotusMessage__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_List
}
func (_LotusMessage__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"types.LotusMessage.Repr"}.LookupByString("")
}
func (n *_LotusMessage__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ki, err := key.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(ki)
}
func (n *_LotusMessage__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	switch idx {
	case 0:
		return n.Version.Representation(), nil
	case 1:
		return n.To.Representation(), nil
	case 2:
		return n.From.Representation(), nil
	case 3:
		return n.Nonce.Representation(), nil
	case 4:
		return n.Value.Representation(), nil
	case 5:
		return n.GasLimit.Representation(), nil
	case 6:
		return n.GasFeeCap.Representation(), nil
	case 7:
		return n.GasPremium.Representation(), nil
	case 8:
		return n.Method.Representation(), nil
	case 9:
		return n.Params.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(idx)}
	}
}
func (n _LotusMessage__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "types.LotusMessage.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_LotusMessage__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (n *_LotusMessage__Repr) ListIterator() ipld.ListIterator {
	return &_LotusMessage__ReprListItr{n, 0}
}

type _LotusMessage__ReprListItr struct {
	n   *_LotusMessage__Repr
	idx int
	
}

func (itr *_LotusMessage__ReprListItr) Next() (idx int, v ipld.Node, err error) {
	if itr.idx >= 10 {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		idx = itr.idx
		v = itr.n.Version.Representation()
	case 1:
		idx = itr.idx
		v = itr.n.To.Representation()
	case 2:
		idx = itr.idx
		v = itr.n.From.Representation()
	case 3:
		idx = itr.idx
		v = itr.n.Nonce.Representation()
	case 4:
		idx = itr.idx
		v = itr.n.Value.Representation()
	case 5:
		idx = itr.idx
		v = itr.n.GasLimit.Representation()
	case 6:
		idx = itr.idx
		v = itr.n.GasFeeCap.Representation()
	case 7:
		idx = itr.idx
		v = itr.n.GasPremium.Representation()
	case 8:
		idx = itr.idx
		v = itr.n.Method.Representation()
	case 9:
		idx = itr.idx
		v = itr.n.Params.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_LotusMessage__ReprListItr) Done() bool {
	return itr.idx >= 10
}

func (rn *_LotusMessage__Repr) Length() int {
	l := 10
	return l
}
func (_LotusMessage__Repr) IsAbsent() bool {
	return false
}
func (_LotusMessage__Repr) IsNull() bool {
	return false
}
func (_LotusMessage__Repr) AsBool() (bool, error) {
	return mixins.List{"types.LotusMessage.Repr"}.AsBool()
}
func (_LotusMessage__Repr) AsInt() (int, error) {
	return mixins.List{"types.LotusMessage.Repr"}.AsInt()
}
func (_LotusMessage__Repr) AsFloat() (float64, error) {
	return mixins.List{"types.LotusMessage.Repr"}.AsFloat()
}
func (_LotusMessage__Repr) AsString() (string, error) {
	return mixins.List{"types.LotusMessage.Repr"}.AsString()
}
func (_LotusMessage__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"types.LotusMessage.Repr"}.AsBytes()
}
func (_LotusMessage__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"types.LotusMessage.Repr"}.AsLink()
}
func (_LotusMessage__Repr) Prototype() ipld.NodePrototype {
	return _LotusMessage__ReprPrototype{}
}
type _LotusMessage__ReprPrototype struct{}

func (_LotusMessage__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _LotusMessage__ReprBuilder
	nb.Reset()
	return &nb
}
type _LotusMessage__ReprBuilder struct {
	_LotusMessage__ReprAssembler
}
func (nb *_LotusMessage__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_LotusMessage__ReprBuilder) Reset() {
	var w _LotusMessage
	var m schema.Maybe
	*nb = _LotusMessage__ReprBuilder{_LotusMessage__ReprAssembler{w: &w, m: &m}}
}
type _LotusMessage__ReprAssembler struct {
	w *_LotusMessage
	m *schema.Maybe
	state laState
	f int

	cm schema.Maybe
	ca_Version _Int__ReprAssembler
	ca_To _Address__ReprAssembler
	ca_From _Address__ReprAssembler
	ca_Nonce _Int__ReprAssembler
	ca_Value _BigInt__ReprAssembler
	ca_GasLimit _Int__ReprAssembler
	ca_GasFeeCap _BigInt__ReprAssembler
	ca_GasPremium _BigInt__ReprAssembler
	ca_Method _MethodNum__ReprAssembler
	ca_Params _Bytes__ReprAssembler
	}

func (na *_LotusMessage__ReprAssembler) reset() {
	na.state = laState_initial
	na.f = 0
	na.ca_Version.reset()
	na.ca_To.reset()
	na.ca_From.reset()
	na.ca_Nonce.reset()
	na.ca_Value.reset()
	na.ca_GasLimit.reset()
	na.ca_GasFeeCap.reset()
	na.ca_GasPremium.reset()
	na.ca_Method.reset()
	na.ca_Params.reset()
}
func (_LotusMessage__ReprAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"types.LotusMessage.Repr"}.BeginMap(0)
}
func (na *_LotusMessage__ReprAssembler) BeginList(int) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_LotusMessage{}
	}
	return na, nil
}
func (na *_LotusMessage__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"types.LotusMessage.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_LotusMessage__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"types.LotusMessage.Repr"}.AssignBool(false)
}
func (_LotusMessage__ReprAssembler) AssignInt(int) error {
	return mixins.ListAssembler{"types.LotusMessage.Repr"}.AssignInt(0)
}
func (_LotusMessage__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"types.LotusMessage.Repr"}.AssignFloat(0)
}
func (_LotusMessage__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"types.LotusMessage.Repr"}.AssignString("")
}
func (_LotusMessage__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"types.LotusMessage.Repr"}.AssignBytes(nil)
}
func (_LotusMessage__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"types.LotusMessage.Repr"}.AssignLink(nil)
}
func (na *_LotusMessage__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_LotusMessage); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_List {
		return ipld.ErrWrongKind{TypeName: "types.LotusMessage.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustList, ActualKind: v.ReprKind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_LotusMessage__ReprAssembler) Prototype() ipld.NodePrototype {
	return _LotusMessage__ReprPrototype{}
}
func (la *_LotusMessage__ReprAssembler) valueFinishTidy() bool {
	switch la.f {
	case 0:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 1:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 2:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 3:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 4:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 5:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 6:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 7:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 8:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 9:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (la *_LotusMessage__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	if la.f >= 10 {
		return nil // schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(10)} // FIXME: need an error thunking assembler!  it has returned.  sigh.
	}
	la.state = laState_midValue
	switch la.f {
	case 0:
		la.ca_Version.w = &la.w.Version
		la.ca_Version.m = &la.cm
		return &la.ca_Version
	case 1:
		la.ca_To.w = &la.w.To
		la.ca_To.m = &la.cm
		return &la.ca_To
	case 2:
		la.ca_From.w = &la.w.From
		la.ca_From.m = &la.cm
		return &la.ca_From
	case 3:
		la.ca_Nonce.w = &la.w.Nonce
		la.ca_Nonce.m = &la.cm
		return &la.ca_Nonce
	case 4:
		la.ca_Value.w = &la.w.Value
		la.ca_Value.m = &la.cm
		return &la.ca_Value
	case 5:
		la.ca_GasLimit.w = &la.w.GasLimit
		la.ca_GasLimit.m = &la.cm
		return &la.ca_GasLimit
	case 6:
		la.ca_GasFeeCap.w = &la.w.GasFeeCap
		la.ca_GasFeeCap.m = &la.cm
		return &la.ca_GasFeeCap
	case 7:
		la.ca_GasPremium.w = &la.w.GasPremium
		la.ca_GasPremium.m = &la.cm
		return &la.ca_GasPremium
	case 8:
		la.ca_Method.w = &la.w.Method
		la.ca_Method.m = &la.cm
		return &la.ca_Method
	case 9:
		la.ca_Params.w = &la.w.Params
		la.ca_Params.m = &la.cm
		return &la.ca_Params
	default:
		panic("unreachable")
	}
}
func (la *_LotusMessage__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_LotusMessage__ReprAssembler) ValuePrototype(_ int) ipld.NodePrototype {
	panic("todo structbuilder tuplerepr valueprototype")
}
