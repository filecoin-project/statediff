package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _PeerID struct{ x []byte }
type PeerID = *_PeerID
func (n PeerID) Bytes() []byte {
	return n.x
}
func (_PeerID__Prototype) FromBytes(v []byte) (PeerID, error) {
	n := _PeerID{v}
	return &n, nil
}
type _PeerID__Maybe struct {
	m schema.Maybe
	v PeerID
}
type MaybePeerID = *_PeerID__Maybe

func (m MaybePeerID) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybePeerID) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybePeerID) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybePeerID) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybePeerID) Must() PeerID {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (PeerID)(&_PeerID{})
var _ schema.TypedNode = (PeerID)(&_PeerID{})
func (PeerID) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Bytes
}
func (PeerID) LookupByString(string) (ipld.Node, error) {
	return mixins.Bytes{"types.PeerID"}.LookupByString("")
}
func (PeerID) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Bytes{"types.PeerID"}.LookupByNode(nil)
}
func (PeerID) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Bytes{"types.PeerID"}.LookupByIndex(0)
}
func (PeerID) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Bytes{"types.PeerID"}.LookupBySegment(seg)
}
func (PeerID) MapIterator() ipld.MapIterator {
	return nil
}
func (PeerID) ListIterator() ipld.ListIterator {
	return nil
}
func (PeerID) Length() int {
	return -1
}
func (PeerID) IsAbsent() bool {
	return false
}
func (PeerID) IsNull() bool {
	return false
}
func (PeerID) AsBool() (bool, error) {
	return mixins.Bytes{"types.PeerID"}.AsBool()
}
func (PeerID) AsInt() (int, error) {
	return mixins.Bytes{"types.PeerID"}.AsInt()
}
func (PeerID) AsFloat() (float64, error) {
	return mixins.Bytes{"types.PeerID"}.AsFloat()
}
func (PeerID) AsString() (string, error) {
	return mixins.Bytes{"types.PeerID"}.AsString()
}
func (n PeerID) AsBytes() ([]byte, error) {
	return n.x, nil
}
func (PeerID) AsLink() (ipld.Link, error) {
	return mixins.Bytes{"types.PeerID"}.AsLink()
}
func (PeerID) Prototype() ipld.NodePrototype {
	return _PeerID__Prototype{}
}
type _PeerID__Prototype struct{}

func (_PeerID__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _PeerID__Builder
	nb.Reset()
	return &nb
}
type _PeerID__Builder struct {
	_PeerID__Assembler
}
func (nb *_PeerID__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_PeerID__Builder) Reset() {
	var w _PeerID
	var m schema.Maybe
	*nb = _PeerID__Builder{_PeerID__Assembler{w: &w, m: &m}}
}
type _PeerID__Assembler struct {
	w *_PeerID
	m *schema.Maybe
}

func (na *_PeerID__Assembler) reset() {}
func (_PeerID__Assembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.BytesAssembler{"types.PeerID"}.BeginMap(0)
}
func (_PeerID__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.BytesAssembler{"types.PeerID"}.BeginList(0)
}
func (na *_PeerID__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.BytesAssembler{"types.PeerID"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_PeerID__Assembler) AssignBool(bool) error {
	return mixins.BytesAssembler{"types.PeerID"}.AssignBool(false)
}
func (_PeerID__Assembler) AssignInt(int) error {
	return mixins.BytesAssembler{"types.PeerID"}.AssignInt(0)
}
func (_PeerID__Assembler) AssignFloat(float64) error {
	return mixins.BytesAssembler{"types.PeerID"}.AssignFloat(0)
}
func (_PeerID__Assembler) AssignString(string) error {
	return mixins.BytesAssembler{"types.PeerID"}.AssignString("")
}
func (na *_PeerID__Assembler) AssignBytes(v []byte) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_PeerID{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_PeerID__Assembler) AssignLink(ipld.Link) error {
	return mixins.BytesAssembler{"types.PeerID"}.AssignLink(nil)
}
func (na *_PeerID__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_PeerID); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsBytes(); err != nil {
		return err
	} else {
		return na.AssignBytes(v2)
	}
}
func (_PeerID__Assembler) Prototype() ipld.NodePrototype {
	return _PeerID__Prototype{}
}
func (PeerID) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n PeerID) Representation() ipld.Node {
	return (*_PeerID__Repr)(n)
}
type _PeerID__Repr = _PeerID
var _ ipld.Node = &_PeerID__Repr{}
type _PeerID__ReprPrototype = _PeerID__Prototype
type _PeerID__ReprAssembler = _PeerID__Assembler
