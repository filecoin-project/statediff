package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _CidString struct{ x string }
type CidString = *_CidString
func (n CidString) String() string {
	return n.x
}
func (_CidString__Prototype) fromString(w *_CidString, v string) error {
	*w = _CidString{v}
	return nil
}
func (_CidString__Prototype) FromString(v string) (CidString, error) {
	n := _CidString{v}
	return &n, nil
}
type _CidString__Maybe struct {
	m schema.Maybe
	v CidString
}
type MaybeCidString = *_CidString__Maybe

func (m MaybeCidString) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeCidString) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeCidString) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeCidString) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeCidString) Must() CidString {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (CidString)(&_CidString{})
var _ schema.TypedNode = (CidString)(&_CidString{})
func (CidString) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_String
}
func (CidString) LookupByString(string) (ipld.Node, error) {
	return mixins.String{"types.CidString"}.LookupByString("")
}
func (CidString) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.String{"types.CidString"}.LookupByNode(nil)
}
func (CidString) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.String{"types.CidString"}.LookupByIndex(0)
}
func (CidString) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.String{"types.CidString"}.LookupBySegment(seg)
}
func (CidString) MapIterator() ipld.MapIterator {
	return nil
}
func (CidString) ListIterator() ipld.ListIterator {
	return nil
}
func (CidString) Length() int {
	return -1
}
func (CidString) IsAbsent() bool {
	return false
}
func (CidString) IsNull() bool {
	return false
}
func (CidString) AsBool() (bool, error) {
	return mixins.String{"types.CidString"}.AsBool()
}
func (CidString) AsInt() (int, error) {
	return mixins.String{"types.CidString"}.AsInt()
}
func (CidString) AsFloat() (float64, error) {
	return mixins.String{"types.CidString"}.AsFloat()
}
func (n CidString) AsString() (string, error) {
	return n.x, nil
}
func (CidString) AsBytes() ([]byte, error) {
	return mixins.String{"types.CidString"}.AsBytes()
}
func (CidString) AsLink() (ipld.Link, error) {
	return mixins.String{"types.CidString"}.AsLink()
}
func (CidString) Prototype() ipld.NodePrototype {
	return _CidString__Prototype{}
}
type _CidString__Prototype struct{}

func (_CidString__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _CidString__Builder
	nb.Reset()
	return &nb
}
type _CidString__Builder struct {
	_CidString__Assembler
}
func (nb *_CidString__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_CidString__Builder) Reset() {
	var w _CidString
	var m schema.Maybe
	*nb = _CidString__Builder{_CidString__Assembler{w: &w, m: &m}}
}
type _CidString__Assembler struct {
	w *_CidString
	m *schema.Maybe
}

func (na *_CidString__Assembler) reset() {}
func (_CidString__Assembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"types.CidString"}.BeginMap(0)
}
func (_CidString__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"types.CidString"}.BeginList(0)
}
func (na *_CidString__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.StringAssembler{"types.CidString"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_CidString__Assembler) AssignBool(bool) error {
	return mixins.StringAssembler{"types.CidString"}.AssignBool(false)
}
func (_CidString__Assembler) AssignInt(int) error {
	return mixins.StringAssembler{"types.CidString"}.AssignInt(0)
}
func (_CidString__Assembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"types.CidString"}.AssignFloat(0)
}
func (na *_CidString__Assembler) AssignString(v string) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_CidString{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_CidString__Assembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"types.CidString"}.AssignBytes(nil)
}
func (_CidString__Assembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"types.CidString"}.AssignLink(nil)
}
func (na *_CidString__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_CidString); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return na.AssignString(v2)
	}
}
func (_CidString__Assembler) Prototype() ipld.NodePrototype {
	return _CidString__Prototype{}
}
func (CidString) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n CidString) Representation() ipld.Node {
	return (*_CidString__Repr)(n)
}
type _CidString__Repr = _CidString
var _ ipld.Node = &_CidString__Repr{}
type _CidString__ReprPrototype = _CidString__Prototype
type _CidString__ReprAssembler = _CidString__Assembler
