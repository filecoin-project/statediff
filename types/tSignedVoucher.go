package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _SignedVoucher struct {
	ChannelAddr _Address
	TimeLockMin _ChainEpoch
	TimeLockMax _ChainEpoch
	SecretPreimage _Bytes__Maybe
	Extra _ModVerifyParams__Maybe
	Lane _Int
	Nonce _Int
	Amount _BigInt
	MinSettleHeight _ChainEpoch__Maybe
	Merges _List__Merge__Maybe
	Signature _Signature__Maybe
}
type SignedVoucher = *_SignedVoucher

func (n _SignedVoucher) FieldChannelAddr()	Address {
	return &n.ChannelAddr
}
func (n _SignedVoucher) FieldTimeLockMin()	ChainEpoch {
	return &n.TimeLockMin
}
func (n _SignedVoucher) FieldTimeLockMax()	ChainEpoch {
	return &n.TimeLockMax
}
func (n _SignedVoucher) FieldSecretPreimage()	MaybeBytes {
	return &n.SecretPreimage
}
func (n _SignedVoucher) FieldExtra()	MaybeModVerifyParams {
	return &n.Extra
}
func (n _SignedVoucher) FieldLane()	Int {
	return &n.Lane
}
func (n _SignedVoucher) FieldNonce()	Int {
	return &n.Nonce
}
func (n _SignedVoucher) FieldAmount()	BigInt {
	return &n.Amount
}
func (n _SignedVoucher) FieldMinSettleHeight()	MaybeChainEpoch {
	return &n.MinSettleHeight
}
func (n _SignedVoucher) FieldMerges()	MaybeList__Merge {
	return &n.Merges
}
func (n _SignedVoucher) FieldSignature()	MaybeSignature {
	return &n.Signature
}
type _SignedVoucher__Maybe struct {
	m schema.Maybe
	v SignedVoucher
}
type MaybeSignedVoucher = *_SignedVoucher__Maybe

func (m MaybeSignedVoucher) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeSignedVoucher) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeSignedVoucher) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeSignedVoucher) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeSignedVoucher) Must() SignedVoucher {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__SignedVoucher_ChannelAddr = _String{"ChannelAddr"}
	fieldName__SignedVoucher_TimeLockMin = _String{"TimeLockMin"}
	fieldName__SignedVoucher_TimeLockMax = _String{"TimeLockMax"}
	fieldName__SignedVoucher_SecretPreimage = _String{"SecretPreimage"}
	fieldName__SignedVoucher_Extra = _String{"Extra"}
	fieldName__SignedVoucher_Lane = _String{"Lane"}
	fieldName__SignedVoucher_Nonce = _String{"Nonce"}
	fieldName__SignedVoucher_Amount = _String{"Amount"}
	fieldName__SignedVoucher_MinSettleHeight = _String{"MinSettleHeight"}
	fieldName__SignedVoucher_Merges = _String{"Merges"}
	fieldName__SignedVoucher_Signature = _String{"Signature"}
)
var _ ipld.Node = (SignedVoucher)(&_SignedVoucher{})
var _ schema.TypedNode = (SignedVoucher)(&_SignedVoucher{})
func (SignedVoucher) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n SignedVoucher) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "ChannelAddr":
		return &n.ChannelAddr, nil
	case "TimeLockMin":
		return &n.TimeLockMin, nil
	case "TimeLockMax":
		return &n.TimeLockMax, nil
	case "SecretPreimage":
		if n.SecretPreimage.m == schema.Maybe_Absent {
			return ipld.Absent, nil
		}
		return n.SecretPreimage.v, nil
	case "Extra":
		if n.Extra.m == schema.Maybe_Absent {
			return ipld.Absent, nil
		}
		if n.Extra.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.Extra.v, nil
	case "Lane":
		return &n.Lane, nil
	case "Nonce":
		return &n.Nonce, nil
	case "Amount":
		return &n.Amount, nil
	case "MinSettleHeight":
		if n.MinSettleHeight.m == schema.Maybe_Absent {
			return ipld.Absent, nil
		}
		return n.MinSettleHeight.v, nil
	case "Merges":
		if n.Merges.m == schema.Maybe_Absent {
			return ipld.Absent, nil
		}
		return n.Merges.v, nil
	case "Signature":
		if n.Signature.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.Signature.v, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n SignedVoucher) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (SignedVoucher) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"types.SignedVoucher"}.LookupByIndex(0)
}
func (n SignedVoucher) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n SignedVoucher) MapIterator() ipld.MapIterator {
	return &_SignedVoucher__MapItr{n, 0}
}

type _SignedVoucher__MapItr struct {
	n SignedVoucher
	idx  int
}

func (itr *_SignedVoucher__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 11 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__SignedVoucher_ChannelAddr
		v = &itr.n.ChannelAddr
	case 1:
		k = &fieldName__SignedVoucher_TimeLockMin
		v = &itr.n.TimeLockMin
	case 2:
		k = &fieldName__SignedVoucher_TimeLockMax
		v = &itr.n.TimeLockMax
	case 3:
		k = &fieldName__SignedVoucher_SecretPreimage
		if itr.n.SecretPreimage.m == schema.Maybe_Absent {
			v = ipld.Absent
			break
		}
		v = itr.n.SecretPreimage.v
	case 4:
		k = &fieldName__SignedVoucher_Extra
		if itr.n.Extra.m == schema.Maybe_Absent {
			v = ipld.Absent
			break
		}
		if itr.n.Extra.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.Extra.v
	case 5:
		k = &fieldName__SignedVoucher_Lane
		v = &itr.n.Lane
	case 6:
		k = &fieldName__SignedVoucher_Nonce
		v = &itr.n.Nonce
	case 7:
		k = &fieldName__SignedVoucher_Amount
		v = &itr.n.Amount
	case 8:
		k = &fieldName__SignedVoucher_MinSettleHeight
		if itr.n.MinSettleHeight.m == schema.Maybe_Absent {
			v = ipld.Absent
			break
		}
		v = itr.n.MinSettleHeight.v
	case 9:
		k = &fieldName__SignedVoucher_Merges
		if itr.n.Merges.m == schema.Maybe_Absent {
			v = ipld.Absent
			break
		}
		v = itr.n.Merges.v
	case 10:
		k = &fieldName__SignedVoucher_Signature
		if itr.n.Signature.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.Signature.v
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_SignedVoucher__MapItr) Done() bool {
	return itr.idx >= 11
}

func (SignedVoucher) ListIterator() ipld.ListIterator {
	return nil
}
func (SignedVoucher) Length() int {
	return 11
}
func (SignedVoucher) IsAbsent() bool {
	return false
}
func (SignedVoucher) IsNull() bool {
	return false
}
func (SignedVoucher) AsBool() (bool, error) {
	return mixins.Map{"types.SignedVoucher"}.AsBool()
}
func (SignedVoucher) AsInt() (int, error) {
	return mixins.Map{"types.SignedVoucher"}.AsInt()
}
func (SignedVoucher) AsFloat() (float64, error) {
	return mixins.Map{"types.SignedVoucher"}.AsFloat()
}
func (SignedVoucher) AsString() (string, error) {
	return mixins.Map{"types.SignedVoucher"}.AsString()
}
func (SignedVoucher) AsBytes() ([]byte, error) {
	return mixins.Map{"types.SignedVoucher"}.AsBytes()
}
func (SignedVoucher) AsLink() (ipld.Link, error) {
	return mixins.Map{"types.SignedVoucher"}.AsLink()
}
func (SignedVoucher) Prototype() ipld.NodePrototype {
	return _SignedVoucher__Prototype{}
}
type _SignedVoucher__Prototype struct{}

func (_SignedVoucher__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _SignedVoucher__Builder
	nb.Reset()
	return &nb
}
type _SignedVoucher__Builder struct {
	_SignedVoucher__Assembler
}
func (nb *_SignedVoucher__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_SignedVoucher__Builder) Reset() {
	var w _SignedVoucher
	var m schema.Maybe
	*nb = _SignedVoucher__Builder{_SignedVoucher__Assembler{w: &w, m: &m}}
}
type _SignedVoucher__Assembler struct {
	w *_SignedVoucher
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_ChannelAddr _Address__Assembler
	ca_TimeLockMin _ChainEpoch__Assembler
	ca_TimeLockMax _ChainEpoch__Assembler
	ca_SecretPreimage _Bytes__Assembler
	ca_Extra _ModVerifyParams__Assembler
	ca_Lane _Int__Assembler
	ca_Nonce _Int__Assembler
	ca_Amount _BigInt__Assembler
	ca_MinSettleHeight _ChainEpoch__Assembler
	ca_Merges _List__Merge__Assembler
	ca_Signature _Signature__Assembler
	}

func (na *_SignedVoucher__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_ChannelAddr.reset()
	na.ca_TimeLockMin.reset()
	na.ca_TimeLockMax.reset()
	na.ca_SecretPreimage.reset()
	na.ca_Extra.reset()
	na.ca_Lane.reset()
	na.ca_Nonce.reset()
	na.ca_Amount.reset()
	na.ca_MinSettleHeight.reset()
	na.ca_Merges.reset()
	na.ca_Signature.reset()
}

var (
	fieldBit__SignedVoucher_ChannelAddr = 1 << 0
	fieldBit__SignedVoucher_TimeLockMin = 1 << 1
	fieldBit__SignedVoucher_TimeLockMax = 1 << 2
	fieldBit__SignedVoucher_SecretPreimage = 1 << 3
	fieldBit__SignedVoucher_Extra = 1 << 4
	fieldBit__SignedVoucher_Lane = 1 << 5
	fieldBit__SignedVoucher_Nonce = 1 << 6
	fieldBit__SignedVoucher_Amount = 1 << 7
	fieldBit__SignedVoucher_MinSettleHeight = 1 << 8
	fieldBit__SignedVoucher_Merges = 1 << 9
	fieldBit__SignedVoucher_Signature = 1 << 10
	fieldBits__SignedVoucher_sufficient = 0 + 1 << 0 + 1 << 1 + 1 << 2 + 1 << 5 + 1 << 6 + 1 << 7 + 1 << 10
)
func (na *_SignedVoucher__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_SignedVoucher{}
	}
	return na, nil
}
func (_SignedVoucher__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"types.SignedVoucher"}.BeginList(0)
}
func (na *_SignedVoucher__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"types.SignedVoucher"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_SignedVoucher__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"types.SignedVoucher"}.AssignBool(false)
}
func (_SignedVoucher__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"types.SignedVoucher"}.AssignInt(0)
}
func (_SignedVoucher__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"types.SignedVoucher"}.AssignFloat(0)
}
func (_SignedVoucher__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"types.SignedVoucher"}.AssignString("")
}
func (_SignedVoucher__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"types.SignedVoucher"}.AssignBytes(nil)
}
func (_SignedVoucher__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"types.SignedVoucher"}.AssignLink(nil)
}
func (na *_SignedVoucher__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_SignedVoucher); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "types.SignedVoucher", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_SignedVoucher__Assembler) Prototype() ipld.NodePrototype {
	return _SignedVoucher__Prototype{}
}
func (ma *_SignedVoucher__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ChannelAddr.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_TimeLockMin.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_TimeLockMax.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.w.SecretPreimage.m {
		case schema.Maybe_Value:
			ma.w.SecretPreimage.v = ma.ca_SecretPreimage.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 4:
		switch ma.w.Extra.m {
		case schema.Maybe_Null:
			ma.state = maState_initial
			return true
		case schema.Maybe_Value:
			ma.w.Extra.v = ma.ca_Extra.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 5:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Lane.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 6:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Nonce.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 7:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Amount.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 8:
		switch ma.w.MinSettleHeight.m {
		case schema.Maybe_Value:
			ma.w.MinSettleHeight.v = ma.ca_MinSettleHeight.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 9:
		switch ma.w.Merges.m {
		case schema.Maybe_Value:
			ma.w.Merges.v = ma.ca_Merges.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 10:
		switch ma.w.Signature.m {
		case schema.Maybe_Null:
			ma.state = maState_initial
			return true
		case schema.Maybe_Value:
			ma.w.Signature.v = ma.ca_Signature.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_SignedVoucher__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "ChannelAddr":
		if ma.s & fieldBit__SignedVoucher_ChannelAddr != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__SignedVoucher_ChannelAddr}
		}
		ma.s += fieldBit__SignedVoucher_ChannelAddr
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_ChannelAddr.w = &ma.w.ChannelAddr
		ma.ca_ChannelAddr.m = &ma.cm
		return &ma.ca_ChannelAddr, nil
	case "TimeLockMin":
		if ma.s & fieldBit__SignedVoucher_TimeLockMin != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__SignedVoucher_TimeLockMin}
		}
		ma.s += fieldBit__SignedVoucher_TimeLockMin
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_TimeLockMin.w = &ma.w.TimeLockMin
		ma.ca_TimeLockMin.m = &ma.cm
		return &ma.ca_TimeLockMin, nil
	case "TimeLockMax":
		if ma.s & fieldBit__SignedVoucher_TimeLockMax != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__SignedVoucher_TimeLockMax}
		}
		ma.s += fieldBit__SignedVoucher_TimeLockMax
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_TimeLockMax.w = &ma.w.TimeLockMax
		ma.ca_TimeLockMax.m = &ma.cm
		return &ma.ca_TimeLockMax, nil
	case "SecretPreimage":
		if ma.s & fieldBit__SignedVoucher_SecretPreimage != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__SignedVoucher_SecretPreimage}
		}
		ma.s += fieldBit__SignedVoucher_SecretPreimage
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_SecretPreimage.w = ma.w.SecretPreimage.v
		ma.ca_SecretPreimage.m = &ma.w.SecretPreimage.m
		return &ma.ca_SecretPreimage, nil
	case "Extra":
		if ma.s & fieldBit__SignedVoucher_Extra != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__SignedVoucher_Extra}
		}
		ma.s += fieldBit__SignedVoucher_Extra
		ma.state = maState_midValue
		ma.f = 4
		ma.ca_Extra.w = ma.w.Extra.v
		ma.ca_Extra.m = &ma.w.Extra.m
		ma.w.Extra.m = allowNull
		return &ma.ca_Extra, nil
	case "Lane":
		if ma.s & fieldBit__SignedVoucher_Lane != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__SignedVoucher_Lane}
		}
		ma.s += fieldBit__SignedVoucher_Lane
		ma.state = maState_midValue
		ma.f = 5
		ma.ca_Lane.w = &ma.w.Lane
		ma.ca_Lane.m = &ma.cm
		return &ma.ca_Lane, nil
	case "Nonce":
		if ma.s & fieldBit__SignedVoucher_Nonce != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__SignedVoucher_Nonce}
		}
		ma.s += fieldBit__SignedVoucher_Nonce
		ma.state = maState_midValue
		ma.f = 6
		ma.ca_Nonce.w = &ma.w.Nonce
		ma.ca_Nonce.m = &ma.cm
		return &ma.ca_Nonce, nil
	case "Amount":
		if ma.s & fieldBit__SignedVoucher_Amount != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__SignedVoucher_Amount}
		}
		ma.s += fieldBit__SignedVoucher_Amount
		ma.state = maState_midValue
		ma.f = 7
		ma.ca_Amount.w = &ma.w.Amount
		ma.ca_Amount.m = &ma.cm
		return &ma.ca_Amount, nil
	case "MinSettleHeight":
		if ma.s & fieldBit__SignedVoucher_MinSettleHeight != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__SignedVoucher_MinSettleHeight}
		}
		ma.s += fieldBit__SignedVoucher_MinSettleHeight
		ma.state = maState_midValue
		ma.f = 8
		ma.ca_MinSettleHeight.w = ma.w.MinSettleHeight.v
		ma.ca_MinSettleHeight.m = &ma.w.MinSettleHeight.m
		return &ma.ca_MinSettleHeight, nil
	case "Merges":
		if ma.s & fieldBit__SignedVoucher_Merges != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__SignedVoucher_Merges}
		}
		ma.s += fieldBit__SignedVoucher_Merges
		ma.state = maState_midValue
		ma.f = 9
		ma.ca_Merges.w = ma.w.Merges.v
		ma.ca_Merges.m = &ma.w.Merges.m
		return &ma.ca_Merges, nil
	case "Signature":
		if ma.s & fieldBit__SignedVoucher_Signature != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__SignedVoucher_Signature}
		}
		ma.s += fieldBit__SignedVoucher_Signature
		ma.state = maState_midValue
		ma.f = 10
		ma.ca_Signature.w = ma.w.Signature.v
		ma.ca_Signature.m = &ma.w.Signature.m
		ma.w.Signature.m = allowNull
		return &ma.ca_Signature, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"types.SignedVoucher", Key:&_String{k}}
	}
}
func (ma *_SignedVoucher__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_SignedVoucher__KeyAssembler)(ma)
}
func (ma *_SignedVoucher__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_ChannelAddr.w = &ma.w.ChannelAddr
		ma.ca_ChannelAddr.m = &ma.cm
		return &ma.ca_ChannelAddr
	case 1:
		ma.ca_TimeLockMin.w = &ma.w.TimeLockMin
		ma.ca_TimeLockMin.m = &ma.cm
		return &ma.ca_TimeLockMin
	case 2:
		ma.ca_TimeLockMax.w = &ma.w.TimeLockMax
		ma.ca_TimeLockMax.m = &ma.cm
		return &ma.ca_TimeLockMax
	case 3:
		ma.ca_SecretPreimage.w = ma.w.SecretPreimage.v
		ma.ca_SecretPreimage.m = &ma.w.SecretPreimage.m
		return &ma.ca_SecretPreimage
	case 4:
		ma.ca_Extra.w = ma.w.Extra.v
		ma.ca_Extra.m = &ma.w.Extra.m
		ma.w.Extra.m = allowNull
		return &ma.ca_Extra
	case 5:
		ma.ca_Lane.w = &ma.w.Lane
		ma.ca_Lane.m = &ma.cm
		return &ma.ca_Lane
	case 6:
		ma.ca_Nonce.w = &ma.w.Nonce
		ma.ca_Nonce.m = &ma.cm
		return &ma.ca_Nonce
	case 7:
		ma.ca_Amount.w = &ma.w.Amount
		ma.ca_Amount.m = &ma.cm
		return &ma.ca_Amount
	case 8:
		ma.ca_MinSettleHeight.w = ma.w.MinSettleHeight.v
		ma.ca_MinSettleHeight.m = &ma.w.MinSettleHeight.m
		return &ma.ca_MinSettleHeight
	case 9:
		ma.ca_Merges.w = ma.w.Merges.v
		ma.ca_Merges.m = &ma.w.Merges.m
		return &ma.ca_Merges
	case 10:
		ma.ca_Signature.w = ma.w.Signature.v
		ma.ca_Signature.m = &ma.w.Signature.m
		ma.w.Signature.m = allowNull
		return &ma.ca_Signature
	default:
		panic("unreachable")
	}
}
func (ma *_SignedVoucher__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_SignedVoucher__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_SignedVoucher__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _SignedVoucher__KeyAssembler _SignedVoucher__Assembler
func (_SignedVoucher__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"types.SignedVoucher.KeyAssembler"}.BeginMap(0)
}
func (_SignedVoucher__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"types.SignedVoucher.KeyAssembler"}.BeginList(0)
}
func (na *_SignedVoucher__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"types.SignedVoucher.KeyAssembler"}.AssignNull()
}
func (_SignedVoucher__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"types.SignedVoucher.KeyAssembler"}.AssignBool(false)
}
func (_SignedVoucher__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"types.SignedVoucher.KeyAssembler"}.AssignInt(0)
}
func (_SignedVoucher__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"types.SignedVoucher.KeyAssembler"}.AssignFloat(0)
}
func (ka *_SignedVoucher__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "ChannelAddr":
		if ka.s & fieldBit__SignedVoucher_ChannelAddr != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__SignedVoucher_ChannelAddr}
		}
		ka.s += fieldBit__SignedVoucher_ChannelAddr
		ka.state = maState_expectValue
		ka.f = 0
	case "TimeLockMin":
		if ka.s & fieldBit__SignedVoucher_TimeLockMin != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__SignedVoucher_TimeLockMin}
		}
		ka.s += fieldBit__SignedVoucher_TimeLockMin
		ka.state = maState_expectValue
		ka.f = 1
	case "TimeLockMax":
		if ka.s & fieldBit__SignedVoucher_TimeLockMax != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__SignedVoucher_TimeLockMax}
		}
		ka.s += fieldBit__SignedVoucher_TimeLockMax
		ka.state = maState_expectValue
		ka.f = 2
	case "SecretPreimage":
		if ka.s & fieldBit__SignedVoucher_SecretPreimage != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__SignedVoucher_SecretPreimage}
		}
		ka.s += fieldBit__SignedVoucher_SecretPreimage
		ka.state = maState_expectValue
		ka.f = 3
	case "Extra":
		if ka.s & fieldBit__SignedVoucher_Extra != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__SignedVoucher_Extra}
		}
		ka.s += fieldBit__SignedVoucher_Extra
		ka.state = maState_expectValue
		ka.f = 4
	case "Lane":
		if ka.s & fieldBit__SignedVoucher_Lane != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__SignedVoucher_Lane}
		}
		ka.s += fieldBit__SignedVoucher_Lane
		ka.state = maState_expectValue
		ka.f = 5
	case "Nonce":
		if ka.s & fieldBit__SignedVoucher_Nonce != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__SignedVoucher_Nonce}
		}
		ka.s += fieldBit__SignedVoucher_Nonce
		ka.state = maState_expectValue
		ka.f = 6
	case "Amount":
		if ka.s & fieldBit__SignedVoucher_Amount != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__SignedVoucher_Amount}
		}
		ka.s += fieldBit__SignedVoucher_Amount
		ka.state = maState_expectValue
		ka.f = 7
	case "MinSettleHeight":
		if ka.s & fieldBit__SignedVoucher_MinSettleHeight != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__SignedVoucher_MinSettleHeight}
		}
		ka.s += fieldBit__SignedVoucher_MinSettleHeight
		ka.state = maState_expectValue
		ka.f = 8
	case "Merges":
		if ka.s & fieldBit__SignedVoucher_Merges != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__SignedVoucher_Merges}
		}
		ka.s += fieldBit__SignedVoucher_Merges
		ka.state = maState_expectValue
		ka.f = 9
	case "Signature":
		if ka.s & fieldBit__SignedVoucher_Signature != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__SignedVoucher_Signature}
		}
		ka.s += fieldBit__SignedVoucher_Signature
		ka.state = maState_expectValue
		ka.f = 10
	default:
		return ipld.ErrInvalidKey{TypeName:"types.SignedVoucher", Key:&_String{k}}
	}
	return nil
}
func (_SignedVoucher__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"types.SignedVoucher.KeyAssembler"}.AssignBytes(nil)
}
func (_SignedVoucher__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"types.SignedVoucher.KeyAssembler"}.AssignLink(nil)
}
func (ka *_SignedVoucher__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_SignedVoucher__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (SignedVoucher) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n SignedVoucher) Representation() ipld.Node {
	return (*_SignedVoucher__Repr)(n)
}
type _SignedVoucher__Repr _SignedVoucher
var _ ipld.Node = &_SignedVoucher__Repr{}
func (_SignedVoucher__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_List
}
func (_SignedVoucher__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"types.SignedVoucher.Repr"}.LookupByString("")
}
func (n *_SignedVoucher__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ki, err := key.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(ki)
}
func (n *_SignedVoucher__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	switch idx {
	case 0:
		return n.ChannelAddr.Representation(), nil
	case 1:
		return n.TimeLockMin.Representation(), nil
	case 2:
		return n.TimeLockMax.Representation(), nil
	case 3:
		if n.SecretPreimage.m == schema.Maybe_Absent {
			return ipld.Absent, ipld.ErrNotExists{ipld.PathSegmentOfInt(idx)}
		}
		return n.SecretPreimage.v.Representation(), nil
	case 4:
		if n.Extra.m == schema.Maybe_Absent {
			return ipld.Absent, ipld.ErrNotExists{ipld.PathSegmentOfInt(idx)}
		}
		if n.Extra.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.Extra.v.Representation(), nil
	case 5:
		return n.Lane.Representation(), nil
	case 6:
		return n.Nonce.Representation(), nil
	case 7:
		return n.Amount.Representation(), nil
	case 8:
		if n.MinSettleHeight.m == schema.Maybe_Absent {
			return ipld.Absent, ipld.ErrNotExists{ipld.PathSegmentOfInt(idx)}
		}
		return n.MinSettleHeight.v.Representation(), nil
	case 9:
		if n.Merges.m == schema.Maybe_Absent {
			return ipld.Absent, ipld.ErrNotExists{ipld.PathSegmentOfInt(idx)}
		}
		return n.Merges.v.Representation(), nil
	case 10:
		if n.Signature.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.Signature.v.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(idx)}
	}
}
func (n _SignedVoucher__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "types.SignedVoucher.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_SignedVoucher__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (n *_SignedVoucher__Repr) ListIterator() ipld.ListIterator {
	return &_SignedVoucher__ReprListItr{n, 0}
}

type _SignedVoucher__ReprListItr struct {
	n   *_SignedVoucher__Repr
	idx int
	
}

func (itr *_SignedVoucher__ReprListItr) Next() (idx int, v ipld.Node, err error) {
	if itr.idx >= 11 {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		idx = itr.idx
		v = itr.n.ChannelAddr.Representation()
	case 1:
		idx = itr.idx
		v = itr.n.TimeLockMin.Representation()
	case 2:
		idx = itr.idx
		v = itr.n.TimeLockMax.Representation()
	case 3:
		idx = itr.idx
		if itr.n.SecretPreimage.m == schema.Maybe_Absent {
			return -1, nil, ipld.ErrIteratorOverread{}
		}
		v = itr.n.SecretPreimage.v.Representation()
	case 4:
		idx = itr.idx
		if itr.n.Extra.m == schema.Maybe_Absent {
			return -1, nil, ipld.ErrIteratorOverread{}
		}
		if itr.n.Extra.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.Extra.v.Representation()
	case 5:
		idx = itr.idx
		v = itr.n.Lane.Representation()
	case 6:
		idx = itr.idx
		v = itr.n.Nonce.Representation()
	case 7:
		idx = itr.idx
		v = itr.n.Amount.Representation()
	case 8:
		idx = itr.idx
		if itr.n.MinSettleHeight.m == schema.Maybe_Absent {
			return -1, nil, ipld.ErrIteratorOverread{}
		}
		v = itr.n.MinSettleHeight.v.Representation()
	case 9:
		idx = itr.idx
		if itr.n.Merges.m == schema.Maybe_Absent {
			return -1, nil, ipld.ErrIteratorOverread{}
		}
		v = itr.n.Merges.v.Representation()
	case 10:
		idx = itr.idx
		if itr.n.Signature.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.Signature.v.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_SignedVoucher__ReprListItr) Done() bool {
	return itr.idx >= 11
}

func (rn *_SignedVoucher__Repr) Length() int {
	l := 11
	if rn.SecretPreimage.m == schema.Maybe_Absent {
		l--
	}
	if rn.Extra.m == schema.Maybe_Absent {
		l--
	}
	if rn.MinSettleHeight.m == schema.Maybe_Absent {
		l--
	}
	if rn.Merges.m == schema.Maybe_Absent {
		l--
	}
	return l
}
func (_SignedVoucher__Repr) IsAbsent() bool {
	return false
}
func (_SignedVoucher__Repr) IsNull() bool {
	return false
}
func (_SignedVoucher__Repr) AsBool() (bool, error) {
	return mixins.List{"types.SignedVoucher.Repr"}.AsBool()
}
func (_SignedVoucher__Repr) AsInt() (int, error) {
	return mixins.List{"types.SignedVoucher.Repr"}.AsInt()
}
func (_SignedVoucher__Repr) AsFloat() (float64, error) {
	return mixins.List{"types.SignedVoucher.Repr"}.AsFloat()
}
func (_SignedVoucher__Repr) AsString() (string, error) {
	return mixins.List{"types.SignedVoucher.Repr"}.AsString()
}
func (_SignedVoucher__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"types.SignedVoucher.Repr"}.AsBytes()
}
func (_SignedVoucher__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"types.SignedVoucher.Repr"}.AsLink()
}
func (_SignedVoucher__Repr) Prototype() ipld.NodePrototype {
	return _SignedVoucher__ReprPrototype{}
}
type _SignedVoucher__ReprPrototype struct{}

func (_SignedVoucher__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _SignedVoucher__ReprBuilder
	nb.Reset()
	return &nb
}
type _SignedVoucher__ReprBuilder struct {
	_SignedVoucher__ReprAssembler
}
func (nb *_SignedVoucher__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_SignedVoucher__ReprBuilder) Reset() {
	var w _SignedVoucher
	var m schema.Maybe
	*nb = _SignedVoucher__ReprBuilder{_SignedVoucher__ReprAssembler{w: &w, m: &m}}
}
type _SignedVoucher__ReprAssembler struct {
	w *_SignedVoucher
	m *schema.Maybe
	state laState
	f int

	cm schema.Maybe
	ca_ChannelAddr _Address__ReprAssembler
	ca_TimeLockMin _ChainEpoch__ReprAssembler
	ca_TimeLockMax _ChainEpoch__ReprAssembler
	ca_SecretPreimage _Bytes__ReprAssembler
	ca_Extra _ModVerifyParams__ReprAssembler
	ca_Lane _Int__ReprAssembler
	ca_Nonce _Int__ReprAssembler
	ca_Amount _BigInt__ReprAssembler
	ca_MinSettleHeight _ChainEpoch__ReprAssembler
	ca_Merges _List__Merge__ReprAssembler
	ca_Signature _Signature__ReprAssembler
	}

func (na *_SignedVoucher__ReprAssembler) reset() {
	na.state = laState_initial
	na.f = 0
	na.ca_ChannelAddr.reset()
	na.ca_TimeLockMin.reset()
	na.ca_TimeLockMax.reset()
	na.ca_SecretPreimage.reset()
	na.ca_Extra.reset()
	na.ca_Lane.reset()
	na.ca_Nonce.reset()
	na.ca_Amount.reset()
	na.ca_MinSettleHeight.reset()
	na.ca_Merges.reset()
	na.ca_Signature.reset()
}
func (_SignedVoucher__ReprAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"types.SignedVoucher.Repr"}.BeginMap(0)
}
func (na *_SignedVoucher__ReprAssembler) BeginList(int) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_SignedVoucher{}
	}
	return na, nil
}
func (na *_SignedVoucher__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"types.SignedVoucher.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_SignedVoucher__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"types.SignedVoucher.Repr"}.AssignBool(false)
}
func (_SignedVoucher__ReprAssembler) AssignInt(int) error {
	return mixins.ListAssembler{"types.SignedVoucher.Repr"}.AssignInt(0)
}
func (_SignedVoucher__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"types.SignedVoucher.Repr"}.AssignFloat(0)
}
func (_SignedVoucher__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"types.SignedVoucher.Repr"}.AssignString("")
}
func (_SignedVoucher__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"types.SignedVoucher.Repr"}.AssignBytes(nil)
}
func (_SignedVoucher__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"types.SignedVoucher.Repr"}.AssignLink(nil)
}
func (na *_SignedVoucher__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_SignedVoucher); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_List {
		return ipld.ErrWrongKind{TypeName: "types.SignedVoucher.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustList, ActualKind: v.ReprKind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_SignedVoucher__ReprAssembler) Prototype() ipld.NodePrototype {
	return _SignedVoucher__ReprPrototype{}
}
func (la *_SignedVoucher__ReprAssembler) valueFinishTidy() bool {
	switch la.f {
	case 0:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 1:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 2:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 3:
		switch la.w.SecretPreimage.m {
		case schema.Maybe_Value:
			la.w.SecretPreimage.v = la.ca_SecretPreimage.w
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 4:
		switch la.w.Extra.m {
		case schema.Maybe_Value:
			la.w.Extra.v = la.ca_Extra.w
			la.state = laState_initial
			la.f++
			return true
		case schema.Maybe_Null:
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 5:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 6:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 7:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 8:
		switch la.w.MinSettleHeight.m {
		case schema.Maybe_Value:
			la.w.MinSettleHeight.v = la.ca_MinSettleHeight.w
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 9:
		switch la.w.Merges.m {
		case schema.Maybe_Value:
			la.w.Merges.v = la.ca_Merges.w
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 10:
		switch la.w.Signature.m {
		case schema.Maybe_Value:
			la.w.Signature.v = la.ca_Signature.w
			la.state = laState_initial
			la.f++
			return true
		case schema.Maybe_Null:
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (la *_SignedVoucher__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	if la.f >= 11 {
		return _ErrorThunkAssembler{schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(11)}}
	}
	la.state = laState_midValue
	switch la.f {
	case 0:
		la.ca_ChannelAddr.w = &la.w.ChannelAddr
		la.ca_ChannelAddr.m = &la.cm
		return &la.ca_ChannelAddr
	case 1:
		la.ca_TimeLockMin.w = &la.w.TimeLockMin
		la.ca_TimeLockMin.m = &la.cm
		return &la.ca_TimeLockMin
	case 2:
		la.ca_TimeLockMax.w = &la.w.TimeLockMax
		la.ca_TimeLockMax.m = &la.cm
		return &la.ca_TimeLockMax
	case 3:
		la.ca_SecretPreimage.w = la.w.SecretPreimage.v
		la.ca_SecretPreimage.m = &la.w.SecretPreimage.m
		return &la.ca_SecretPreimage
	case 4:
		la.ca_Extra.w = la.w.Extra.v
		la.ca_Extra.m = &la.w.Extra.m
		la.w.Extra.m = allowNull
		return &la.ca_Extra
	case 5:
		la.ca_Lane.w = &la.w.Lane
		la.ca_Lane.m = &la.cm
		return &la.ca_Lane
	case 6:
		la.ca_Nonce.w = &la.w.Nonce
		la.ca_Nonce.m = &la.cm
		return &la.ca_Nonce
	case 7:
		la.ca_Amount.w = &la.w.Amount
		la.ca_Amount.m = &la.cm
		return &la.ca_Amount
	case 8:
		la.ca_MinSettleHeight.w = la.w.MinSettleHeight.v
		la.ca_MinSettleHeight.m = &la.w.MinSettleHeight.m
		return &la.ca_MinSettleHeight
	case 9:
		la.ca_Merges.w = la.w.Merges.v
		la.ca_Merges.m = &la.w.Merges.m
		return &la.ca_Merges
	case 10:
		la.ca_Signature.w = la.w.Signature.v
		la.ca_Signature.m = &la.w.Signature.m
		la.w.Signature.m = allowNull
		return &la.ca_Signature
	default:
		panic("unreachable")
	}
}
func (la *_SignedVoucher__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_SignedVoucher__ReprAssembler) ValuePrototype(_ int) ipld.NodePrototype {
	panic("todo structbuilder tuplerepr valueprototype")
}
