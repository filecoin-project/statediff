package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _MarketV0State struct {
	Proposals _Link__MarketV0RawDealProposal
	States _Link__MarketV0DealState
	PendingProposals _Link__MarketV0DealProposal
	EscrowTable _Link__BalanceTable
	LockedTable _Link__BalanceTable
	NextID _DealID
	DealOpsByEpoch _Link__MultimapDealID
	LastCron _ChainEpoch
	TotalClientLockedCollateral _BigInt
	TotalProviderLockedCollateral _BigInt
	TotalClientStorageFee _BigInt
}
type MarketV0State = *_MarketV0State

func (n _MarketV0State) FieldProposals()	Link__MarketV0RawDealProposal {
	return &n.Proposals
}
func (n _MarketV0State) FieldStates()	Link__MarketV0DealState {
	return &n.States
}
func (n _MarketV0State) FieldPendingProposals()	Link__MarketV0DealProposal {
	return &n.PendingProposals
}
func (n _MarketV0State) FieldEscrowTable()	Link__BalanceTable {
	return &n.EscrowTable
}
func (n _MarketV0State) FieldLockedTable()	Link__BalanceTable {
	return &n.LockedTable
}
func (n _MarketV0State) FieldNextID()	DealID {
	return &n.NextID
}
func (n _MarketV0State) FieldDealOpsByEpoch()	Link__MultimapDealID {
	return &n.DealOpsByEpoch
}
func (n _MarketV0State) FieldLastCron()	ChainEpoch {
	return &n.LastCron
}
func (n _MarketV0State) FieldTotalClientLockedCollateral()	BigInt {
	return &n.TotalClientLockedCollateral
}
func (n _MarketV0State) FieldTotalProviderLockedCollateral()	BigInt {
	return &n.TotalProviderLockedCollateral
}
func (n _MarketV0State) FieldTotalClientStorageFee()	BigInt {
	return &n.TotalClientStorageFee
}
type _MarketV0State__Maybe struct {
	m schema.Maybe
	v MarketV0State
}
type MaybeMarketV0State = *_MarketV0State__Maybe

func (m MaybeMarketV0State) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeMarketV0State) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeMarketV0State) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeMarketV0State) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeMarketV0State) Must() MarketV0State {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__MarketV0State_Proposals = _String{"Proposals"}
	fieldName__MarketV0State_States = _String{"States"}
	fieldName__MarketV0State_PendingProposals = _String{"PendingProposals"}
	fieldName__MarketV0State_EscrowTable = _String{"EscrowTable"}
	fieldName__MarketV0State_LockedTable = _String{"LockedTable"}
	fieldName__MarketV0State_NextID = _String{"NextID"}
	fieldName__MarketV0State_DealOpsByEpoch = _String{"DealOpsByEpoch"}
	fieldName__MarketV0State_LastCron = _String{"LastCron"}
	fieldName__MarketV0State_TotalClientLockedCollateral = _String{"TotalClientLockedCollateral"}
	fieldName__MarketV0State_TotalProviderLockedCollateral = _String{"TotalProviderLockedCollateral"}
	fieldName__MarketV0State_TotalClientStorageFee = _String{"TotalClientStorageFee"}
)
var _ ipld.Node = (MarketV0State)(&_MarketV0State{})
var _ schema.TypedNode = (MarketV0State)(&_MarketV0State{})
func (MarketV0State) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n MarketV0State) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Proposals":
		return &n.Proposals, nil
	case "States":
		return &n.States, nil
	case "PendingProposals":
		return &n.PendingProposals, nil
	case "EscrowTable":
		return &n.EscrowTable, nil
	case "LockedTable":
		return &n.LockedTable, nil
	case "NextID":
		return &n.NextID, nil
	case "DealOpsByEpoch":
		return &n.DealOpsByEpoch, nil
	case "LastCron":
		return &n.LastCron, nil
	case "TotalClientLockedCollateral":
		return &n.TotalClientLockedCollateral, nil
	case "TotalProviderLockedCollateral":
		return &n.TotalProviderLockedCollateral, nil
	case "TotalClientStorageFee":
		return &n.TotalClientStorageFee, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n MarketV0State) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (MarketV0State) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"types.MarketV0State"}.LookupByIndex(0)
}
func (n MarketV0State) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n MarketV0State) MapIterator() ipld.MapIterator {
	return &_MarketV0State__MapItr{n, 0}
}

type _MarketV0State__MapItr struct {
	n MarketV0State
	idx  int
}

func (itr *_MarketV0State__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 11 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__MarketV0State_Proposals
		v = &itr.n.Proposals
	case 1:
		k = &fieldName__MarketV0State_States
		v = &itr.n.States
	case 2:
		k = &fieldName__MarketV0State_PendingProposals
		v = &itr.n.PendingProposals
	case 3:
		k = &fieldName__MarketV0State_EscrowTable
		v = &itr.n.EscrowTable
	case 4:
		k = &fieldName__MarketV0State_LockedTable
		v = &itr.n.LockedTable
	case 5:
		k = &fieldName__MarketV0State_NextID
		v = &itr.n.NextID
	case 6:
		k = &fieldName__MarketV0State_DealOpsByEpoch
		v = &itr.n.DealOpsByEpoch
	case 7:
		k = &fieldName__MarketV0State_LastCron
		v = &itr.n.LastCron
	case 8:
		k = &fieldName__MarketV0State_TotalClientLockedCollateral
		v = &itr.n.TotalClientLockedCollateral
	case 9:
		k = &fieldName__MarketV0State_TotalProviderLockedCollateral
		v = &itr.n.TotalProviderLockedCollateral
	case 10:
		k = &fieldName__MarketV0State_TotalClientStorageFee
		v = &itr.n.TotalClientStorageFee
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_MarketV0State__MapItr) Done() bool {
	return itr.idx >= 11
}

func (MarketV0State) ListIterator() ipld.ListIterator {
	return nil
}
func (MarketV0State) Length() int {
	return 11
}
func (MarketV0State) IsAbsent() bool {
	return false
}
func (MarketV0State) IsNull() bool {
	return false
}
func (MarketV0State) AsBool() (bool, error) {
	return mixins.Map{"types.MarketV0State"}.AsBool()
}
func (MarketV0State) AsInt() (int, error) {
	return mixins.Map{"types.MarketV0State"}.AsInt()
}
func (MarketV0State) AsFloat() (float64, error) {
	return mixins.Map{"types.MarketV0State"}.AsFloat()
}
func (MarketV0State) AsString() (string, error) {
	return mixins.Map{"types.MarketV0State"}.AsString()
}
func (MarketV0State) AsBytes() ([]byte, error) {
	return mixins.Map{"types.MarketV0State"}.AsBytes()
}
func (MarketV0State) AsLink() (ipld.Link, error) {
	return mixins.Map{"types.MarketV0State"}.AsLink()
}
func (MarketV0State) Prototype() ipld.NodePrototype {
	return _MarketV0State__Prototype{}
}
type _MarketV0State__Prototype struct{}

func (_MarketV0State__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _MarketV0State__Builder
	nb.Reset()
	return &nb
}
type _MarketV0State__Builder struct {
	_MarketV0State__Assembler
}
func (nb *_MarketV0State__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_MarketV0State__Builder) Reset() {
	var w _MarketV0State
	var m schema.Maybe
	*nb = _MarketV0State__Builder{_MarketV0State__Assembler{w: &w, m: &m}}
}
type _MarketV0State__Assembler struct {
	w *_MarketV0State
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_Proposals _Link__MarketV0RawDealProposal__Assembler
	ca_States _Link__MarketV0DealState__Assembler
	ca_PendingProposals _Link__MarketV0DealProposal__Assembler
	ca_EscrowTable _Link__BalanceTable__Assembler
	ca_LockedTable _Link__BalanceTable__Assembler
	ca_NextID _DealID__Assembler
	ca_DealOpsByEpoch _Link__MultimapDealID__Assembler
	ca_LastCron _ChainEpoch__Assembler
	ca_TotalClientLockedCollateral _BigInt__Assembler
	ca_TotalProviderLockedCollateral _BigInt__Assembler
	ca_TotalClientStorageFee _BigInt__Assembler
	}

func (na *_MarketV0State__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Proposals.reset()
	na.ca_States.reset()
	na.ca_PendingProposals.reset()
	na.ca_EscrowTable.reset()
	na.ca_LockedTable.reset()
	na.ca_NextID.reset()
	na.ca_DealOpsByEpoch.reset()
	na.ca_LastCron.reset()
	na.ca_TotalClientLockedCollateral.reset()
	na.ca_TotalProviderLockedCollateral.reset()
	na.ca_TotalClientStorageFee.reset()
}

var (
	fieldBit__MarketV0State_Proposals = 1 << 0
	fieldBit__MarketV0State_States = 1 << 1
	fieldBit__MarketV0State_PendingProposals = 1 << 2
	fieldBit__MarketV0State_EscrowTable = 1 << 3
	fieldBit__MarketV0State_LockedTable = 1 << 4
	fieldBit__MarketV0State_NextID = 1 << 5
	fieldBit__MarketV0State_DealOpsByEpoch = 1 << 6
	fieldBit__MarketV0State_LastCron = 1 << 7
	fieldBit__MarketV0State_TotalClientLockedCollateral = 1 << 8
	fieldBit__MarketV0State_TotalProviderLockedCollateral = 1 << 9
	fieldBit__MarketV0State_TotalClientStorageFee = 1 << 10
	fieldBits__MarketV0State_sufficient = 0 + 1 << 0 + 1 << 1 + 1 << 2 + 1 << 3 + 1 << 4 + 1 << 5 + 1 << 6 + 1 << 7 + 1 << 8 + 1 << 9 + 1 << 10
)
func (na *_MarketV0State__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_MarketV0State{}
	}
	return na, nil
}
func (_MarketV0State__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"types.MarketV0State"}.BeginList(0)
}
func (na *_MarketV0State__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"types.MarketV0State"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_MarketV0State__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"types.MarketV0State"}.AssignBool(false)
}
func (_MarketV0State__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"types.MarketV0State"}.AssignInt(0)
}
func (_MarketV0State__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"types.MarketV0State"}.AssignFloat(0)
}
func (_MarketV0State__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"types.MarketV0State"}.AssignString("")
}
func (_MarketV0State__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"types.MarketV0State"}.AssignBytes(nil)
}
func (_MarketV0State__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"types.MarketV0State"}.AssignLink(nil)
}
func (na *_MarketV0State__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_MarketV0State); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "types.MarketV0State", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_MarketV0State__Assembler) Prototype() ipld.NodePrototype {
	return _MarketV0State__Prototype{}
}
func (ma *_MarketV0State__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Proposals.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_States.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_PendingProposals.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_EscrowTable.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 4:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_LockedTable.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 5:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_NextID.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 6:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_DealOpsByEpoch.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 7:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_LastCron.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 8:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_TotalClientLockedCollateral.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 9:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_TotalProviderLockedCollateral.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 10:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_TotalClientStorageFee.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_MarketV0State__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Proposals":
		if ma.s & fieldBit__MarketV0State_Proposals != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MarketV0State_Proposals}
		}
		ma.s += fieldBit__MarketV0State_Proposals
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Proposals.w = &ma.w.Proposals
		ma.ca_Proposals.m = &ma.cm
		return &ma.ca_Proposals, nil
	case "States":
		if ma.s & fieldBit__MarketV0State_States != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MarketV0State_States}
		}
		ma.s += fieldBit__MarketV0State_States
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_States.w = &ma.w.States
		ma.ca_States.m = &ma.cm
		return &ma.ca_States, nil
	case "PendingProposals":
		if ma.s & fieldBit__MarketV0State_PendingProposals != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MarketV0State_PendingProposals}
		}
		ma.s += fieldBit__MarketV0State_PendingProposals
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_PendingProposals.w = &ma.w.PendingProposals
		ma.ca_PendingProposals.m = &ma.cm
		return &ma.ca_PendingProposals, nil
	case "EscrowTable":
		if ma.s & fieldBit__MarketV0State_EscrowTable != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MarketV0State_EscrowTable}
		}
		ma.s += fieldBit__MarketV0State_EscrowTable
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_EscrowTable.w = &ma.w.EscrowTable
		ma.ca_EscrowTable.m = &ma.cm
		return &ma.ca_EscrowTable, nil
	case "LockedTable":
		if ma.s & fieldBit__MarketV0State_LockedTable != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MarketV0State_LockedTable}
		}
		ma.s += fieldBit__MarketV0State_LockedTable
		ma.state = maState_midValue
		ma.f = 4
		ma.ca_LockedTable.w = &ma.w.LockedTable
		ma.ca_LockedTable.m = &ma.cm
		return &ma.ca_LockedTable, nil
	case "NextID":
		if ma.s & fieldBit__MarketV0State_NextID != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MarketV0State_NextID}
		}
		ma.s += fieldBit__MarketV0State_NextID
		ma.state = maState_midValue
		ma.f = 5
		ma.ca_NextID.w = &ma.w.NextID
		ma.ca_NextID.m = &ma.cm
		return &ma.ca_NextID, nil
	case "DealOpsByEpoch":
		if ma.s & fieldBit__MarketV0State_DealOpsByEpoch != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MarketV0State_DealOpsByEpoch}
		}
		ma.s += fieldBit__MarketV0State_DealOpsByEpoch
		ma.state = maState_midValue
		ma.f = 6
		ma.ca_DealOpsByEpoch.w = &ma.w.DealOpsByEpoch
		ma.ca_DealOpsByEpoch.m = &ma.cm
		return &ma.ca_DealOpsByEpoch, nil
	case "LastCron":
		if ma.s & fieldBit__MarketV0State_LastCron != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MarketV0State_LastCron}
		}
		ma.s += fieldBit__MarketV0State_LastCron
		ma.state = maState_midValue
		ma.f = 7
		ma.ca_LastCron.w = &ma.w.LastCron
		ma.ca_LastCron.m = &ma.cm
		return &ma.ca_LastCron, nil
	case "TotalClientLockedCollateral":
		if ma.s & fieldBit__MarketV0State_TotalClientLockedCollateral != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MarketV0State_TotalClientLockedCollateral}
		}
		ma.s += fieldBit__MarketV0State_TotalClientLockedCollateral
		ma.state = maState_midValue
		ma.f = 8
		ma.ca_TotalClientLockedCollateral.w = &ma.w.TotalClientLockedCollateral
		ma.ca_TotalClientLockedCollateral.m = &ma.cm
		return &ma.ca_TotalClientLockedCollateral, nil
	case "TotalProviderLockedCollateral":
		if ma.s & fieldBit__MarketV0State_TotalProviderLockedCollateral != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MarketV0State_TotalProviderLockedCollateral}
		}
		ma.s += fieldBit__MarketV0State_TotalProviderLockedCollateral
		ma.state = maState_midValue
		ma.f = 9
		ma.ca_TotalProviderLockedCollateral.w = &ma.w.TotalProviderLockedCollateral
		ma.ca_TotalProviderLockedCollateral.m = &ma.cm
		return &ma.ca_TotalProviderLockedCollateral, nil
	case "TotalClientStorageFee":
		if ma.s & fieldBit__MarketV0State_TotalClientStorageFee != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MarketV0State_TotalClientStorageFee}
		}
		ma.s += fieldBit__MarketV0State_TotalClientStorageFee
		ma.state = maState_midValue
		ma.f = 10
		ma.ca_TotalClientStorageFee.w = &ma.w.TotalClientStorageFee
		ma.ca_TotalClientStorageFee.m = &ma.cm
		return &ma.ca_TotalClientStorageFee, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"types.MarketV0State", Key:&_String{k}}
	}
}
func (ma *_MarketV0State__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_MarketV0State__KeyAssembler)(ma)
}
func (ma *_MarketV0State__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Proposals.w = &ma.w.Proposals
		ma.ca_Proposals.m = &ma.cm
		return &ma.ca_Proposals
	case 1:
		ma.ca_States.w = &ma.w.States
		ma.ca_States.m = &ma.cm
		return &ma.ca_States
	case 2:
		ma.ca_PendingProposals.w = &ma.w.PendingProposals
		ma.ca_PendingProposals.m = &ma.cm
		return &ma.ca_PendingProposals
	case 3:
		ma.ca_EscrowTable.w = &ma.w.EscrowTable
		ma.ca_EscrowTable.m = &ma.cm
		return &ma.ca_EscrowTable
	case 4:
		ma.ca_LockedTable.w = &ma.w.LockedTable
		ma.ca_LockedTable.m = &ma.cm
		return &ma.ca_LockedTable
	case 5:
		ma.ca_NextID.w = &ma.w.NextID
		ma.ca_NextID.m = &ma.cm
		return &ma.ca_NextID
	case 6:
		ma.ca_DealOpsByEpoch.w = &ma.w.DealOpsByEpoch
		ma.ca_DealOpsByEpoch.m = &ma.cm
		return &ma.ca_DealOpsByEpoch
	case 7:
		ma.ca_LastCron.w = &ma.w.LastCron
		ma.ca_LastCron.m = &ma.cm
		return &ma.ca_LastCron
	case 8:
		ma.ca_TotalClientLockedCollateral.w = &ma.w.TotalClientLockedCollateral
		ma.ca_TotalClientLockedCollateral.m = &ma.cm
		return &ma.ca_TotalClientLockedCollateral
	case 9:
		ma.ca_TotalProviderLockedCollateral.w = &ma.w.TotalProviderLockedCollateral
		ma.ca_TotalProviderLockedCollateral.m = &ma.cm
		return &ma.ca_TotalProviderLockedCollateral
	case 10:
		ma.ca_TotalClientStorageFee.w = &ma.w.TotalClientStorageFee
		ma.ca_TotalClientStorageFee.m = &ma.cm
		return &ma.ca_TotalClientStorageFee
	default:
		panic("unreachable")
	}
}
func (ma *_MarketV0State__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_MarketV0State__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_MarketV0State__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _MarketV0State__KeyAssembler _MarketV0State__Assembler
func (_MarketV0State__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"types.MarketV0State.KeyAssembler"}.BeginMap(0)
}
func (_MarketV0State__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"types.MarketV0State.KeyAssembler"}.BeginList(0)
}
func (na *_MarketV0State__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"types.MarketV0State.KeyAssembler"}.AssignNull()
}
func (_MarketV0State__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"types.MarketV0State.KeyAssembler"}.AssignBool(false)
}
func (_MarketV0State__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"types.MarketV0State.KeyAssembler"}.AssignInt(0)
}
func (_MarketV0State__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"types.MarketV0State.KeyAssembler"}.AssignFloat(0)
}
func (ka *_MarketV0State__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Proposals":
		if ka.s & fieldBit__MarketV0State_Proposals != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MarketV0State_Proposals}
		}
		ka.s += fieldBit__MarketV0State_Proposals
		ka.state = maState_expectValue
		ka.f = 0
	case "States":
		if ka.s & fieldBit__MarketV0State_States != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MarketV0State_States}
		}
		ka.s += fieldBit__MarketV0State_States
		ka.state = maState_expectValue
		ka.f = 1
	case "PendingProposals":
		if ka.s & fieldBit__MarketV0State_PendingProposals != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MarketV0State_PendingProposals}
		}
		ka.s += fieldBit__MarketV0State_PendingProposals
		ka.state = maState_expectValue
		ka.f = 2
	case "EscrowTable":
		if ka.s & fieldBit__MarketV0State_EscrowTable != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MarketV0State_EscrowTable}
		}
		ka.s += fieldBit__MarketV0State_EscrowTable
		ka.state = maState_expectValue
		ka.f = 3
	case "LockedTable":
		if ka.s & fieldBit__MarketV0State_LockedTable != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MarketV0State_LockedTable}
		}
		ka.s += fieldBit__MarketV0State_LockedTable
		ka.state = maState_expectValue
		ka.f = 4
	case "NextID":
		if ka.s & fieldBit__MarketV0State_NextID != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MarketV0State_NextID}
		}
		ka.s += fieldBit__MarketV0State_NextID
		ka.state = maState_expectValue
		ka.f = 5
	case "DealOpsByEpoch":
		if ka.s & fieldBit__MarketV0State_DealOpsByEpoch != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MarketV0State_DealOpsByEpoch}
		}
		ka.s += fieldBit__MarketV0State_DealOpsByEpoch
		ka.state = maState_expectValue
		ka.f = 6
	case "LastCron":
		if ka.s & fieldBit__MarketV0State_LastCron != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MarketV0State_LastCron}
		}
		ka.s += fieldBit__MarketV0State_LastCron
		ka.state = maState_expectValue
		ka.f = 7
	case "TotalClientLockedCollateral":
		if ka.s & fieldBit__MarketV0State_TotalClientLockedCollateral != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MarketV0State_TotalClientLockedCollateral}
		}
		ka.s += fieldBit__MarketV0State_TotalClientLockedCollateral
		ka.state = maState_expectValue
		ka.f = 8
	case "TotalProviderLockedCollateral":
		if ka.s & fieldBit__MarketV0State_TotalProviderLockedCollateral != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MarketV0State_TotalProviderLockedCollateral}
		}
		ka.s += fieldBit__MarketV0State_TotalProviderLockedCollateral
		ka.state = maState_expectValue
		ka.f = 9
	case "TotalClientStorageFee":
		if ka.s & fieldBit__MarketV0State_TotalClientStorageFee != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MarketV0State_TotalClientStorageFee}
		}
		ka.s += fieldBit__MarketV0State_TotalClientStorageFee
		ka.state = maState_expectValue
		ka.f = 10
	default:
		return ipld.ErrInvalidKey{TypeName:"types.MarketV0State", Key:&_String{k}}
	}
	return nil
}
func (_MarketV0State__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"types.MarketV0State.KeyAssembler"}.AssignBytes(nil)
}
func (_MarketV0State__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"types.MarketV0State.KeyAssembler"}.AssignLink(nil)
}
func (ka *_MarketV0State__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_MarketV0State__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (MarketV0State) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n MarketV0State) Representation() ipld.Node {
	return (*_MarketV0State__Repr)(n)
}
type _MarketV0State__Repr _MarketV0State
var _ ipld.Node = &_MarketV0State__Repr{}
func (_MarketV0State__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_List
}
func (_MarketV0State__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"types.MarketV0State.Repr"}.LookupByString("")
}
func (n *_MarketV0State__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ki, err := key.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(ki)
}
func (n *_MarketV0State__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	switch idx {
	case 0:
		return n.Proposals.Representation(), nil
	case 1:
		return n.States.Representation(), nil
	case 2:
		return n.PendingProposals.Representation(), nil
	case 3:
		return n.EscrowTable.Representation(), nil
	case 4:
		return n.LockedTable.Representation(), nil
	case 5:
		return n.NextID.Representation(), nil
	case 6:
		return n.DealOpsByEpoch.Representation(), nil
	case 7:
		return n.LastCron.Representation(), nil
	case 8:
		return n.TotalClientLockedCollateral.Representation(), nil
	case 9:
		return n.TotalProviderLockedCollateral.Representation(), nil
	case 10:
		return n.TotalClientStorageFee.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(idx)}
	}
}
func (n _MarketV0State__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "types.MarketV0State.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_MarketV0State__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (n *_MarketV0State__Repr) ListIterator() ipld.ListIterator {
	return &_MarketV0State__ReprListItr{n, 0}
}

type _MarketV0State__ReprListItr struct {
	n   *_MarketV0State__Repr
	idx int
	
}

func (itr *_MarketV0State__ReprListItr) Next() (idx int, v ipld.Node, err error) {
	if itr.idx >= 11 {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		idx = itr.idx
		v = itr.n.Proposals.Representation()
	case 1:
		idx = itr.idx
		v = itr.n.States.Representation()
	case 2:
		idx = itr.idx
		v = itr.n.PendingProposals.Representation()
	case 3:
		idx = itr.idx
		v = itr.n.EscrowTable.Representation()
	case 4:
		idx = itr.idx
		v = itr.n.LockedTable.Representation()
	case 5:
		idx = itr.idx
		v = itr.n.NextID.Representation()
	case 6:
		idx = itr.idx
		v = itr.n.DealOpsByEpoch.Representation()
	case 7:
		idx = itr.idx
		v = itr.n.LastCron.Representation()
	case 8:
		idx = itr.idx
		v = itr.n.TotalClientLockedCollateral.Representation()
	case 9:
		idx = itr.idx
		v = itr.n.TotalProviderLockedCollateral.Representation()
	case 10:
		idx = itr.idx
		v = itr.n.TotalClientStorageFee.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_MarketV0State__ReprListItr) Done() bool {
	return itr.idx >= 11
}

func (rn *_MarketV0State__Repr) Length() int {
	l := 11
	return l
}
func (_MarketV0State__Repr) IsAbsent() bool {
	return false
}
func (_MarketV0State__Repr) IsNull() bool {
	return false
}
func (_MarketV0State__Repr) AsBool() (bool, error) {
	return mixins.List{"types.MarketV0State.Repr"}.AsBool()
}
func (_MarketV0State__Repr) AsInt() (int, error) {
	return mixins.List{"types.MarketV0State.Repr"}.AsInt()
}
func (_MarketV0State__Repr) AsFloat() (float64, error) {
	return mixins.List{"types.MarketV0State.Repr"}.AsFloat()
}
func (_MarketV0State__Repr) AsString() (string, error) {
	return mixins.List{"types.MarketV0State.Repr"}.AsString()
}
func (_MarketV0State__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"types.MarketV0State.Repr"}.AsBytes()
}
func (_MarketV0State__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"types.MarketV0State.Repr"}.AsLink()
}
func (_MarketV0State__Repr) Prototype() ipld.NodePrototype {
	return _MarketV0State__ReprPrototype{}
}
type _MarketV0State__ReprPrototype struct{}

func (_MarketV0State__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _MarketV0State__ReprBuilder
	nb.Reset()
	return &nb
}
type _MarketV0State__ReprBuilder struct {
	_MarketV0State__ReprAssembler
}
func (nb *_MarketV0State__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_MarketV0State__ReprBuilder) Reset() {
	var w _MarketV0State
	var m schema.Maybe
	*nb = _MarketV0State__ReprBuilder{_MarketV0State__ReprAssembler{w: &w, m: &m}}
}
type _MarketV0State__ReprAssembler struct {
	w *_MarketV0State
	m *schema.Maybe
	state laState
	f int

	cm schema.Maybe
	ca_Proposals _Link__MarketV0RawDealProposal__ReprAssembler
	ca_States _Link__MarketV0DealState__ReprAssembler
	ca_PendingProposals _Link__MarketV0DealProposal__ReprAssembler
	ca_EscrowTable _Link__BalanceTable__ReprAssembler
	ca_LockedTable _Link__BalanceTable__ReprAssembler
	ca_NextID _DealID__ReprAssembler
	ca_DealOpsByEpoch _Link__MultimapDealID__ReprAssembler
	ca_LastCron _ChainEpoch__ReprAssembler
	ca_TotalClientLockedCollateral _BigInt__ReprAssembler
	ca_TotalProviderLockedCollateral _BigInt__ReprAssembler
	ca_TotalClientStorageFee _BigInt__ReprAssembler
	}

func (na *_MarketV0State__ReprAssembler) reset() {
	na.state = laState_initial
	na.f = 0
	na.ca_Proposals.reset()
	na.ca_States.reset()
	na.ca_PendingProposals.reset()
	na.ca_EscrowTable.reset()
	na.ca_LockedTable.reset()
	na.ca_NextID.reset()
	na.ca_DealOpsByEpoch.reset()
	na.ca_LastCron.reset()
	na.ca_TotalClientLockedCollateral.reset()
	na.ca_TotalProviderLockedCollateral.reset()
	na.ca_TotalClientStorageFee.reset()
}
func (_MarketV0State__ReprAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"types.MarketV0State.Repr"}.BeginMap(0)
}
func (na *_MarketV0State__ReprAssembler) BeginList(int) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_MarketV0State{}
	}
	return na, nil
}
func (na *_MarketV0State__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"types.MarketV0State.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_MarketV0State__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"types.MarketV0State.Repr"}.AssignBool(false)
}
func (_MarketV0State__ReprAssembler) AssignInt(int) error {
	return mixins.ListAssembler{"types.MarketV0State.Repr"}.AssignInt(0)
}
func (_MarketV0State__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"types.MarketV0State.Repr"}.AssignFloat(0)
}
func (_MarketV0State__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"types.MarketV0State.Repr"}.AssignString("")
}
func (_MarketV0State__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"types.MarketV0State.Repr"}.AssignBytes(nil)
}
func (_MarketV0State__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"types.MarketV0State.Repr"}.AssignLink(nil)
}
func (na *_MarketV0State__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_MarketV0State); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_List {
		return ipld.ErrWrongKind{TypeName: "types.MarketV0State.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustList, ActualKind: v.ReprKind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_MarketV0State__ReprAssembler) Prototype() ipld.NodePrototype {
	return _MarketV0State__ReprPrototype{}
}
func (la *_MarketV0State__ReprAssembler) valueFinishTidy() bool {
	switch la.f {
	case 0:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 1:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 2:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 3:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 4:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 5:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 6:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 7:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 8:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 9:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 10:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (la *_MarketV0State__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	if la.f >= 11 {
		return nil // schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(11)} // FIXME: need an error thunking assembler!  it has returned.  sigh.
	}
	la.state = laState_midValue
	switch la.f {
	case 0:
		la.ca_Proposals.w = &la.w.Proposals
		la.ca_Proposals.m = &la.cm
		return &la.ca_Proposals
	case 1:
		la.ca_States.w = &la.w.States
		la.ca_States.m = &la.cm
		return &la.ca_States
	case 2:
		la.ca_PendingProposals.w = &la.w.PendingProposals
		la.ca_PendingProposals.m = &la.cm
		return &la.ca_PendingProposals
	case 3:
		la.ca_EscrowTable.w = &la.w.EscrowTable
		la.ca_EscrowTable.m = &la.cm
		return &la.ca_EscrowTable
	case 4:
		la.ca_LockedTable.w = &la.w.LockedTable
		la.ca_LockedTable.m = &la.cm
		return &la.ca_LockedTable
	case 5:
		la.ca_NextID.w = &la.w.NextID
		la.ca_NextID.m = &la.cm
		return &la.ca_NextID
	case 6:
		la.ca_DealOpsByEpoch.w = &la.w.DealOpsByEpoch
		la.ca_DealOpsByEpoch.m = &la.cm
		return &la.ca_DealOpsByEpoch
	case 7:
		la.ca_LastCron.w = &la.w.LastCron
		la.ca_LastCron.m = &la.cm
		return &la.ca_LastCron
	case 8:
		la.ca_TotalClientLockedCollateral.w = &la.w.TotalClientLockedCollateral
		la.ca_TotalClientLockedCollateral.m = &la.cm
		return &la.ca_TotalClientLockedCollateral
	case 9:
		la.ca_TotalProviderLockedCollateral.w = &la.w.TotalProviderLockedCollateral
		la.ca_TotalProviderLockedCollateral.m = &la.cm
		return &la.ca_TotalProviderLockedCollateral
	case 10:
		la.ca_TotalClientStorageFee.w = &la.w.TotalClientStorageFee
		la.ca_TotalClientStorageFee.m = &la.cm
		return &la.ca_TotalClientStorageFee
	default:
		panic("unreachable")
	}
}
func (la *_MarketV0State__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_MarketV0State__ReprAssembler) ValuePrototype(_ int) ipld.NodePrototype {
	panic("todo structbuilder tuplerepr valueprototype")
}
