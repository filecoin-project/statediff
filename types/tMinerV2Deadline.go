package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _MinerV2Deadline struct {
	Partitions _Link__MinerV2Partition
	ExpirationEpochs _Link
	PostSubmissions _BitField
	EarlyTerminations _BitField
	LiveSectors _Int
	TotalSectors _Int
	FaultyPower _MinerV0PowerPair
}
type MinerV2Deadline = *_MinerV2Deadline

func (n _MinerV2Deadline) FieldPartitions()	Link__MinerV2Partition {
	return &n.Partitions
}
func (n _MinerV2Deadline) FieldExpirationEpochs()	Link {
	return &n.ExpirationEpochs
}
func (n _MinerV2Deadline) FieldPostSubmissions()	BitField {
	return &n.PostSubmissions
}
func (n _MinerV2Deadline) FieldEarlyTerminations()	BitField {
	return &n.EarlyTerminations
}
func (n _MinerV2Deadline) FieldLiveSectors()	Int {
	return &n.LiveSectors
}
func (n _MinerV2Deadline) FieldTotalSectors()	Int {
	return &n.TotalSectors
}
func (n _MinerV2Deadline) FieldFaultyPower()	MinerV0PowerPair {
	return &n.FaultyPower
}
type _MinerV2Deadline__Maybe struct {
	m schema.Maybe
	v MinerV2Deadline
}
type MaybeMinerV2Deadline = *_MinerV2Deadline__Maybe

func (m MaybeMinerV2Deadline) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeMinerV2Deadline) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeMinerV2Deadline) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeMinerV2Deadline) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeMinerV2Deadline) Must() MinerV2Deadline {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__MinerV2Deadline_Partitions = _String{"Partitions"}
	fieldName__MinerV2Deadline_ExpirationEpochs = _String{"ExpirationEpochs"}
	fieldName__MinerV2Deadline_PostSubmissions = _String{"PostSubmissions"}
	fieldName__MinerV2Deadline_EarlyTerminations = _String{"EarlyTerminations"}
	fieldName__MinerV2Deadline_LiveSectors = _String{"LiveSectors"}
	fieldName__MinerV2Deadline_TotalSectors = _String{"TotalSectors"}
	fieldName__MinerV2Deadline_FaultyPower = _String{"FaultyPower"}
)
var _ ipld.Node = (MinerV2Deadline)(&_MinerV2Deadline{})
var _ schema.TypedNode = (MinerV2Deadline)(&_MinerV2Deadline{})
func (MinerV2Deadline) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n MinerV2Deadline) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Partitions":
		return &n.Partitions, nil
	case "ExpirationEpochs":
		return &n.ExpirationEpochs, nil
	case "PostSubmissions":
		return &n.PostSubmissions, nil
	case "EarlyTerminations":
		return &n.EarlyTerminations, nil
	case "LiveSectors":
		return &n.LiveSectors, nil
	case "TotalSectors":
		return &n.TotalSectors, nil
	case "FaultyPower":
		return &n.FaultyPower, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n MinerV2Deadline) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (MinerV2Deadline) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"types.MinerV2Deadline"}.LookupByIndex(0)
}
func (n MinerV2Deadline) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n MinerV2Deadline) MapIterator() ipld.MapIterator {
	return &_MinerV2Deadline__MapItr{n, 0}
}

type _MinerV2Deadline__MapItr struct {
	n MinerV2Deadline
	idx  int
}

func (itr *_MinerV2Deadline__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 7 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__MinerV2Deadline_Partitions
		v = &itr.n.Partitions
	case 1:
		k = &fieldName__MinerV2Deadline_ExpirationEpochs
		v = &itr.n.ExpirationEpochs
	case 2:
		k = &fieldName__MinerV2Deadline_PostSubmissions
		v = &itr.n.PostSubmissions
	case 3:
		k = &fieldName__MinerV2Deadline_EarlyTerminations
		v = &itr.n.EarlyTerminations
	case 4:
		k = &fieldName__MinerV2Deadline_LiveSectors
		v = &itr.n.LiveSectors
	case 5:
		k = &fieldName__MinerV2Deadline_TotalSectors
		v = &itr.n.TotalSectors
	case 6:
		k = &fieldName__MinerV2Deadline_FaultyPower
		v = &itr.n.FaultyPower
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_MinerV2Deadline__MapItr) Done() bool {
	return itr.idx >= 7
}

func (MinerV2Deadline) ListIterator() ipld.ListIterator {
	return nil
}
func (MinerV2Deadline) Length() int {
	return 7
}
func (MinerV2Deadline) IsAbsent() bool {
	return false
}
func (MinerV2Deadline) IsNull() bool {
	return false
}
func (MinerV2Deadline) AsBool() (bool, error) {
	return mixins.Map{"types.MinerV2Deadline"}.AsBool()
}
func (MinerV2Deadline) AsInt() (int, error) {
	return mixins.Map{"types.MinerV2Deadline"}.AsInt()
}
func (MinerV2Deadline) AsFloat() (float64, error) {
	return mixins.Map{"types.MinerV2Deadline"}.AsFloat()
}
func (MinerV2Deadline) AsString() (string, error) {
	return mixins.Map{"types.MinerV2Deadline"}.AsString()
}
func (MinerV2Deadline) AsBytes() ([]byte, error) {
	return mixins.Map{"types.MinerV2Deadline"}.AsBytes()
}
func (MinerV2Deadline) AsLink() (ipld.Link, error) {
	return mixins.Map{"types.MinerV2Deadline"}.AsLink()
}
func (MinerV2Deadline) Prototype() ipld.NodePrototype {
	return _MinerV2Deadline__Prototype{}
}
type _MinerV2Deadline__Prototype struct{}

func (_MinerV2Deadline__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _MinerV2Deadline__Builder
	nb.Reset()
	return &nb
}
type _MinerV2Deadline__Builder struct {
	_MinerV2Deadline__Assembler
}
func (nb *_MinerV2Deadline__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_MinerV2Deadline__Builder) Reset() {
	var w _MinerV2Deadline
	var m schema.Maybe
	*nb = _MinerV2Deadline__Builder{_MinerV2Deadline__Assembler{w: &w, m: &m}}
}
type _MinerV2Deadline__Assembler struct {
	w *_MinerV2Deadline
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_Partitions _Link__MinerV2Partition__Assembler
	ca_ExpirationEpochs _Link__Assembler
	ca_PostSubmissions _BitField__Assembler
	ca_EarlyTerminations _BitField__Assembler
	ca_LiveSectors _Int__Assembler
	ca_TotalSectors _Int__Assembler
	ca_FaultyPower _MinerV0PowerPair__Assembler
	}

func (na *_MinerV2Deadline__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Partitions.reset()
	na.ca_ExpirationEpochs.reset()
	na.ca_PostSubmissions.reset()
	na.ca_EarlyTerminations.reset()
	na.ca_LiveSectors.reset()
	na.ca_TotalSectors.reset()
	na.ca_FaultyPower.reset()
}

var (
	fieldBit__MinerV2Deadline_Partitions = 1 << 0
	fieldBit__MinerV2Deadline_ExpirationEpochs = 1 << 1
	fieldBit__MinerV2Deadline_PostSubmissions = 1 << 2
	fieldBit__MinerV2Deadline_EarlyTerminations = 1 << 3
	fieldBit__MinerV2Deadline_LiveSectors = 1 << 4
	fieldBit__MinerV2Deadline_TotalSectors = 1 << 5
	fieldBit__MinerV2Deadline_FaultyPower = 1 << 6
	fieldBits__MinerV2Deadline_sufficient = 0 + 1 << 0 + 1 << 1 + 1 << 2 + 1 << 3 + 1 << 4 + 1 << 5 + 1 << 6
)
func (na *_MinerV2Deadline__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_MinerV2Deadline{}
	}
	return na, nil
}
func (_MinerV2Deadline__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"types.MinerV2Deadline"}.BeginList(0)
}
func (na *_MinerV2Deadline__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"types.MinerV2Deadline"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_MinerV2Deadline__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"types.MinerV2Deadline"}.AssignBool(false)
}
func (_MinerV2Deadline__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"types.MinerV2Deadline"}.AssignInt(0)
}
func (_MinerV2Deadline__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"types.MinerV2Deadline"}.AssignFloat(0)
}
func (_MinerV2Deadline__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"types.MinerV2Deadline"}.AssignString("")
}
func (_MinerV2Deadline__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"types.MinerV2Deadline"}.AssignBytes(nil)
}
func (_MinerV2Deadline__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"types.MinerV2Deadline"}.AssignLink(nil)
}
func (na *_MinerV2Deadline__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_MinerV2Deadline); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "types.MinerV2Deadline", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_MinerV2Deadline__Assembler) Prototype() ipld.NodePrototype {
	return _MinerV2Deadline__Prototype{}
}
func (ma *_MinerV2Deadline__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Partitions.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ExpirationEpochs.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_PostSubmissions.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_EarlyTerminations.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 4:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_LiveSectors.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 5:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_TotalSectors.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 6:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_FaultyPower.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_MinerV2Deadline__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Partitions":
		if ma.s & fieldBit__MinerV2Deadline_Partitions != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2Deadline_Partitions}
		}
		ma.s += fieldBit__MinerV2Deadline_Partitions
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Partitions.w = &ma.w.Partitions
		ma.ca_Partitions.m = &ma.cm
		return &ma.ca_Partitions, nil
	case "ExpirationEpochs":
		if ma.s & fieldBit__MinerV2Deadline_ExpirationEpochs != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2Deadline_ExpirationEpochs}
		}
		ma.s += fieldBit__MinerV2Deadline_ExpirationEpochs
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_ExpirationEpochs.w = &ma.w.ExpirationEpochs
		ma.ca_ExpirationEpochs.m = &ma.cm
		return &ma.ca_ExpirationEpochs, nil
	case "PostSubmissions":
		if ma.s & fieldBit__MinerV2Deadline_PostSubmissions != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2Deadline_PostSubmissions}
		}
		ma.s += fieldBit__MinerV2Deadline_PostSubmissions
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_PostSubmissions.w = &ma.w.PostSubmissions
		ma.ca_PostSubmissions.m = &ma.cm
		return &ma.ca_PostSubmissions, nil
	case "EarlyTerminations":
		if ma.s & fieldBit__MinerV2Deadline_EarlyTerminations != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2Deadline_EarlyTerminations}
		}
		ma.s += fieldBit__MinerV2Deadline_EarlyTerminations
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_EarlyTerminations.w = &ma.w.EarlyTerminations
		ma.ca_EarlyTerminations.m = &ma.cm
		return &ma.ca_EarlyTerminations, nil
	case "LiveSectors":
		if ma.s & fieldBit__MinerV2Deadline_LiveSectors != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2Deadline_LiveSectors}
		}
		ma.s += fieldBit__MinerV2Deadline_LiveSectors
		ma.state = maState_midValue
		ma.f = 4
		ma.ca_LiveSectors.w = &ma.w.LiveSectors
		ma.ca_LiveSectors.m = &ma.cm
		return &ma.ca_LiveSectors, nil
	case "TotalSectors":
		if ma.s & fieldBit__MinerV2Deadline_TotalSectors != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2Deadline_TotalSectors}
		}
		ma.s += fieldBit__MinerV2Deadline_TotalSectors
		ma.state = maState_midValue
		ma.f = 5
		ma.ca_TotalSectors.w = &ma.w.TotalSectors
		ma.ca_TotalSectors.m = &ma.cm
		return &ma.ca_TotalSectors, nil
	case "FaultyPower":
		if ma.s & fieldBit__MinerV2Deadline_FaultyPower != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2Deadline_FaultyPower}
		}
		ma.s += fieldBit__MinerV2Deadline_FaultyPower
		ma.state = maState_midValue
		ma.f = 6
		ma.ca_FaultyPower.w = &ma.w.FaultyPower
		ma.ca_FaultyPower.m = &ma.cm
		return &ma.ca_FaultyPower, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"types.MinerV2Deadline", Key:&_String{k}}
	}
}
func (ma *_MinerV2Deadline__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_MinerV2Deadline__KeyAssembler)(ma)
}
func (ma *_MinerV2Deadline__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Partitions.w = &ma.w.Partitions
		ma.ca_Partitions.m = &ma.cm
		return &ma.ca_Partitions
	case 1:
		ma.ca_ExpirationEpochs.w = &ma.w.ExpirationEpochs
		ma.ca_ExpirationEpochs.m = &ma.cm
		return &ma.ca_ExpirationEpochs
	case 2:
		ma.ca_PostSubmissions.w = &ma.w.PostSubmissions
		ma.ca_PostSubmissions.m = &ma.cm
		return &ma.ca_PostSubmissions
	case 3:
		ma.ca_EarlyTerminations.w = &ma.w.EarlyTerminations
		ma.ca_EarlyTerminations.m = &ma.cm
		return &ma.ca_EarlyTerminations
	case 4:
		ma.ca_LiveSectors.w = &ma.w.LiveSectors
		ma.ca_LiveSectors.m = &ma.cm
		return &ma.ca_LiveSectors
	case 5:
		ma.ca_TotalSectors.w = &ma.w.TotalSectors
		ma.ca_TotalSectors.m = &ma.cm
		return &ma.ca_TotalSectors
	case 6:
		ma.ca_FaultyPower.w = &ma.w.FaultyPower
		ma.ca_FaultyPower.m = &ma.cm
		return &ma.ca_FaultyPower
	default:
		panic("unreachable")
	}
}
func (ma *_MinerV2Deadline__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_MinerV2Deadline__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_MinerV2Deadline__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _MinerV2Deadline__KeyAssembler _MinerV2Deadline__Assembler
func (_MinerV2Deadline__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"types.MinerV2Deadline.KeyAssembler"}.BeginMap(0)
}
func (_MinerV2Deadline__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"types.MinerV2Deadline.KeyAssembler"}.BeginList(0)
}
func (na *_MinerV2Deadline__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"types.MinerV2Deadline.KeyAssembler"}.AssignNull()
}
func (_MinerV2Deadline__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"types.MinerV2Deadline.KeyAssembler"}.AssignBool(false)
}
func (_MinerV2Deadline__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"types.MinerV2Deadline.KeyAssembler"}.AssignInt(0)
}
func (_MinerV2Deadline__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"types.MinerV2Deadline.KeyAssembler"}.AssignFloat(0)
}
func (ka *_MinerV2Deadline__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Partitions":
		if ka.s & fieldBit__MinerV2Deadline_Partitions != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2Deadline_Partitions}
		}
		ka.s += fieldBit__MinerV2Deadline_Partitions
		ka.state = maState_expectValue
		ka.f = 0
	case "ExpirationEpochs":
		if ka.s & fieldBit__MinerV2Deadline_ExpirationEpochs != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2Deadline_ExpirationEpochs}
		}
		ka.s += fieldBit__MinerV2Deadline_ExpirationEpochs
		ka.state = maState_expectValue
		ka.f = 1
	case "PostSubmissions":
		if ka.s & fieldBit__MinerV2Deadline_PostSubmissions != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2Deadline_PostSubmissions}
		}
		ka.s += fieldBit__MinerV2Deadline_PostSubmissions
		ka.state = maState_expectValue
		ka.f = 2
	case "EarlyTerminations":
		if ka.s & fieldBit__MinerV2Deadline_EarlyTerminations != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2Deadline_EarlyTerminations}
		}
		ka.s += fieldBit__MinerV2Deadline_EarlyTerminations
		ka.state = maState_expectValue
		ka.f = 3
	case "LiveSectors":
		if ka.s & fieldBit__MinerV2Deadline_LiveSectors != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2Deadline_LiveSectors}
		}
		ka.s += fieldBit__MinerV2Deadline_LiveSectors
		ka.state = maState_expectValue
		ka.f = 4
	case "TotalSectors":
		if ka.s & fieldBit__MinerV2Deadline_TotalSectors != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2Deadline_TotalSectors}
		}
		ka.s += fieldBit__MinerV2Deadline_TotalSectors
		ka.state = maState_expectValue
		ka.f = 5
	case "FaultyPower":
		if ka.s & fieldBit__MinerV2Deadline_FaultyPower != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2Deadline_FaultyPower}
		}
		ka.s += fieldBit__MinerV2Deadline_FaultyPower
		ka.state = maState_expectValue
		ka.f = 6
	default:
		return ipld.ErrInvalidKey{TypeName:"types.MinerV2Deadline", Key:&_String{k}}
	}
	return nil
}
func (_MinerV2Deadline__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"types.MinerV2Deadline.KeyAssembler"}.AssignBytes(nil)
}
func (_MinerV2Deadline__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"types.MinerV2Deadline.KeyAssembler"}.AssignLink(nil)
}
func (ka *_MinerV2Deadline__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_MinerV2Deadline__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (MinerV2Deadline) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n MinerV2Deadline) Representation() ipld.Node {
	return (*_MinerV2Deadline__Repr)(n)
}
type _MinerV2Deadline__Repr _MinerV2Deadline
var _ ipld.Node = &_MinerV2Deadline__Repr{}
func (_MinerV2Deadline__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_List
}
func (_MinerV2Deadline__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"types.MinerV2Deadline.Repr"}.LookupByString("")
}
func (n *_MinerV2Deadline__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ki, err := key.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(ki)
}
func (n *_MinerV2Deadline__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	switch idx {
	case 0:
		return n.Partitions.Representation(), nil
	case 1:
		return n.ExpirationEpochs.Representation(), nil
	case 2:
		return n.PostSubmissions.Representation(), nil
	case 3:
		return n.EarlyTerminations.Representation(), nil
	case 4:
		return n.LiveSectors.Representation(), nil
	case 5:
		return n.TotalSectors.Representation(), nil
	case 6:
		return n.FaultyPower.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(idx)}
	}
}
func (n _MinerV2Deadline__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "types.MinerV2Deadline.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_MinerV2Deadline__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (n *_MinerV2Deadline__Repr) ListIterator() ipld.ListIterator {
	return &_MinerV2Deadline__ReprListItr{n, 0}
}

type _MinerV2Deadline__ReprListItr struct {
	n   *_MinerV2Deadline__Repr
	idx int
	
}

func (itr *_MinerV2Deadline__ReprListItr) Next() (idx int, v ipld.Node, err error) {
	if itr.idx >= 7 {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		idx = itr.idx
		v = itr.n.Partitions.Representation()
	case 1:
		idx = itr.idx
		v = itr.n.ExpirationEpochs.Representation()
	case 2:
		idx = itr.idx
		v = itr.n.PostSubmissions.Representation()
	case 3:
		idx = itr.idx
		v = itr.n.EarlyTerminations.Representation()
	case 4:
		idx = itr.idx
		v = itr.n.LiveSectors.Representation()
	case 5:
		idx = itr.idx
		v = itr.n.TotalSectors.Representation()
	case 6:
		idx = itr.idx
		v = itr.n.FaultyPower.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_MinerV2Deadline__ReprListItr) Done() bool {
	return itr.idx >= 7
}

func (rn *_MinerV2Deadline__Repr) Length() int {
	l := 7
	return l
}
func (_MinerV2Deadline__Repr) IsAbsent() bool {
	return false
}
func (_MinerV2Deadline__Repr) IsNull() bool {
	return false
}
func (_MinerV2Deadline__Repr) AsBool() (bool, error) {
	return mixins.List{"types.MinerV2Deadline.Repr"}.AsBool()
}
func (_MinerV2Deadline__Repr) AsInt() (int, error) {
	return mixins.List{"types.MinerV2Deadline.Repr"}.AsInt()
}
func (_MinerV2Deadline__Repr) AsFloat() (float64, error) {
	return mixins.List{"types.MinerV2Deadline.Repr"}.AsFloat()
}
func (_MinerV2Deadline__Repr) AsString() (string, error) {
	return mixins.List{"types.MinerV2Deadline.Repr"}.AsString()
}
func (_MinerV2Deadline__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"types.MinerV2Deadline.Repr"}.AsBytes()
}
func (_MinerV2Deadline__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"types.MinerV2Deadline.Repr"}.AsLink()
}
func (_MinerV2Deadline__Repr) Prototype() ipld.NodePrototype {
	return _MinerV2Deadline__ReprPrototype{}
}
type _MinerV2Deadline__ReprPrototype struct{}

func (_MinerV2Deadline__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _MinerV2Deadline__ReprBuilder
	nb.Reset()
	return &nb
}
type _MinerV2Deadline__ReprBuilder struct {
	_MinerV2Deadline__ReprAssembler
}
func (nb *_MinerV2Deadline__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_MinerV2Deadline__ReprBuilder) Reset() {
	var w _MinerV2Deadline
	var m schema.Maybe
	*nb = _MinerV2Deadline__ReprBuilder{_MinerV2Deadline__ReprAssembler{w: &w, m: &m}}
}
type _MinerV2Deadline__ReprAssembler struct {
	w *_MinerV2Deadline
	m *schema.Maybe
	state laState
	f int

	cm schema.Maybe
	ca_Partitions _Link__MinerV2Partition__ReprAssembler
	ca_ExpirationEpochs _Link__ReprAssembler
	ca_PostSubmissions _BitField__ReprAssembler
	ca_EarlyTerminations _BitField__ReprAssembler
	ca_LiveSectors _Int__ReprAssembler
	ca_TotalSectors _Int__ReprAssembler
	ca_FaultyPower _MinerV0PowerPair__ReprAssembler
	}

func (na *_MinerV2Deadline__ReprAssembler) reset() {
	na.state = laState_initial
	na.f = 0
	na.ca_Partitions.reset()
	na.ca_ExpirationEpochs.reset()
	na.ca_PostSubmissions.reset()
	na.ca_EarlyTerminations.reset()
	na.ca_LiveSectors.reset()
	na.ca_TotalSectors.reset()
	na.ca_FaultyPower.reset()
}
func (_MinerV2Deadline__ReprAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"types.MinerV2Deadline.Repr"}.BeginMap(0)
}
func (na *_MinerV2Deadline__ReprAssembler) BeginList(int) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_MinerV2Deadline{}
	}
	return na, nil
}
func (na *_MinerV2Deadline__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"types.MinerV2Deadline.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_MinerV2Deadline__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"types.MinerV2Deadline.Repr"}.AssignBool(false)
}
func (_MinerV2Deadline__ReprAssembler) AssignInt(int) error {
	return mixins.ListAssembler{"types.MinerV2Deadline.Repr"}.AssignInt(0)
}
func (_MinerV2Deadline__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"types.MinerV2Deadline.Repr"}.AssignFloat(0)
}
func (_MinerV2Deadline__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"types.MinerV2Deadline.Repr"}.AssignString("")
}
func (_MinerV2Deadline__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"types.MinerV2Deadline.Repr"}.AssignBytes(nil)
}
func (_MinerV2Deadline__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"types.MinerV2Deadline.Repr"}.AssignLink(nil)
}
func (na *_MinerV2Deadline__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_MinerV2Deadline); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_List {
		return ipld.ErrWrongKind{TypeName: "types.MinerV2Deadline.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustList, ActualKind: v.ReprKind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_MinerV2Deadline__ReprAssembler) Prototype() ipld.NodePrototype {
	return _MinerV2Deadline__ReprPrototype{}
}
func (la *_MinerV2Deadline__ReprAssembler) valueFinishTidy() bool {
	switch la.f {
	case 0:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 1:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 2:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 3:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 4:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 5:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 6:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (la *_MinerV2Deadline__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	if la.f >= 7 {
		return nil // schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(7)} // FIXME: need an error thunking assembler!  it has returned.  sigh.
	}
	la.state = laState_midValue
	switch la.f {
	case 0:
		la.ca_Partitions.w = &la.w.Partitions
		la.ca_Partitions.m = &la.cm
		return &la.ca_Partitions
	case 1:
		la.ca_ExpirationEpochs.w = &la.w.ExpirationEpochs
		la.ca_ExpirationEpochs.m = &la.cm
		return &la.ca_ExpirationEpochs
	case 2:
		la.ca_PostSubmissions.w = &la.w.PostSubmissions
		la.ca_PostSubmissions.m = &la.cm
		return &la.ca_PostSubmissions
	case 3:
		la.ca_EarlyTerminations.w = &la.w.EarlyTerminations
		la.ca_EarlyTerminations.m = &la.cm
		return &la.ca_EarlyTerminations
	case 4:
		la.ca_LiveSectors.w = &la.w.LiveSectors
		la.ca_LiveSectors.m = &la.cm
		return &la.ca_LiveSectors
	case 5:
		la.ca_TotalSectors.w = &la.w.TotalSectors
		la.ca_TotalSectors.m = &la.cm
		return &la.ca_TotalSectors
	case 6:
		la.ca_FaultyPower.w = &la.w.FaultyPower
		la.ca_FaultyPower.m = &la.cm
		return &la.ca_FaultyPower
	default:
		panic("unreachable")
	}
}
func (la *_MinerV2Deadline__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_MinerV2Deadline__ReprAssembler) ValuePrototype(_ int) ipld.NodePrototype {
	panic("todo structbuilder tuplerepr valueprototype")
}
