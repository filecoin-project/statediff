package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _MessageParamsPaychUpdateChannelState struct {
	Sv _SignedVoucher
	Secret _Bytes
}
type MessageParamsPaychUpdateChannelState = *_MessageParamsPaychUpdateChannelState

func (n _MessageParamsPaychUpdateChannelState) FieldSv()	SignedVoucher {
	return &n.Sv
}
func (n _MessageParamsPaychUpdateChannelState) FieldSecret()	Bytes {
	return &n.Secret
}
type _MessageParamsPaychUpdateChannelState__Maybe struct {
	m schema.Maybe
	v MessageParamsPaychUpdateChannelState
}
type MaybeMessageParamsPaychUpdateChannelState = *_MessageParamsPaychUpdateChannelState__Maybe

func (m MaybeMessageParamsPaychUpdateChannelState) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeMessageParamsPaychUpdateChannelState) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeMessageParamsPaychUpdateChannelState) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeMessageParamsPaychUpdateChannelState) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeMessageParamsPaychUpdateChannelState) Must() MessageParamsPaychUpdateChannelState {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__MessageParamsPaychUpdateChannelState_Sv = _String{"Sv"}
	fieldName__MessageParamsPaychUpdateChannelState_Secret = _String{"Secret"}
)
var _ ipld.Node = (MessageParamsPaychUpdateChannelState)(&_MessageParamsPaychUpdateChannelState{})
var _ schema.TypedNode = (MessageParamsPaychUpdateChannelState)(&_MessageParamsPaychUpdateChannelState{})
func (MessageParamsPaychUpdateChannelState) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n MessageParamsPaychUpdateChannelState) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Sv":
		return &n.Sv, nil
	case "Secret":
		return &n.Secret, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n MessageParamsPaychUpdateChannelState) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (MessageParamsPaychUpdateChannelState) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"types.MessageParamsPaychUpdateChannelState"}.LookupByIndex(0)
}
func (n MessageParamsPaychUpdateChannelState) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n MessageParamsPaychUpdateChannelState) MapIterator() ipld.MapIterator {
	return &_MessageParamsPaychUpdateChannelState__MapItr{n, 0}
}

type _MessageParamsPaychUpdateChannelState__MapItr struct {
	n MessageParamsPaychUpdateChannelState
	idx  int
}

func (itr *_MessageParamsPaychUpdateChannelState__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 2 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__MessageParamsPaychUpdateChannelState_Sv
		v = &itr.n.Sv
	case 1:
		k = &fieldName__MessageParamsPaychUpdateChannelState_Secret
		v = &itr.n.Secret
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_MessageParamsPaychUpdateChannelState__MapItr) Done() bool {
	return itr.idx >= 2
}

func (MessageParamsPaychUpdateChannelState) ListIterator() ipld.ListIterator {
	return nil
}
func (MessageParamsPaychUpdateChannelState) Length() int {
	return 2
}
func (MessageParamsPaychUpdateChannelState) IsAbsent() bool {
	return false
}
func (MessageParamsPaychUpdateChannelState) IsNull() bool {
	return false
}
func (MessageParamsPaychUpdateChannelState) AsBool() (bool, error) {
	return mixins.Map{"types.MessageParamsPaychUpdateChannelState"}.AsBool()
}
func (MessageParamsPaychUpdateChannelState) AsInt() (int, error) {
	return mixins.Map{"types.MessageParamsPaychUpdateChannelState"}.AsInt()
}
func (MessageParamsPaychUpdateChannelState) AsFloat() (float64, error) {
	return mixins.Map{"types.MessageParamsPaychUpdateChannelState"}.AsFloat()
}
func (MessageParamsPaychUpdateChannelState) AsString() (string, error) {
	return mixins.Map{"types.MessageParamsPaychUpdateChannelState"}.AsString()
}
func (MessageParamsPaychUpdateChannelState) AsBytes() ([]byte, error) {
	return mixins.Map{"types.MessageParamsPaychUpdateChannelState"}.AsBytes()
}
func (MessageParamsPaychUpdateChannelState) AsLink() (ipld.Link, error) {
	return mixins.Map{"types.MessageParamsPaychUpdateChannelState"}.AsLink()
}
func (MessageParamsPaychUpdateChannelState) Prototype() ipld.NodePrototype {
	return _MessageParamsPaychUpdateChannelState__Prototype{}
}
type _MessageParamsPaychUpdateChannelState__Prototype struct{}

func (_MessageParamsPaychUpdateChannelState__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _MessageParamsPaychUpdateChannelState__Builder
	nb.Reset()
	return &nb
}
type _MessageParamsPaychUpdateChannelState__Builder struct {
	_MessageParamsPaychUpdateChannelState__Assembler
}
func (nb *_MessageParamsPaychUpdateChannelState__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_MessageParamsPaychUpdateChannelState__Builder) Reset() {
	var w _MessageParamsPaychUpdateChannelState
	var m schema.Maybe
	*nb = _MessageParamsPaychUpdateChannelState__Builder{_MessageParamsPaychUpdateChannelState__Assembler{w: &w, m: &m}}
}
type _MessageParamsPaychUpdateChannelState__Assembler struct {
	w *_MessageParamsPaychUpdateChannelState
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_Sv _SignedVoucher__Assembler
	ca_Secret _Bytes__Assembler
	}

func (na *_MessageParamsPaychUpdateChannelState__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Sv.reset()
	na.ca_Secret.reset()
}

var (
	fieldBit__MessageParamsPaychUpdateChannelState_Sv = 1 << 0
	fieldBit__MessageParamsPaychUpdateChannelState_Secret = 1 << 1
	fieldBits__MessageParamsPaychUpdateChannelState_sufficient = 0 + 1 << 0 + 1 << 1
)
func (na *_MessageParamsPaychUpdateChannelState__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_MessageParamsPaychUpdateChannelState{}
	}
	return na, nil
}
func (_MessageParamsPaychUpdateChannelState__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"types.MessageParamsPaychUpdateChannelState"}.BeginList(0)
}
func (na *_MessageParamsPaychUpdateChannelState__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"types.MessageParamsPaychUpdateChannelState"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_MessageParamsPaychUpdateChannelState__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"types.MessageParamsPaychUpdateChannelState"}.AssignBool(false)
}
func (_MessageParamsPaychUpdateChannelState__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"types.MessageParamsPaychUpdateChannelState"}.AssignInt(0)
}
func (_MessageParamsPaychUpdateChannelState__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"types.MessageParamsPaychUpdateChannelState"}.AssignFloat(0)
}
func (_MessageParamsPaychUpdateChannelState__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"types.MessageParamsPaychUpdateChannelState"}.AssignString("")
}
func (_MessageParamsPaychUpdateChannelState__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"types.MessageParamsPaychUpdateChannelState"}.AssignBytes(nil)
}
func (_MessageParamsPaychUpdateChannelState__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"types.MessageParamsPaychUpdateChannelState"}.AssignLink(nil)
}
func (na *_MessageParamsPaychUpdateChannelState__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_MessageParamsPaychUpdateChannelState); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "types.MessageParamsPaychUpdateChannelState", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_MessageParamsPaychUpdateChannelState__Assembler) Prototype() ipld.NodePrototype {
	return _MessageParamsPaychUpdateChannelState__Prototype{}
}
func (ma *_MessageParamsPaychUpdateChannelState__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Sv.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Secret.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_MessageParamsPaychUpdateChannelState__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Sv":
		if ma.s & fieldBit__MessageParamsPaychUpdateChannelState_Sv != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MessageParamsPaychUpdateChannelState_Sv}
		}
		ma.s += fieldBit__MessageParamsPaychUpdateChannelState_Sv
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Sv.w = &ma.w.Sv
		ma.ca_Sv.m = &ma.cm
		return &ma.ca_Sv, nil
	case "Secret":
		if ma.s & fieldBit__MessageParamsPaychUpdateChannelState_Secret != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MessageParamsPaychUpdateChannelState_Secret}
		}
		ma.s += fieldBit__MessageParamsPaychUpdateChannelState_Secret
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_Secret.w = &ma.w.Secret
		ma.ca_Secret.m = &ma.cm
		return &ma.ca_Secret, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"types.MessageParamsPaychUpdateChannelState", Key:&_String{k}}
	}
}
func (ma *_MessageParamsPaychUpdateChannelState__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_MessageParamsPaychUpdateChannelState__KeyAssembler)(ma)
}
func (ma *_MessageParamsPaychUpdateChannelState__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Sv.w = &ma.w.Sv
		ma.ca_Sv.m = &ma.cm
		return &ma.ca_Sv
	case 1:
		ma.ca_Secret.w = &ma.w.Secret
		ma.ca_Secret.m = &ma.cm
		return &ma.ca_Secret
	default:
		panic("unreachable")
	}
}
func (ma *_MessageParamsPaychUpdateChannelState__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_MessageParamsPaychUpdateChannelState__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_MessageParamsPaychUpdateChannelState__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _MessageParamsPaychUpdateChannelState__KeyAssembler _MessageParamsPaychUpdateChannelState__Assembler
func (_MessageParamsPaychUpdateChannelState__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"types.MessageParamsPaychUpdateChannelState.KeyAssembler"}.BeginMap(0)
}
func (_MessageParamsPaychUpdateChannelState__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"types.MessageParamsPaychUpdateChannelState.KeyAssembler"}.BeginList(0)
}
func (na *_MessageParamsPaychUpdateChannelState__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"types.MessageParamsPaychUpdateChannelState.KeyAssembler"}.AssignNull()
}
func (_MessageParamsPaychUpdateChannelState__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"types.MessageParamsPaychUpdateChannelState.KeyAssembler"}.AssignBool(false)
}
func (_MessageParamsPaychUpdateChannelState__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"types.MessageParamsPaychUpdateChannelState.KeyAssembler"}.AssignInt(0)
}
func (_MessageParamsPaychUpdateChannelState__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"types.MessageParamsPaychUpdateChannelState.KeyAssembler"}.AssignFloat(0)
}
func (ka *_MessageParamsPaychUpdateChannelState__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Sv":
		if ka.s & fieldBit__MessageParamsPaychUpdateChannelState_Sv != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MessageParamsPaychUpdateChannelState_Sv}
		}
		ka.s += fieldBit__MessageParamsPaychUpdateChannelState_Sv
		ka.state = maState_expectValue
		ka.f = 0
	case "Secret":
		if ka.s & fieldBit__MessageParamsPaychUpdateChannelState_Secret != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MessageParamsPaychUpdateChannelState_Secret}
		}
		ka.s += fieldBit__MessageParamsPaychUpdateChannelState_Secret
		ka.state = maState_expectValue
		ka.f = 1
	default:
		return ipld.ErrInvalidKey{TypeName:"types.MessageParamsPaychUpdateChannelState", Key:&_String{k}}
	}
	return nil
}
func (_MessageParamsPaychUpdateChannelState__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"types.MessageParamsPaychUpdateChannelState.KeyAssembler"}.AssignBytes(nil)
}
func (_MessageParamsPaychUpdateChannelState__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"types.MessageParamsPaychUpdateChannelState.KeyAssembler"}.AssignLink(nil)
}
func (ka *_MessageParamsPaychUpdateChannelState__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_MessageParamsPaychUpdateChannelState__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (MessageParamsPaychUpdateChannelState) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n MessageParamsPaychUpdateChannelState) Representation() ipld.Node {
	return (*_MessageParamsPaychUpdateChannelState__Repr)(n)
}
type _MessageParamsPaychUpdateChannelState__Repr _MessageParamsPaychUpdateChannelState
var _ ipld.Node = &_MessageParamsPaychUpdateChannelState__Repr{}
func (_MessageParamsPaychUpdateChannelState__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_List
}
func (_MessageParamsPaychUpdateChannelState__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"types.MessageParamsPaychUpdateChannelState.Repr"}.LookupByString("")
}
func (n *_MessageParamsPaychUpdateChannelState__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ki, err := key.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(ki)
}
func (n *_MessageParamsPaychUpdateChannelState__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	switch idx {
	case 0:
		return n.Sv.Representation(), nil
	case 1:
		return n.Secret.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(idx)}
	}
}
func (n _MessageParamsPaychUpdateChannelState__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "types.MessageParamsPaychUpdateChannelState.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_MessageParamsPaychUpdateChannelState__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (n *_MessageParamsPaychUpdateChannelState__Repr) ListIterator() ipld.ListIterator {
	return &_MessageParamsPaychUpdateChannelState__ReprListItr{n, 0}
}

type _MessageParamsPaychUpdateChannelState__ReprListItr struct {
	n   *_MessageParamsPaychUpdateChannelState__Repr
	idx int
	
}

func (itr *_MessageParamsPaychUpdateChannelState__ReprListItr) Next() (idx int, v ipld.Node, err error) {
	if itr.idx >= 2 {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		idx = itr.idx
		v = itr.n.Sv.Representation()
	case 1:
		idx = itr.idx
		v = itr.n.Secret.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_MessageParamsPaychUpdateChannelState__ReprListItr) Done() bool {
	return itr.idx >= 2
}

func (rn *_MessageParamsPaychUpdateChannelState__Repr) Length() int {
	l := 2
	return l
}
func (_MessageParamsPaychUpdateChannelState__Repr) IsAbsent() bool {
	return false
}
func (_MessageParamsPaychUpdateChannelState__Repr) IsNull() bool {
	return false
}
func (_MessageParamsPaychUpdateChannelState__Repr) AsBool() (bool, error) {
	return mixins.List{"types.MessageParamsPaychUpdateChannelState.Repr"}.AsBool()
}
func (_MessageParamsPaychUpdateChannelState__Repr) AsInt() (int, error) {
	return mixins.List{"types.MessageParamsPaychUpdateChannelState.Repr"}.AsInt()
}
func (_MessageParamsPaychUpdateChannelState__Repr) AsFloat() (float64, error) {
	return mixins.List{"types.MessageParamsPaychUpdateChannelState.Repr"}.AsFloat()
}
func (_MessageParamsPaychUpdateChannelState__Repr) AsString() (string, error) {
	return mixins.List{"types.MessageParamsPaychUpdateChannelState.Repr"}.AsString()
}
func (_MessageParamsPaychUpdateChannelState__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"types.MessageParamsPaychUpdateChannelState.Repr"}.AsBytes()
}
func (_MessageParamsPaychUpdateChannelState__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"types.MessageParamsPaychUpdateChannelState.Repr"}.AsLink()
}
func (_MessageParamsPaychUpdateChannelState__Repr) Prototype() ipld.NodePrototype {
	return _MessageParamsPaychUpdateChannelState__ReprPrototype{}
}
type _MessageParamsPaychUpdateChannelState__ReprPrototype struct{}

func (_MessageParamsPaychUpdateChannelState__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _MessageParamsPaychUpdateChannelState__ReprBuilder
	nb.Reset()
	return &nb
}
type _MessageParamsPaychUpdateChannelState__ReprBuilder struct {
	_MessageParamsPaychUpdateChannelState__ReprAssembler
}
func (nb *_MessageParamsPaychUpdateChannelState__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_MessageParamsPaychUpdateChannelState__ReprBuilder) Reset() {
	var w _MessageParamsPaychUpdateChannelState
	var m schema.Maybe
	*nb = _MessageParamsPaychUpdateChannelState__ReprBuilder{_MessageParamsPaychUpdateChannelState__ReprAssembler{w: &w, m: &m}}
}
type _MessageParamsPaychUpdateChannelState__ReprAssembler struct {
	w *_MessageParamsPaychUpdateChannelState
	m *schema.Maybe
	state laState
	f int

	cm schema.Maybe
	ca_Sv _SignedVoucher__ReprAssembler
	ca_Secret _Bytes__ReprAssembler
	}

func (na *_MessageParamsPaychUpdateChannelState__ReprAssembler) reset() {
	na.state = laState_initial
	na.f = 0
	na.ca_Sv.reset()
	na.ca_Secret.reset()
}
func (_MessageParamsPaychUpdateChannelState__ReprAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"types.MessageParamsPaychUpdateChannelState.Repr"}.BeginMap(0)
}
func (na *_MessageParamsPaychUpdateChannelState__ReprAssembler) BeginList(int) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_MessageParamsPaychUpdateChannelState{}
	}
	return na, nil
}
func (na *_MessageParamsPaychUpdateChannelState__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"types.MessageParamsPaychUpdateChannelState.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_MessageParamsPaychUpdateChannelState__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"types.MessageParamsPaychUpdateChannelState.Repr"}.AssignBool(false)
}
func (_MessageParamsPaychUpdateChannelState__ReprAssembler) AssignInt(int) error {
	return mixins.ListAssembler{"types.MessageParamsPaychUpdateChannelState.Repr"}.AssignInt(0)
}
func (_MessageParamsPaychUpdateChannelState__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"types.MessageParamsPaychUpdateChannelState.Repr"}.AssignFloat(0)
}
func (_MessageParamsPaychUpdateChannelState__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"types.MessageParamsPaychUpdateChannelState.Repr"}.AssignString("")
}
func (_MessageParamsPaychUpdateChannelState__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"types.MessageParamsPaychUpdateChannelState.Repr"}.AssignBytes(nil)
}
func (_MessageParamsPaychUpdateChannelState__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"types.MessageParamsPaychUpdateChannelState.Repr"}.AssignLink(nil)
}
func (na *_MessageParamsPaychUpdateChannelState__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_MessageParamsPaychUpdateChannelState); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_List {
		return ipld.ErrWrongKind{TypeName: "types.MessageParamsPaychUpdateChannelState.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustList, ActualKind: v.ReprKind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_MessageParamsPaychUpdateChannelState__ReprAssembler) Prototype() ipld.NodePrototype {
	return _MessageParamsPaychUpdateChannelState__ReprPrototype{}
}
func (la *_MessageParamsPaychUpdateChannelState__ReprAssembler) valueFinishTidy() bool {
	switch la.f {
	case 0:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 1:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (la *_MessageParamsPaychUpdateChannelState__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	if la.f >= 2 {
		return nil // schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(2)} // FIXME: need an error thunking assembler!  it has returned.  sigh.
	}
	la.state = laState_midValue
	switch la.f {
	case 0:
		la.ca_Sv.w = &la.w.Sv
		la.ca_Sv.m = &la.cm
		return &la.ca_Sv
	case 1:
		la.ca_Secret.w = &la.w.Secret
		la.ca_Secret.m = &la.cm
		return &la.ca_Secret
	default:
		panic("unreachable")
	}
}
func (la *_MessageParamsPaychUpdateChannelState__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_MessageParamsPaychUpdateChannelState__ReprAssembler) ValuePrototype(_ int) ipld.NodePrototype {
	panic("todo structbuilder tuplerepr valueprototype")
}
