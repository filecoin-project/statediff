package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _MinerV2Info struct {
	Owner _Address
	Worker _Address
	ControlAddresses _List__Address__Maybe
	PendingWorkerKey _MinerV0WorkerChangeKey__Maybe
	PeerId _PeerID
	Multiaddrs _List__Multiaddrs__Maybe
	SealProofType _Int
	SectorSize _SectorSize
	WindowPoStPartitionSectors _Int
	ConsensusFaultElapsed _ChainEpoch
	PendingOwnerAddress _Address__Maybe
}
type MinerV2Info = *_MinerV2Info

func (n _MinerV2Info) FieldOwner()	Address {
	return &n.Owner
}
func (n _MinerV2Info) FieldWorker()	Address {
	return &n.Worker
}
func (n _MinerV2Info) FieldControlAddresses()	MaybeList__Address {
	return &n.ControlAddresses
}
func (n _MinerV2Info) FieldPendingWorkerKey()	MaybeMinerV0WorkerChangeKey {
	return &n.PendingWorkerKey
}
func (n _MinerV2Info) FieldPeerId()	PeerID {
	return &n.PeerId
}
func (n _MinerV2Info) FieldMultiaddrs()	MaybeList__Multiaddrs {
	return &n.Multiaddrs
}
func (n _MinerV2Info) FieldSealProofType()	Int {
	return &n.SealProofType
}
func (n _MinerV2Info) FieldSectorSize()	SectorSize {
	return &n.SectorSize
}
func (n _MinerV2Info) FieldWindowPoStPartitionSectors()	Int {
	return &n.WindowPoStPartitionSectors
}
func (n _MinerV2Info) FieldConsensusFaultElapsed()	ChainEpoch {
	return &n.ConsensusFaultElapsed
}
func (n _MinerV2Info) FieldPendingOwnerAddress()	MaybeAddress {
	return &n.PendingOwnerAddress
}
type _MinerV2Info__Maybe struct {
	m schema.Maybe
	v MinerV2Info
}
type MaybeMinerV2Info = *_MinerV2Info__Maybe

func (m MaybeMinerV2Info) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeMinerV2Info) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeMinerV2Info) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeMinerV2Info) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeMinerV2Info) Must() MinerV2Info {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__MinerV2Info_Owner = _String{"Owner"}
	fieldName__MinerV2Info_Worker = _String{"Worker"}
	fieldName__MinerV2Info_ControlAddresses = _String{"ControlAddresses"}
	fieldName__MinerV2Info_PendingWorkerKey = _String{"PendingWorkerKey"}
	fieldName__MinerV2Info_PeerId = _String{"PeerId"}
	fieldName__MinerV2Info_Multiaddrs = _String{"Multiaddrs"}
	fieldName__MinerV2Info_SealProofType = _String{"SealProofType"}
	fieldName__MinerV2Info_SectorSize = _String{"SectorSize"}
	fieldName__MinerV2Info_WindowPoStPartitionSectors = _String{"WindowPoStPartitionSectors"}
	fieldName__MinerV2Info_ConsensusFaultElapsed = _String{"ConsensusFaultElapsed"}
	fieldName__MinerV2Info_PendingOwnerAddress = _String{"PendingOwnerAddress"}
)
var _ ipld.Node = (MinerV2Info)(&_MinerV2Info{})
var _ schema.TypedNode = (MinerV2Info)(&_MinerV2Info{})
func (MinerV2Info) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n MinerV2Info) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Owner":
		return &n.Owner, nil
	case "Worker":
		return &n.Worker, nil
	case "ControlAddresses":
		if n.ControlAddresses.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.ControlAddresses.v, nil
	case "PendingWorkerKey":
		if n.PendingWorkerKey.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.PendingWorkerKey.v, nil
	case "PeerId":
		return &n.PeerId, nil
	case "Multiaddrs":
		if n.Multiaddrs.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.Multiaddrs.v, nil
	case "SealProofType":
		return &n.SealProofType, nil
	case "SectorSize":
		return &n.SectorSize, nil
	case "WindowPoStPartitionSectors":
		return &n.WindowPoStPartitionSectors, nil
	case "ConsensusFaultElapsed":
		return &n.ConsensusFaultElapsed, nil
	case "PendingOwnerAddress":
		if n.PendingOwnerAddress.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.PendingOwnerAddress.v, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n MinerV2Info) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (MinerV2Info) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"types.MinerV2Info"}.LookupByIndex(0)
}
func (n MinerV2Info) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n MinerV2Info) MapIterator() ipld.MapIterator {
	return &_MinerV2Info__MapItr{n, 0}
}

type _MinerV2Info__MapItr struct {
	n MinerV2Info
	idx  int
}

func (itr *_MinerV2Info__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 11 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__MinerV2Info_Owner
		v = &itr.n.Owner
	case 1:
		k = &fieldName__MinerV2Info_Worker
		v = &itr.n.Worker
	case 2:
		k = &fieldName__MinerV2Info_ControlAddresses
		if itr.n.ControlAddresses.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.ControlAddresses.v
	case 3:
		k = &fieldName__MinerV2Info_PendingWorkerKey
		if itr.n.PendingWorkerKey.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.PendingWorkerKey.v
	case 4:
		k = &fieldName__MinerV2Info_PeerId
		v = &itr.n.PeerId
	case 5:
		k = &fieldName__MinerV2Info_Multiaddrs
		if itr.n.Multiaddrs.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.Multiaddrs.v
	case 6:
		k = &fieldName__MinerV2Info_SealProofType
		v = &itr.n.SealProofType
	case 7:
		k = &fieldName__MinerV2Info_SectorSize
		v = &itr.n.SectorSize
	case 8:
		k = &fieldName__MinerV2Info_WindowPoStPartitionSectors
		v = &itr.n.WindowPoStPartitionSectors
	case 9:
		k = &fieldName__MinerV2Info_ConsensusFaultElapsed
		v = &itr.n.ConsensusFaultElapsed
	case 10:
		k = &fieldName__MinerV2Info_PendingOwnerAddress
		if itr.n.PendingOwnerAddress.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.PendingOwnerAddress.v
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_MinerV2Info__MapItr) Done() bool {
	return itr.idx >= 11
}

func (MinerV2Info) ListIterator() ipld.ListIterator {
	return nil
}
func (MinerV2Info) Length() int {
	return 11
}
func (MinerV2Info) IsAbsent() bool {
	return false
}
func (MinerV2Info) IsNull() bool {
	return false
}
func (MinerV2Info) AsBool() (bool, error) {
	return mixins.Map{"types.MinerV2Info"}.AsBool()
}
func (MinerV2Info) AsInt() (int, error) {
	return mixins.Map{"types.MinerV2Info"}.AsInt()
}
func (MinerV2Info) AsFloat() (float64, error) {
	return mixins.Map{"types.MinerV2Info"}.AsFloat()
}
func (MinerV2Info) AsString() (string, error) {
	return mixins.Map{"types.MinerV2Info"}.AsString()
}
func (MinerV2Info) AsBytes() ([]byte, error) {
	return mixins.Map{"types.MinerV2Info"}.AsBytes()
}
func (MinerV2Info) AsLink() (ipld.Link, error) {
	return mixins.Map{"types.MinerV2Info"}.AsLink()
}
func (MinerV2Info) Prototype() ipld.NodePrototype {
	return _MinerV2Info__Prototype{}
}
type _MinerV2Info__Prototype struct{}

func (_MinerV2Info__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _MinerV2Info__Builder
	nb.Reset()
	return &nb
}
type _MinerV2Info__Builder struct {
	_MinerV2Info__Assembler
}
func (nb *_MinerV2Info__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_MinerV2Info__Builder) Reset() {
	var w _MinerV2Info
	var m schema.Maybe
	*nb = _MinerV2Info__Builder{_MinerV2Info__Assembler{w: &w, m: &m}}
}
type _MinerV2Info__Assembler struct {
	w *_MinerV2Info
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_Owner _Address__Assembler
	ca_Worker _Address__Assembler
	ca_ControlAddresses _List__Address__Assembler
	ca_PendingWorkerKey _MinerV0WorkerChangeKey__Assembler
	ca_PeerId _PeerID__Assembler
	ca_Multiaddrs _List__Multiaddrs__Assembler
	ca_SealProofType _Int__Assembler
	ca_SectorSize _SectorSize__Assembler
	ca_WindowPoStPartitionSectors _Int__Assembler
	ca_ConsensusFaultElapsed _ChainEpoch__Assembler
	ca_PendingOwnerAddress _Address__Assembler
	}

func (na *_MinerV2Info__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Owner.reset()
	na.ca_Worker.reset()
	na.ca_ControlAddresses.reset()
	na.ca_PendingWorkerKey.reset()
	na.ca_PeerId.reset()
	na.ca_Multiaddrs.reset()
	na.ca_SealProofType.reset()
	na.ca_SectorSize.reset()
	na.ca_WindowPoStPartitionSectors.reset()
	na.ca_ConsensusFaultElapsed.reset()
	na.ca_PendingOwnerAddress.reset()
}

var (
	fieldBit__MinerV2Info_Owner = 1 << 0
	fieldBit__MinerV2Info_Worker = 1 << 1
	fieldBit__MinerV2Info_ControlAddresses = 1 << 2
	fieldBit__MinerV2Info_PendingWorkerKey = 1 << 3
	fieldBit__MinerV2Info_PeerId = 1 << 4
	fieldBit__MinerV2Info_Multiaddrs = 1 << 5
	fieldBit__MinerV2Info_SealProofType = 1 << 6
	fieldBit__MinerV2Info_SectorSize = 1 << 7
	fieldBit__MinerV2Info_WindowPoStPartitionSectors = 1 << 8
	fieldBit__MinerV2Info_ConsensusFaultElapsed = 1 << 9
	fieldBit__MinerV2Info_PendingOwnerAddress = 1 << 10
	fieldBits__MinerV2Info_sufficient = 0 + 1 << 0 + 1 << 1 + 1 << 2 + 1 << 3 + 1 << 4 + 1 << 5 + 1 << 6 + 1 << 7 + 1 << 8 + 1 << 9 + 1 << 10
)
func (na *_MinerV2Info__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_MinerV2Info{}
	}
	return na, nil
}
func (_MinerV2Info__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"types.MinerV2Info"}.BeginList(0)
}
func (na *_MinerV2Info__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"types.MinerV2Info"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_MinerV2Info__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"types.MinerV2Info"}.AssignBool(false)
}
func (_MinerV2Info__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"types.MinerV2Info"}.AssignInt(0)
}
func (_MinerV2Info__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"types.MinerV2Info"}.AssignFloat(0)
}
func (_MinerV2Info__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"types.MinerV2Info"}.AssignString("")
}
func (_MinerV2Info__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"types.MinerV2Info"}.AssignBytes(nil)
}
func (_MinerV2Info__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"types.MinerV2Info"}.AssignLink(nil)
}
func (na *_MinerV2Info__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_MinerV2Info); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "types.MinerV2Info", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_MinerV2Info__Assembler) Prototype() ipld.NodePrototype {
	return _MinerV2Info__Prototype{}
}
func (ma *_MinerV2Info__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Owner.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Worker.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.w.ControlAddresses.m {
		case schema.Maybe_Null:
			ma.state = maState_initial
			return true
		case schema.Maybe_Value:
			ma.w.ControlAddresses.v = ma.ca_ControlAddresses.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.w.PendingWorkerKey.m {
		case schema.Maybe_Null:
			ma.state = maState_initial
			return true
		case schema.Maybe_Value:
			ma.w.PendingWorkerKey.v = ma.ca_PendingWorkerKey.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 4:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_PeerId.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 5:
		switch ma.w.Multiaddrs.m {
		case schema.Maybe_Null:
			ma.state = maState_initial
			return true
		case schema.Maybe_Value:
			ma.w.Multiaddrs.v = ma.ca_Multiaddrs.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 6:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_SealProofType.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 7:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_SectorSize.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 8:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_WindowPoStPartitionSectors.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 9:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ConsensusFaultElapsed.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 10:
		switch ma.w.PendingOwnerAddress.m {
		case schema.Maybe_Null:
			ma.state = maState_initial
			return true
		case schema.Maybe_Value:
			ma.w.PendingOwnerAddress.v = ma.ca_PendingOwnerAddress.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_MinerV2Info__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Owner":
		if ma.s & fieldBit__MinerV2Info_Owner != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2Info_Owner}
		}
		ma.s += fieldBit__MinerV2Info_Owner
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Owner.w = &ma.w.Owner
		ma.ca_Owner.m = &ma.cm
		return &ma.ca_Owner, nil
	case "Worker":
		if ma.s & fieldBit__MinerV2Info_Worker != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2Info_Worker}
		}
		ma.s += fieldBit__MinerV2Info_Worker
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_Worker.w = &ma.w.Worker
		ma.ca_Worker.m = &ma.cm
		return &ma.ca_Worker, nil
	case "ControlAddresses":
		if ma.s & fieldBit__MinerV2Info_ControlAddresses != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2Info_ControlAddresses}
		}
		ma.s += fieldBit__MinerV2Info_ControlAddresses
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_ControlAddresses.w = ma.w.ControlAddresses.v
		ma.ca_ControlAddresses.m = &ma.w.ControlAddresses.m
		ma.w.ControlAddresses.m = allowNull
		return &ma.ca_ControlAddresses, nil
	case "PendingWorkerKey":
		if ma.s & fieldBit__MinerV2Info_PendingWorkerKey != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2Info_PendingWorkerKey}
		}
		ma.s += fieldBit__MinerV2Info_PendingWorkerKey
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_PendingWorkerKey.w = ma.w.PendingWorkerKey.v
		ma.ca_PendingWorkerKey.m = &ma.w.PendingWorkerKey.m
		ma.w.PendingWorkerKey.m = allowNull
		return &ma.ca_PendingWorkerKey, nil
	case "PeerId":
		if ma.s & fieldBit__MinerV2Info_PeerId != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2Info_PeerId}
		}
		ma.s += fieldBit__MinerV2Info_PeerId
		ma.state = maState_midValue
		ma.f = 4
		ma.ca_PeerId.w = &ma.w.PeerId
		ma.ca_PeerId.m = &ma.cm
		return &ma.ca_PeerId, nil
	case "Multiaddrs":
		if ma.s & fieldBit__MinerV2Info_Multiaddrs != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2Info_Multiaddrs}
		}
		ma.s += fieldBit__MinerV2Info_Multiaddrs
		ma.state = maState_midValue
		ma.f = 5
		ma.ca_Multiaddrs.w = ma.w.Multiaddrs.v
		ma.ca_Multiaddrs.m = &ma.w.Multiaddrs.m
		ma.w.Multiaddrs.m = allowNull
		return &ma.ca_Multiaddrs, nil
	case "SealProofType":
		if ma.s & fieldBit__MinerV2Info_SealProofType != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2Info_SealProofType}
		}
		ma.s += fieldBit__MinerV2Info_SealProofType
		ma.state = maState_midValue
		ma.f = 6
		ma.ca_SealProofType.w = &ma.w.SealProofType
		ma.ca_SealProofType.m = &ma.cm
		return &ma.ca_SealProofType, nil
	case "SectorSize":
		if ma.s & fieldBit__MinerV2Info_SectorSize != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2Info_SectorSize}
		}
		ma.s += fieldBit__MinerV2Info_SectorSize
		ma.state = maState_midValue
		ma.f = 7
		ma.ca_SectorSize.w = &ma.w.SectorSize
		ma.ca_SectorSize.m = &ma.cm
		return &ma.ca_SectorSize, nil
	case "WindowPoStPartitionSectors":
		if ma.s & fieldBit__MinerV2Info_WindowPoStPartitionSectors != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2Info_WindowPoStPartitionSectors}
		}
		ma.s += fieldBit__MinerV2Info_WindowPoStPartitionSectors
		ma.state = maState_midValue
		ma.f = 8
		ma.ca_WindowPoStPartitionSectors.w = &ma.w.WindowPoStPartitionSectors
		ma.ca_WindowPoStPartitionSectors.m = &ma.cm
		return &ma.ca_WindowPoStPartitionSectors, nil
	case "ConsensusFaultElapsed":
		if ma.s & fieldBit__MinerV2Info_ConsensusFaultElapsed != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2Info_ConsensusFaultElapsed}
		}
		ma.s += fieldBit__MinerV2Info_ConsensusFaultElapsed
		ma.state = maState_midValue
		ma.f = 9
		ma.ca_ConsensusFaultElapsed.w = &ma.w.ConsensusFaultElapsed
		ma.ca_ConsensusFaultElapsed.m = &ma.cm
		return &ma.ca_ConsensusFaultElapsed, nil
	case "PendingOwnerAddress":
		if ma.s & fieldBit__MinerV2Info_PendingOwnerAddress != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MinerV2Info_PendingOwnerAddress}
		}
		ma.s += fieldBit__MinerV2Info_PendingOwnerAddress
		ma.state = maState_midValue
		ma.f = 10
		ma.ca_PendingOwnerAddress.w = ma.w.PendingOwnerAddress.v
		ma.ca_PendingOwnerAddress.m = &ma.w.PendingOwnerAddress.m
		ma.w.PendingOwnerAddress.m = allowNull
		return &ma.ca_PendingOwnerAddress, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"types.MinerV2Info", Key:&_String{k}}
	}
}
func (ma *_MinerV2Info__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_MinerV2Info__KeyAssembler)(ma)
}
func (ma *_MinerV2Info__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Owner.w = &ma.w.Owner
		ma.ca_Owner.m = &ma.cm
		return &ma.ca_Owner
	case 1:
		ma.ca_Worker.w = &ma.w.Worker
		ma.ca_Worker.m = &ma.cm
		return &ma.ca_Worker
	case 2:
		ma.ca_ControlAddresses.w = ma.w.ControlAddresses.v
		ma.ca_ControlAddresses.m = &ma.w.ControlAddresses.m
		ma.w.ControlAddresses.m = allowNull
		return &ma.ca_ControlAddresses
	case 3:
		ma.ca_PendingWorkerKey.w = ma.w.PendingWorkerKey.v
		ma.ca_PendingWorkerKey.m = &ma.w.PendingWorkerKey.m
		ma.w.PendingWorkerKey.m = allowNull
		return &ma.ca_PendingWorkerKey
	case 4:
		ma.ca_PeerId.w = &ma.w.PeerId
		ma.ca_PeerId.m = &ma.cm
		return &ma.ca_PeerId
	case 5:
		ma.ca_Multiaddrs.w = ma.w.Multiaddrs.v
		ma.ca_Multiaddrs.m = &ma.w.Multiaddrs.m
		ma.w.Multiaddrs.m = allowNull
		return &ma.ca_Multiaddrs
	case 6:
		ma.ca_SealProofType.w = &ma.w.SealProofType
		ma.ca_SealProofType.m = &ma.cm
		return &ma.ca_SealProofType
	case 7:
		ma.ca_SectorSize.w = &ma.w.SectorSize
		ma.ca_SectorSize.m = &ma.cm
		return &ma.ca_SectorSize
	case 8:
		ma.ca_WindowPoStPartitionSectors.w = &ma.w.WindowPoStPartitionSectors
		ma.ca_WindowPoStPartitionSectors.m = &ma.cm
		return &ma.ca_WindowPoStPartitionSectors
	case 9:
		ma.ca_ConsensusFaultElapsed.w = &ma.w.ConsensusFaultElapsed
		ma.ca_ConsensusFaultElapsed.m = &ma.cm
		return &ma.ca_ConsensusFaultElapsed
	case 10:
		ma.ca_PendingOwnerAddress.w = ma.w.PendingOwnerAddress.v
		ma.ca_PendingOwnerAddress.m = &ma.w.PendingOwnerAddress.m
		ma.w.PendingOwnerAddress.m = allowNull
		return &ma.ca_PendingOwnerAddress
	default:
		panic("unreachable")
	}
}
func (ma *_MinerV2Info__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_MinerV2Info__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_MinerV2Info__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _MinerV2Info__KeyAssembler _MinerV2Info__Assembler
func (_MinerV2Info__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"types.MinerV2Info.KeyAssembler"}.BeginMap(0)
}
func (_MinerV2Info__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"types.MinerV2Info.KeyAssembler"}.BeginList(0)
}
func (na *_MinerV2Info__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"types.MinerV2Info.KeyAssembler"}.AssignNull()
}
func (_MinerV2Info__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"types.MinerV2Info.KeyAssembler"}.AssignBool(false)
}
func (_MinerV2Info__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"types.MinerV2Info.KeyAssembler"}.AssignInt(0)
}
func (_MinerV2Info__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"types.MinerV2Info.KeyAssembler"}.AssignFloat(0)
}
func (ka *_MinerV2Info__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Owner":
		if ka.s & fieldBit__MinerV2Info_Owner != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2Info_Owner}
		}
		ka.s += fieldBit__MinerV2Info_Owner
		ka.state = maState_expectValue
		ka.f = 0
	case "Worker":
		if ka.s & fieldBit__MinerV2Info_Worker != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2Info_Worker}
		}
		ka.s += fieldBit__MinerV2Info_Worker
		ka.state = maState_expectValue
		ka.f = 1
	case "ControlAddresses":
		if ka.s & fieldBit__MinerV2Info_ControlAddresses != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2Info_ControlAddresses}
		}
		ka.s += fieldBit__MinerV2Info_ControlAddresses
		ka.state = maState_expectValue
		ka.f = 2
	case "PendingWorkerKey":
		if ka.s & fieldBit__MinerV2Info_PendingWorkerKey != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2Info_PendingWorkerKey}
		}
		ka.s += fieldBit__MinerV2Info_PendingWorkerKey
		ka.state = maState_expectValue
		ka.f = 3
	case "PeerId":
		if ka.s & fieldBit__MinerV2Info_PeerId != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2Info_PeerId}
		}
		ka.s += fieldBit__MinerV2Info_PeerId
		ka.state = maState_expectValue
		ka.f = 4
	case "Multiaddrs":
		if ka.s & fieldBit__MinerV2Info_Multiaddrs != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2Info_Multiaddrs}
		}
		ka.s += fieldBit__MinerV2Info_Multiaddrs
		ka.state = maState_expectValue
		ka.f = 5
	case "SealProofType":
		if ka.s & fieldBit__MinerV2Info_SealProofType != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2Info_SealProofType}
		}
		ka.s += fieldBit__MinerV2Info_SealProofType
		ka.state = maState_expectValue
		ka.f = 6
	case "SectorSize":
		if ka.s & fieldBit__MinerV2Info_SectorSize != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2Info_SectorSize}
		}
		ka.s += fieldBit__MinerV2Info_SectorSize
		ka.state = maState_expectValue
		ka.f = 7
	case "WindowPoStPartitionSectors":
		if ka.s & fieldBit__MinerV2Info_WindowPoStPartitionSectors != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2Info_WindowPoStPartitionSectors}
		}
		ka.s += fieldBit__MinerV2Info_WindowPoStPartitionSectors
		ka.state = maState_expectValue
		ka.f = 8
	case "ConsensusFaultElapsed":
		if ka.s & fieldBit__MinerV2Info_ConsensusFaultElapsed != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2Info_ConsensusFaultElapsed}
		}
		ka.s += fieldBit__MinerV2Info_ConsensusFaultElapsed
		ka.state = maState_expectValue
		ka.f = 9
	case "PendingOwnerAddress":
		if ka.s & fieldBit__MinerV2Info_PendingOwnerAddress != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MinerV2Info_PendingOwnerAddress}
		}
		ka.s += fieldBit__MinerV2Info_PendingOwnerAddress
		ka.state = maState_expectValue
		ka.f = 10
	default:
		return ipld.ErrInvalidKey{TypeName:"types.MinerV2Info", Key:&_String{k}}
	}
	return nil
}
func (_MinerV2Info__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"types.MinerV2Info.KeyAssembler"}.AssignBytes(nil)
}
func (_MinerV2Info__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"types.MinerV2Info.KeyAssembler"}.AssignLink(nil)
}
func (ka *_MinerV2Info__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_MinerV2Info__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (MinerV2Info) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n MinerV2Info) Representation() ipld.Node {
	return (*_MinerV2Info__Repr)(n)
}
type _MinerV2Info__Repr _MinerV2Info
var _ ipld.Node = &_MinerV2Info__Repr{}
func (_MinerV2Info__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_List
}
func (_MinerV2Info__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"types.MinerV2Info.Repr"}.LookupByString("")
}
func (n *_MinerV2Info__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ki, err := key.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(ki)
}
func (n *_MinerV2Info__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	switch idx {
	case 0:
		return n.Owner.Representation(), nil
	case 1:
		return n.Worker.Representation(), nil
	case 2:
		if n.ControlAddresses.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.ControlAddresses.v.Representation(), nil
	case 3:
		if n.PendingWorkerKey.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.PendingWorkerKey.v.Representation(), nil
	case 4:
		return n.PeerId.Representation(), nil
	case 5:
		if n.Multiaddrs.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.Multiaddrs.v.Representation(), nil
	case 6:
		return n.SealProofType.Representation(), nil
	case 7:
		return n.SectorSize.Representation(), nil
	case 8:
		return n.WindowPoStPartitionSectors.Representation(), nil
	case 9:
		return n.ConsensusFaultElapsed.Representation(), nil
	case 10:
		if n.PendingOwnerAddress.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.PendingOwnerAddress.v.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(idx)}
	}
}
func (n _MinerV2Info__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "types.MinerV2Info.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_MinerV2Info__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (n *_MinerV2Info__Repr) ListIterator() ipld.ListIterator {
	return &_MinerV2Info__ReprListItr{n, 0}
}

type _MinerV2Info__ReprListItr struct {
	n   *_MinerV2Info__Repr
	idx int
	
}

func (itr *_MinerV2Info__ReprListItr) Next() (idx int, v ipld.Node, err error) {
	if itr.idx >= 11 {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		idx = itr.idx
		v = itr.n.Owner.Representation()
	case 1:
		idx = itr.idx
		v = itr.n.Worker.Representation()
	case 2:
		idx = itr.idx
		if itr.n.ControlAddresses.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.ControlAddresses.v.Representation()
	case 3:
		idx = itr.idx
		if itr.n.PendingWorkerKey.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.PendingWorkerKey.v.Representation()
	case 4:
		idx = itr.idx
		v = itr.n.PeerId.Representation()
	case 5:
		idx = itr.idx
		if itr.n.Multiaddrs.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.Multiaddrs.v.Representation()
	case 6:
		idx = itr.idx
		v = itr.n.SealProofType.Representation()
	case 7:
		idx = itr.idx
		v = itr.n.SectorSize.Representation()
	case 8:
		idx = itr.idx
		v = itr.n.WindowPoStPartitionSectors.Representation()
	case 9:
		idx = itr.idx
		v = itr.n.ConsensusFaultElapsed.Representation()
	case 10:
		idx = itr.idx
		if itr.n.PendingOwnerAddress.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.PendingOwnerAddress.v.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_MinerV2Info__ReprListItr) Done() bool {
	return itr.idx >= 11
}

func (rn *_MinerV2Info__Repr) Length() int {
	l := 11
	return l
}
func (_MinerV2Info__Repr) IsAbsent() bool {
	return false
}
func (_MinerV2Info__Repr) IsNull() bool {
	return false
}
func (_MinerV2Info__Repr) AsBool() (bool, error) {
	return mixins.List{"types.MinerV2Info.Repr"}.AsBool()
}
func (_MinerV2Info__Repr) AsInt() (int, error) {
	return mixins.List{"types.MinerV2Info.Repr"}.AsInt()
}
func (_MinerV2Info__Repr) AsFloat() (float64, error) {
	return mixins.List{"types.MinerV2Info.Repr"}.AsFloat()
}
func (_MinerV2Info__Repr) AsString() (string, error) {
	return mixins.List{"types.MinerV2Info.Repr"}.AsString()
}
func (_MinerV2Info__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"types.MinerV2Info.Repr"}.AsBytes()
}
func (_MinerV2Info__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"types.MinerV2Info.Repr"}.AsLink()
}
func (_MinerV2Info__Repr) Prototype() ipld.NodePrototype {
	return _MinerV2Info__ReprPrototype{}
}
type _MinerV2Info__ReprPrototype struct{}

func (_MinerV2Info__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _MinerV2Info__ReprBuilder
	nb.Reset()
	return &nb
}
type _MinerV2Info__ReprBuilder struct {
	_MinerV2Info__ReprAssembler
}
func (nb *_MinerV2Info__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_MinerV2Info__ReprBuilder) Reset() {
	var w _MinerV2Info
	var m schema.Maybe
	*nb = _MinerV2Info__ReprBuilder{_MinerV2Info__ReprAssembler{w: &w, m: &m}}
}
type _MinerV2Info__ReprAssembler struct {
	w *_MinerV2Info
	m *schema.Maybe
	state laState
	f int

	cm schema.Maybe
	ca_Owner _Address__ReprAssembler
	ca_Worker _Address__ReprAssembler
	ca_ControlAddresses _List__Address__ReprAssembler
	ca_PendingWorkerKey _MinerV0WorkerChangeKey__ReprAssembler
	ca_PeerId _PeerID__ReprAssembler
	ca_Multiaddrs _List__Multiaddrs__ReprAssembler
	ca_SealProofType _Int__ReprAssembler
	ca_SectorSize _SectorSize__ReprAssembler
	ca_WindowPoStPartitionSectors _Int__ReprAssembler
	ca_ConsensusFaultElapsed _ChainEpoch__ReprAssembler
	ca_PendingOwnerAddress _Address__ReprAssembler
	}

func (na *_MinerV2Info__ReprAssembler) reset() {
	na.state = laState_initial
	na.f = 0
	na.ca_Owner.reset()
	na.ca_Worker.reset()
	na.ca_ControlAddresses.reset()
	na.ca_PendingWorkerKey.reset()
	na.ca_PeerId.reset()
	na.ca_Multiaddrs.reset()
	na.ca_SealProofType.reset()
	na.ca_SectorSize.reset()
	na.ca_WindowPoStPartitionSectors.reset()
	na.ca_ConsensusFaultElapsed.reset()
	na.ca_PendingOwnerAddress.reset()
}
func (_MinerV2Info__ReprAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"types.MinerV2Info.Repr"}.BeginMap(0)
}
func (na *_MinerV2Info__ReprAssembler) BeginList(int) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_MinerV2Info{}
	}
	return na, nil
}
func (na *_MinerV2Info__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"types.MinerV2Info.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_MinerV2Info__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"types.MinerV2Info.Repr"}.AssignBool(false)
}
func (_MinerV2Info__ReprAssembler) AssignInt(int) error {
	return mixins.ListAssembler{"types.MinerV2Info.Repr"}.AssignInt(0)
}
func (_MinerV2Info__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"types.MinerV2Info.Repr"}.AssignFloat(0)
}
func (_MinerV2Info__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"types.MinerV2Info.Repr"}.AssignString("")
}
func (_MinerV2Info__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"types.MinerV2Info.Repr"}.AssignBytes(nil)
}
func (_MinerV2Info__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"types.MinerV2Info.Repr"}.AssignLink(nil)
}
func (na *_MinerV2Info__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_MinerV2Info); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_List {
		return ipld.ErrWrongKind{TypeName: "types.MinerV2Info.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustList, ActualKind: v.ReprKind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_MinerV2Info__ReprAssembler) Prototype() ipld.NodePrototype {
	return _MinerV2Info__ReprPrototype{}
}
func (la *_MinerV2Info__ReprAssembler) valueFinishTidy() bool {
	switch la.f {
	case 0:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 1:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 2:
		switch la.w.ControlAddresses.m {
		case schema.Maybe_Value:
			la.w.ControlAddresses.v = la.ca_ControlAddresses.w
			la.state = laState_initial
			la.f++
			return true
		case schema.Maybe_Null:
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 3:
		switch la.w.PendingWorkerKey.m {
		case schema.Maybe_Value:
			la.w.PendingWorkerKey.v = la.ca_PendingWorkerKey.w
			la.state = laState_initial
			la.f++
			return true
		case schema.Maybe_Null:
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 4:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 5:
		switch la.w.Multiaddrs.m {
		case schema.Maybe_Value:
			la.w.Multiaddrs.v = la.ca_Multiaddrs.w
			la.state = laState_initial
			la.f++
			return true
		case schema.Maybe_Null:
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 6:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 7:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 8:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 9:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 10:
		switch la.w.PendingOwnerAddress.m {
		case schema.Maybe_Value:
			la.w.PendingOwnerAddress.v = la.ca_PendingOwnerAddress.w
			la.state = laState_initial
			la.f++
			return true
		case schema.Maybe_Null:
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (la *_MinerV2Info__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	if la.f >= 11 {
		return _ErrorThunkAssembler{schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(11)}}
	}
	la.state = laState_midValue
	switch la.f {
	case 0:
		la.ca_Owner.w = &la.w.Owner
		la.ca_Owner.m = &la.cm
		return &la.ca_Owner
	case 1:
		la.ca_Worker.w = &la.w.Worker
		la.ca_Worker.m = &la.cm
		return &la.ca_Worker
	case 2:
		la.ca_ControlAddresses.w = la.w.ControlAddresses.v
		la.ca_ControlAddresses.m = &la.w.ControlAddresses.m
		la.w.ControlAddresses.m = allowNull
		return &la.ca_ControlAddresses
	case 3:
		la.ca_PendingWorkerKey.w = la.w.PendingWorkerKey.v
		la.ca_PendingWorkerKey.m = &la.w.PendingWorkerKey.m
		la.w.PendingWorkerKey.m = allowNull
		return &la.ca_PendingWorkerKey
	case 4:
		la.ca_PeerId.w = &la.w.PeerId
		la.ca_PeerId.m = &la.cm
		return &la.ca_PeerId
	case 5:
		la.ca_Multiaddrs.w = la.w.Multiaddrs.v
		la.ca_Multiaddrs.m = &la.w.Multiaddrs.m
		la.w.Multiaddrs.m = allowNull
		return &la.ca_Multiaddrs
	case 6:
		la.ca_SealProofType.w = &la.w.SealProofType
		la.ca_SealProofType.m = &la.cm
		return &la.ca_SealProofType
	case 7:
		la.ca_SectorSize.w = &la.w.SectorSize
		la.ca_SectorSize.m = &la.cm
		return &la.ca_SectorSize
	case 8:
		la.ca_WindowPoStPartitionSectors.w = &la.w.WindowPoStPartitionSectors
		la.ca_WindowPoStPartitionSectors.m = &la.cm
		return &la.ca_WindowPoStPartitionSectors
	case 9:
		la.ca_ConsensusFaultElapsed.w = &la.w.ConsensusFaultElapsed
		la.ca_ConsensusFaultElapsed.m = &la.cm
		return &la.ca_ConsensusFaultElapsed
	case 10:
		la.ca_PendingOwnerAddress.w = la.w.PendingOwnerAddress.v
		la.ca_PendingOwnerAddress.m = &la.w.PendingOwnerAddress.m
		la.w.PendingOwnerAddress.m = allowNull
		return &la.ca_PendingOwnerAddress
	default:
		panic("unreachable")
	}
}
func (la *_MinerV2Info__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_MinerV2Info__ReprAssembler) ValuePrototype(_ int) ipld.NodePrototype {
	panic("todo structbuilder tuplerepr valueprototype")
}
