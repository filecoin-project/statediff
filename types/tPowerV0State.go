package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _PowerV0State struct {
	TotalRawBytePower _BigInt
	TotalBytesCommitted _BigInt
	TotalQualityAdjPower _BigInt
	TotalQABytesCommitted _BigInt
	TotalPledgeCollateral _BigInt
	ThisEpochRawBytePower _BigInt
	ThisEpochQualityAdjPower _BigInt
	ThisEpochPledgeCollateral _BigInt
	ThisEpochQAPowerSmoothed _V0FilterEstimate__Maybe
	MinerCount _Int
	MinerAboveMinPowerCount _Int
	CronEventQueue _Link__PowerV0CronEvent
	FirstCronEpoch _ChainEpoch
	LastProcessedCronEpoch _ChainEpoch
	Claims _Link__PowerV0Claim
	ProofValidationBatch _Link__Maybe
}
type PowerV0State = *_PowerV0State

func (n _PowerV0State) FieldTotalRawBytePower()	BigInt {
	return &n.TotalRawBytePower
}
func (n _PowerV0State) FieldTotalBytesCommitted()	BigInt {
	return &n.TotalBytesCommitted
}
func (n _PowerV0State) FieldTotalQualityAdjPower()	BigInt {
	return &n.TotalQualityAdjPower
}
func (n _PowerV0State) FieldTotalQABytesCommitted()	BigInt {
	return &n.TotalQABytesCommitted
}
func (n _PowerV0State) FieldTotalPledgeCollateral()	BigInt {
	return &n.TotalPledgeCollateral
}
func (n _PowerV0State) FieldThisEpochRawBytePower()	BigInt {
	return &n.ThisEpochRawBytePower
}
func (n _PowerV0State) FieldThisEpochQualityAdjPower()	BigInt {
	return &n.ThisEpochQualityAdjPower
}
func (n _PowerV0State) FieldThisEpochPledgeCollateral()	BigInt {
	return &n.ThisEpochPledgeCollateral
}
func (n _PowerV0State) FieldThisEpochQAPowerSmoothed()	MaybeV0FilterEstimate {
	return &n.ThisEpochQAPowerSmoothed
}
func (n _PowerV0State) FieldMinerCount()	Int {
	return &n.MinerCount
}
func (n _PowerV0State) FieldMinerAboveMinPowerCount()	Int {
	return &n.MinerAboveMinPowerCount
}
func (n _PowerV0State) FieldCronEventQueue()	Link__PowerV0CronEvent {
	return &n.CronEventQueue
}
func (n _PowerV0State) FieldFirstCronEpoch()	ChainEpoch {
	return &n.FirstCronEpoch
}
func (n _PowerV0State) FieldLastProcessedCronEpoch()	ChainEpoch {
	return &n.LastProcessedCronEpoch
}
func (n _PowerV0State) FieldClaims()	Link__PowerV0Claim {
	return &n.Claims
}
func (n _PowerV0State) FieldProofValidationBatch()	MaybeLink {
	return &n.ProofValidationBatch
}
type _PowerV0State__Maybe struct {
	m schema.Maybe
	v PowerV0State
}
type MaybePowerV0State = *_PowerV0State__Maybe

func (m MaybePowerV0State) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybePowerV0State) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybePowerV0State) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybePowerV0State) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybePowerV0State) Must() PowerV0State {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__PowerV0State_TotalRawBytePower = _String{"TotalRawBytePower"}
	fieldName__PowerV0State_TotalBytesCommitted = _String{"TotalBytesCommitted"}
	fieldName__PowerV0State_TotalQualityAdjPower = _String{"TotalQualityAdjPower"}
	fieldName__PowerV0State_TotalQABytesCommitted = _String{"TotalQABytesCommitted"}
	fieldName__PowerV0State_TotalPledgeCollateral = _String{"TotalPledgeCollateral"}
	fieldName__PowerV0State_ThisEpochRawBytePower = _String{"ThisEpochRawBytePower"}
	fieldName__PowerV0State_ThisEpochQualityAdjPower = _String{"ThisEpochQualityAdjPower"}
	fieldName__PowerV0State_ThisEpochPledgeCollateral = _String{"ThisEpochPledgeCollateral"}
	fieldName__PowerV0State_ThisEpochQAPowerSmoothed = _String{"ThisEpochQAPowerSmoothed"}
	fieldName__PowerV0State_MinerCount = _String{"MinerCount"}
	fieldName__PowerV0State_MinerAboveMinPowerCount = _String{"MinerAboveMinPowerCount"}
	fieldName__PowerV0State_CronEventQueue = _String{"CronEventQueue"}
	fieldName__PowerV0State_FirstCronEpoch = _String{"FirstCronEpoch"}
	fieldName__PowerV0State_LastProcessedCronEpoch = _String{"LastProcessedCronEpoch"}
	fieldName__PowerV0State_Claims = _String{"Claims"}
	fieldName__PowerV0State_ProofValidationBatch = _String{"ProofValidationBatch"}
)
var _ ipld.Node = (PowerV0State)(&_PowerV0State{})
var _ schema.TypedNode = (PowerV0State)(&_PowerV0State{})
func (PowerV0State) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n PowerV0State) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "TotalRawBytePower":
		return &n.TotalRawBytePower, nil
	case "TotalBytesCommitted":
		return &n.TotalBytesCommitted, nil
	case "TotalQualityAdjPower":
		return &n.TotalQualityAdjPower, nil
	case "TotalQABytesCommitted":
		return &n.TotalQABytesCommitted, nil
	case "TotalPledgeCollateral":
		return &n.TotalPledgeCollateral, nil
	case "ThisEpochRawBytePower":
		return &n.ThisEpochRawBytePower, nil
	case "ThisEpochQualityAdjPower":
		return &n.ThisEpochQualityAdjPower, nil
	case "ThisEpochPledgeCollateral":
		return &n.ThisEpochPledgeCollateral, nil
	case "ThisEpochQAPowerSmoothed":
		if n.ThisEpochQAPowerSmoothed.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.ThisEpochQAPowerSmoothed.v, nil
	case "MinerCount":
		return &n.MinerCount, nil
	case "MinerAboveMinPowerCount":
		return &n.MinerAboveMinPowerCount, nil
	case "CronEventQueue":
		return &n.CronEventQueue, nil
	case "FirstCronEpoch":
		return &n.FirstCronEpoch, nil
	case "LastProcessedCronEpoch":
		return &n.LastProcessedCronEpoch, nil
	case "Claims":
		return &n.Claims, nil
	case "ProofValidationBatch":
		if n.ProofValidationBatch.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.ProofValidationBatch.v, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n PowerV0State) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (PowerV0State) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"types.PowerV0State"}.LookupByIndex(0)
}
func (n PowerV0State) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n PowerV0State) MapIterator() ipld.MapIterator {
	return &_PowerV0State__MapItr{n, 0}
}

type _PowerV0State__MapItr struct {
	n PowerV0State
	idx  int
}

func (itr *_PowerV0State__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 16 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__PowerV0State_TotalRawBytePower
		v = &itr.n.TotalRawBytePower
	case 1:
		k = &fieldName__PowerV0State_TotalBytesCommitted
		v = &itr.n.TotalBytesCommitted
	case 2:
		k = &fieldName__PowerV0State_TotalQualityAdjPower
		v = &itr.n.TotalQualityAdjPower
	case 3:
		k = &fieldName__PowerV0State_TotalQABytesCommitted
		v = &itr.n.TotalQABytesCommitted
	case 4:
		k = &fieldName__PowerV0State_TotalPledgeCollateral
		v = &itr.n.TotalPledgeCollateral
	case 5:
		k = &fieldName__PowerV0State_ThisEpochRawBytePower
		v = &itr.n.ThisEpochRawBytePower
	case 6:
		k = &fieldName__PowerV0State_ThisEpochQualityAdjPower
		v = &itr.n.ThisEpochQualityAdjPower
	case 7:
		k = &fieldName__PowerV0State_ThisEpochPledgeCollateral
		v = &itr.n.ThisEpochPledgeCollateral
	case 8:
		k = &fieldName__PowerV0State_ThisEpochQAPowerSmoothed
		if itr.n.ThisEpochQAPowerSmoothed.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.ThisEpochQAPowerSmoothed.v
	case 9:
		k = &fieldName__PowerV0State_MinerCount
		v = &itr.n.MinerCount
	case 10:
		k = &fieldName__PowerV0State_MinerAboveMinPowerCount
		v = &itr.n.MinerAboveMinPowerCount
	case 11:
		k = &fieldName__PowerV0State_CronEventQueue
		v = &itr.n.CronEventQueue
	case 12:
		k = &fieldName__PowerV0State_FirstCronEpoch
		v = &itr.n.FirstCronEpoch
	case 13:
		k = &fieldName__PowerV0State_LastProcessedCronEpoch
		v = &itr.n.LastProcessedCronEpoch
	case 14:
		k = &fieldName__PowerV0State_Claims
		v = &itr.n.Claims
	case 15:
		k = &fieldName__PowerV0State_ProofValidationBatch
		if itr.n.ProofValidationBatch.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.ProofValidationBatch.v
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_PowerV0State__MapItr) Done() bool {
	return itr.idx >= 16
}

func (PowerV0State) ListIterator() ipld.ListIterator {
	return nil
}
func (PowerV0State) Length() int {
	return 16
}
func (PowerV0State) IsAbsent() bool {
	return false
}
func (PowerV0State) IsNull() bool {
	return false
}
func (PowerV0State) AsBool() (bool, error) {
	return mixins.Map{"types.PowerV0State"}.AsBool()
}
func (PowerV0State) AsInt() (int, error) {
	return mixins.Map{"types.PowerV0State"}.AsInt()
}
func (PowerV0State) AsFloat() (float64, error) {
	return mixins.Map{"types.PowerV0State"}.AsFloat()
}
func (PowerV0State) AsString() (string, error) {
	return mixins.Map{"types.PowerV0State"}.AsString()
}
func (PowerV0State) AsBytes() ([]byte, error) {
	return mixins.Map{"types.PowerV0State"}.AsBytes()
}
func (PowerV0State) AsLink() (ipld.Link, error) {
	return mixins.Map{"types.PowerV0State"}.AsLink()
}
func (PowerV0State) Prototype() ipld.NodePrototype {
	return _PowerV0State__Prototype{}
}
type _PowerV0State__Prototype struct{}

func (_PowerV0State__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _PowerV0State__Builder
	nb.Reset()
	return &nb
}
type _PowerV0State__Builder struct {
	_PowerV0State__Assembler
}
func (nb *_PowerV0State__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_PowerV0State__Builder) Reset() {
	var w _PowerV0State
	var m schema.Maybe
	*nb = _PowerV0State__Builder{_PowerV0State__Assembler{w: &w, m: &m}}
}
type _PowerV0State__Assembler struct {
	w *_PowerV0State
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_TotalRawBytePower _BigInt__Assembler
	ca_TotalBytesCommitted _BigInt__Assembler
	ca_TotalQualityAdjPower _BigInt__Assembler
	ca_TotalQABytesCommitted _BigInt__Assembler
	ca_TotalPledgeCollateral _BigInt__Assembler
	ca_ThisEpochRawBytePower _BigInt__Assembler
	ca_ThisEpochQualityAdjPower _BigInt__Assembler
	ca_ThisEpochPledgeCollateral _BigInt__Assembler
	ca_ThisEpochQAPowerSmoothed _V0FilterEstimate__Assembler
	ca_MinerCount _Int__Assembler
	ca_MinerAboveMinPowerCount _Int__Assembler
	ca_CronEventQueue _Link__PowerV0CronEvent__Assembler
	ca_FirstCronEpoch _ChainEpoch__Assembler
	ca_LastProcessedCronEpoch _ChainEpoch__Assembler
	ca_Claims _Link__PowerV0Claim__Assembler
	ca_ProofValidationBatch _Link__Assembler
	}

func (na *_PowerV0State__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_TotalRawBytePower.reset()
	na.ca_TotalBytesCommitted.reset()
	na.ca_TotalQualityAdjPower.reset()
	na.ca_TotalQABytesCommitted.reset()
	na.ca_TotalPledgeCollateral.reset()
	na.ca_ThisEpochRawBytePower.reset()
	na.ca_ThisEpochQualityAdjPower.reset()
	na.ca_ThisEpochPledgeCollateral.reset()
	na.ca_ThisEpochQAPowerSmoothed.reset()
	na.ca_MinerCount.reset()
	na.ca_MinerAboveMinPowerCount.reset()
	na.ca_CronEventQueue.reset()
	na.ca_FirstCronEpoch.reset()
	na.ca_LastProcessedCronEpoch.reset()
	na.ca_Claims.reset()
	na.ca_ProofValidationBatch.reset()
}

var (
	fieldBit__PowerV0State_TotalRawBytePower = 1 << 0
	fieldBit__PowerV0State_TotalBytesCommitted = 1 << 1
	fieldBit__PowerV0State_TotalQualityAdjPower = 1 << 2
	fieldBit__PowerV0State_TotalQABytesCommitted = 1 << 3
	fieldBit__PowerV0State_TotalPledgeCollateral = 1 << 4
	fieldBit__PowerV0State_ThisEpochRawBytePower = 1 << 5
	fieldBit__PowerV0State_ThisEpochQualityAdjPower = 1 << 6
	fieldBit__PowerV0State_ThisEpochPledgeCollateral = 1 << 7
	fieldBit__PowerV0State_ThisEpochQAPowerSmoothed = 1 << 8
	fieldBit__PowerV0State_MinerCount = 1 << 9
	fieldBit__PowerV0State_MinerAboveMinPowerCount = 1 << 10
	fieldBit__PowerV0State_CronEventQueue = 1 << 11
	fieldBit__PowerV0State_FirstCronEpoch = 1 << 12
	fieldBit__PowerV0State_LastProcessedCronEpoch = 1 << 13
	fieldBit__PowerV0State_Claims = 1 << 14
	fieldBit__PowerV0State_ProofValidationBatch = 1 << 15
	fieldBits__PowerV0State_sufficient = 0 + 1 << 0 + 1 << 1 + 1 << 2 + 1 << 3 + 1 << 4 + 1 << 5 + 1 << 6 + 1 << 7 + 1 << 8 + 1 << 9 + 1 << 10 + 1 << 11 + 1 << 12 + 1 << 13 + 1 << 14 + 1 << 15
)
func (na *_PowerV0State__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_PowerV0State{}
	}
	return na, nil
}
func (_PowerV0State__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"types.PowerV0State"}.BeginList(0)
}
func (na *_PowerV0State__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"types.PowerV0State"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_PowerV0State__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"types.PowerV0State"}.AssignBool(false)
}
func (_PowerV0State__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"types.PowerV0State"}.AssignInt(0)
}
func (_PowerV0State__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"types.PowerV0State"}.AssignFloat(0)
}
func (_PowerV0State__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"types.PowerV0State"}.AssignString("")
}
func (_PowerV0State__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"types.PowerV0State"}.AssignBytes(nil)
}
func (_PowerV0State__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"types.PowerV0State"}.AssignLink(nil)
}
func (na *_PowerV0State__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_PowerV0State); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "types.PowerV0State", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_PowerV0State__Assembler) Prototype() ipld.NodePrototype {
	return _PowerV0State__Prototype{}
}
func (ma *_PowerV0State__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_TotalRawBytePower.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_TotalBytesCommitted.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_TotalQualityAdjPower.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_TotalQABytesCommitted.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 4:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_TotalPledgeCollateral.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 5:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ThisEpochRawBytePower.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 6:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ThisEpochQualityAdjPower.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 7:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ThisEpochPledgeCollateral.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 8:
		switch ma.w.ThisEpochQAPowerSmoothed.m {
		case schema.Maybe_Null:
			ma.state = maState_initial
			return true
		case schema.Maybe_Value:
			ma.w.ThisEpochQAPowerSmoothed.v = ma.ca_ThisEpochQAPowerSmoothed.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 9:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_MinerCount.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 10:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_MinerAboveMinPowerCount.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 11:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_CronEventQueue.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 12:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_FirstCronEpoch.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 13:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_LastProcessedCronEpoch.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 14:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Claims.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 15:
		switch ma.w.ProofValidationBatch.m {
		case schema.Maybe_Null:
			ma.state = maState_initial
			return true
		case schema.Maybe_Value:
			ma.w.ProofValidationBatch.v = ma.ca_ProofValidationBatch.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_PowerV0State__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "TotalRawBytePower":
		if ma.s & fieldBit__PowerV0State_TotalRawBytePower != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_TotalRawBytePower}
		}
		ma.s += fieldBit__PowerV0State_TotalRawBytePower
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_TotalRawBytePower.w = &ma.w.TotalRawBytePower
		ma.ca_TotalRawBytePower.m = &ma.cm
		return &ma.ca_TotalRawBytePower, nil
	case "TotalBytesCommitted":
		if ma.s & fieldBit__PowerV0State_TotalBytesCommitted != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_TotalBytesCommitted}
		}
		ma.s += fieldBit__PowerV0State_TotalBytesCommitted
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_TotalBytesCommitted.w = &ma.w.TotalBytesCommitted
		ma.ca_TotalBytesCommitted.m = &ma.cm
		return &ma.ca_TotalBytesCommitted, nil
	case "TotalQualityAdjPower":
		if ma.s & fieldBit__PowerV0State_TotalQualityAdjPower != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_TotalQualityAdjPower}
		}
		ma.s += fieldBit__PowerV0State_TotalQualityAdjPower
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_TotalQualityAdjPower.w = &ma.w.TotalQualityAdjPower
		ma.ca_TotalQualityAdjPower.m = &ma.cm
		return &ma.ca_TotalQualityAdjPower, nil
	case "TotalQABytesCommitted":
		if ma.s & fieldBit__PowerV0State_TotalQABytesCommitted != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_TotalQABytesCommitted}
		}
		ma.s += fieldBit__PowerV0State_TotalQABytesCommitted
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_TotalQABytesCommitted.w = &ma.w.TotalQABytesCommitted
		ma.ca_TotalQABytesCommitted.m = &ma.cm
		return &ma.ca_TotalQABytesCommitted, nil
	case "TotalPledgeCollateral":
		if ma.s & fieldBit__PowerV0State_TotalPledgeCollateral != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_TotalPledgeCollateral}
		}
		ma.s += fieldBit__PowerV0State_TotalPledgeCollateral
		ma.state = maState_midValue
		ma.f = 4
		ma.ca_TotalPledgeCollateral.w = &ma.w.TotalPledgeCollateral
		ma.ca_TotalPledgeCollateral.m = &ma.cm
		return &ma.ca_TotalPledgeCollateral, nil
	case "ThisEpochRawBytePower":
		if ma.s & fieldBit__PowerV0State_ThisEpochRawBytePower != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_ThisEpochRawBytePower}
		}
		ma.s += fieldBit__PowerV0State_ThisEpochRawBytePower
		ma.state = maState_midValue
		ma.f = 5
		ma.ca_ThisEpochRawBytePower.w = &ma.w.ThisEpochRawBytePower
		ma.ca_ThisEpochRawBytePower.m = &ma.cm
		return &ma.ca_ThisEpochRawBytePower, nil
	case "ThisEpochQualityAdjPower":
		if ma.s & fieldBit__PowerV0State_ThisEpochQualityAdjPower != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_ThisEpochQualityAdjPower}
		}
		ma.s += fieldBit__PowerV0State_ThisEpochQualityAdjPower
		ma.state = maState_midValue
		ma.f = 6
		ma.ca_ThisEpochQualityAdjPower.w = &ma.w.ThisEpochQualityAdjPower
		ma.ca_ThisEpochQualityAdjPower.m = &ma.cm
		return &ma.ca_ThisEpochQualityAdjPower, nil
	case "ThisEpochPledgeCollateral":
		if ma.s & fieldBit__PowerV0State_ThisEpochPledgeCollateral != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_ThisEpochPledgeCollateral}
		}
		ma.s += fieldBit__PowerV0State_ThisEpochPledgeCollateral
		ma.state = maState_midValue
		ma.f = 7
		ma.ca_ThisEpochPledgeCollateral.w = &ma.w.ThisEpochPledgeCollateral
		ma.ca_ThisEpochPledgeCollateral.m = &ma.cm
		return &ma.ca_ThisEpochPledgeCollateral, nil
	case "ThisEpochQAPowerSmoothed":
		if ma.s & fieldBit__PowerV0State_ThisEpochQAPowerSmoothed != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_ThisEpochQAPowerSmoothed}
		}
		ma.s += fieldBit__PowerV0State_ThisEpochQAPowerSmoothed
		ma.state = maState_midValue
		ma.f = 8
		ma.ca_ThisEpochQAPowerSmoothed.w = ma.w.ThisEpochQAPowerSmoothed.v
		ma.ca_ThisEpochQAPowerSmoothed.m = &ma.w.ThisEpochQAPowerSmoothed.m
		ma.w.ThisEpochQAPowerSmoothed.m = allowNull
		return &ma.ca_ThisEpochQAPowerSmoothed, nil
	case "MinerCount":
		if ma.s & fieldBit__PowerV0State_MinerCount != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_MinerCount}
		}
		ma.s += fieldBit__PowerV0State_MinerCount
		ma.state = maState_midValue
		ma.f = 9
		ma.ca_MinerCount.w = &ma.w.MinerCount
		ma.ca_MinerCount.m = &ma.cm
		return &ma.ca_MinerCount, nil
	case "MinerAboveMinPowerCount":
		if ma.s & fieldBit__PowerV0State_MinerAboveMinPowerCount != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_MinerAboveMinPowerCount}
		}
		ma.s += fieldBit__PowerV0State_MinerAboveMinPowerCount
		ma.state = maState_midValue
		ma.f = 10
		ma.ca_MinerAboveMinPowerCount.w = &ma.w.MinerAboveMinPowerCount
		ma.ca_MinerAboveMinPowerCount.m = &ma.cm
		return &ma.ca_MinerAboveMinPowerCount, nil
	case "CronEventQueue":
		if ma.s & fieldBit__PowerV0State_CronEventQueue != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_CronEventQueue}
		}
		ma.s += fieldBit__PowerV0State_CronEventQueue
		ma.state = maState_midValue
		ma.f = 11
		ma.ca_CronEventQueue.w = &ma.w.CronEventQueue
		ma.ca_CronEventQueue.m = &ma.cm
		return &ma.ca_CronEventQueue, nil
	case "FirstCronEpoch":
		if ma.s & fieldBit__PowerV0State_FirstCronEpoch != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_FirstCronEpoch}
		}
		ma.s += fieldBit__PowerV0State_FirstCronEpoch
		ma.state = maState_midValue
		ma.f = 12
		ma.ca_FirstCronEpoch.w = &ma.w.FirstCronEpoch
		ma.ca_FirstCronEpoch.m = &ma.cm
		return &ma.ca_FirstCronEpoch, nil
	case "LastProcessedCronEpoch":
		if ma.s & fieldBit__PowerV0State_LastProcessedCronEpoch != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_LastProcessedCronEpoch}
		}
		ma.s += fieldBit__PowerV0State_LastProcessedCronEpoch
		ma.state = maState_midValue
		ma.f = 13
		ma.ca_LastProcessedCronEpoch.w = &ma.w.LastProcessedCronEpoch
		ma.ca_LastProcessedCronEpoch.m = &ma.cm
		return &ma.ca_LastProcessedCronEpoch, nil
	case "Claims":
		if ma.s & fieldBit__PowerV0State_Claims != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_Claims}
		}
		ma.s += fieldBit__PowerV0State_Claims
		ma.state = maState_midValue
		ma.f = 14
		ma.ca_Claims.w = &ma.w.Claims
		ma.ca_Claims.m = &ma.cm
		return &ma.ca_Claims, nil
	case "ProofValidationBatch":
		if ma.s & fieldBit__PowerV0State_ProofValidationBatch != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_ProofValidationBatch}
		}
		ma.s += fieldBit__PowerV0State_ProofValidationBatch
		ma.state = maState_midValue
		ma.f = 15
		ma.ca_ProofValidationBatch.w = ma.w.ProofValidationBatch.v
		ma.ca_ProofValidationBatch.m = &ma.w.ProofValidationBatch.m
		ma.w.ProofValidationBatch.m = allowNull
		return &ma.ca_ProofValidationBatch, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"types.PowerV0State", Key:&_String{k}}
	}
}
func (ma *_PowerV0State__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_PowerV0State__KeyAssembler)(ma)
}
func (ma *_PowerV0State__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_TotalRawBytePower.w = &ma.w.TotalRawBytePower
		ma.ca_TotalRawBytePower.m = &ma.cm
		return &ma.ca_TotalRawBytePower
	case 1:
		ma.ca_TotalBytesCommitted.w = &ma.w.TotalBytesCommitted
		ma.ca_TotalBytesCommitted.m = &ma.cm
		return &ma.ca_TotalBytesCommitted
	case 2:
		ma.ca_TotalQualityAdjPower.w = &ma.w.TotalQualityAdjPower
		ma.ca_TotalQualityAdjPower.m = &ma.cm
		return &ma.ca_TotalQualityAdjPower
	case 3:
		ma.ca_TotalQABytesCommitted.w = &ma.w.TotalQABytesCommitted
		ma.ca_TotalQABytesCommitted.m = &ma.cm
		return &ma.ca_TotalQABytesCommitted
	case 4:
		ma.ca_TotalPledgeCollateral.w = &ma.w.TotalPledgeCollateral
		ma.ca_TotalPledgeCollateral.m = &ma.cm
		return &ma.ca_TotalPledgeCollateral
	case 5:
		ma.ca_ThisEpochRawBytePower.w = &ma.w.ThisEpochRawBytePower
		ma.ca_ThisEpochRawBytePower.m = &ma.cm
		return &ma.ca_ThisEpochRawBytePower
	case 6:
		ma.ca_ThisEpochQualityAdjPower.w = &ma.w.ThisEpochQualityAdjPower
		ma.ca_ThisEpochQualityAdjPower.m = &ma.cm
		return &ma.ca_ThisEpochQualityAdjPower
	case 7:
		ma.ca_ThisEpochPledgeCollateral.w = &ma.w.ThisEpochPledgeCollateral
		ma.ca_ThisEpochPledgeCollateral.m = &ma.cm
		return &ma.ca_ThisEpochPledgeCollateral
	case 8:
		ma.ca_ThisEpochQAPowerSmoothed.w = ma.w.ThisEpochQAPowerSmoothed.v
		ma.ca_ThisEpochQAPowerSmoothed.m = &ma.w.ThisEpochQAPowerSmoothed.m
		ma.w.ThisEpochQAPowerSmoothed.m = allowNull
		return &ma.ca_ThisEpochQAPowerSmoothed
	case 9:
		ma.ca_MinerCount.w = &ma.w.MinerCount
		ma.ca_MinerCount.m = &ma.cm
		return &ma.ca_MinerCount
	case 10:
		ma.ca_MinerAboveMinPowerCount.w = &ma.w.MinerAboveMinPowerCount
		ma.ca_MinerAboveMinPowerCount.m = &ma.cm
		return &ma.ca_MinerAboveMinPowerCount
	case 11:
		ma.ca_CronEventQueue.w = &ma.w.CronEventQueue
		ma.ca_CronEventQueue.m = &ma.cm
		return &ma.ca_CronEventQueue
	case 12:
		ma.ca_FirstCronEpoch.w = &ma.w.FirstCronEpoch
		ma.ca_FirstCronEpoch.m = &ma.cm
		return &ma.ca_FirstCronEpoch
	case 13:
		ma.ca_LastProcessedCronEpoch.w = &ma.w.LastProcessedCronEpoch
		ma.ca_LastProcessedCronEpoch.m = &ma.cm
		return &ma.ca_LastProcessedCronEpoch
	case 14:
		ma.ca_Claims.w = &ma.w.Claims
		ma.ca_Claims.m = &ma.cm
		return &ma.ca_Claims
	case 15:
		ma.ca_ProofValidationBatch.w = ma.w.ProofValidationBatch.v
		ma.ca_ProofValidationBatch.m = &ma.w.ProofValidationBatch.m
		ma.w.ProofValidationBatch.m = allowNull
		return &ma.ca_ProofValidationBatch
	default:
		panic("unreachable")
	}
}
func (ma *_PowerV0State__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_PowerV0State__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_PowerV0State__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _PowerV0State__KeyAssembler _PowerV0State__Assembler
func (_PowerV0State__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"types.PowerV0State.KeyAssembler"}.BeginMap(0)
}
func (_PowerV0State__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"types.PowerV0State.KeyAssembler"}.BeginList(0)
}
func (na *_PowerV0State__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"types.PowerV0State.KeyAssembler"}.AssignNull()
}
func (_PowerV0State__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"types.PowerV0State.KeyAssembler"}.AssignBool(false)
}
func (_PowerV0State__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"types.PowerV0State.KeyAssembler"}.AssignInt(0)
}
func (_PowerV0State__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"types.PowerV0State.KeyAssembler"}.AssignFloat(0)
}
func (ka *_PowerV0State__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "TotalRawBytePower":
		if ka.s & fieldBit__PowerV0State_TotalRawBytePower != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_TotalRawBytePower}
		}
		ka.s += fieldBit__PowerV0State_TotalRawBytePower
		ka.state = maState_expectValue
		ka.f = 0
	case "TotalBytesCommitted":
		if ka.s & fieldBit__PowerV0State_TotalBytesCommitted != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_TotalBytesCommitted}
		}
		ka.s += fieldBit__PowerV0State_TotalBytesCommitted
		ka.state = maState_expectValue
		ka.f = 1
	case "TotalQualityAdjPower":
		if ka.s & fieldBit__PowerV0State_TotalQualityAdjPower != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_TotalQualityAdjPower}
		}
		ka.s += fieldBit__PowerV0State_TotalQualityAdjPower
		ka.state = maState_expectValue
		ka.f = 2
	case "TotalQABytesCommitted":
		if ka.s & fieldBit__PowerV0State_TotalQABytesCommitted != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_TotalQABytesCommitted}
		}
		ka.s += fieldBit__PowerV0State_TotalQABytesCommitted
		ka.state = maState_expectValue
		ka.f = 3
	case "TotalPledgeCollateral":
		if ka.s & fieldBit__PowerV0State_TotalPledgeCollateral != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_TotalPledgeCollateral}
		}
		ka.s += fieldBit__PowerV0State_TotalPledgeCollateral
		ka.state = maState_expectValue
		ka.f = 4
	case "ThisEpochRawBytePower":
		if ka.s & fieldBit__PowerV0State_ThisEpochRawBytePower != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_ThisEpochRawBytePower}
		}
		ka.s += fieldBit__PowerV0State_ThisEpochRawBytePower
		ka.state = maState_expectValue
		ka.f = 5
	case "ThisEpochQualityAdjPower":
		if ka.s & fieldBit__PowerV0State_ThisEpochQualityAdjPower != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_ThisEpochQualityAdjPower}
		}
		ka.s += fieldBit__PowerV0State_ThisEpochQualityAdjPower
		ka.state = maState_expectValue
		ka.f = 6
	case "ThisEpochPledgeCollateral":
		if ka.s & fieldBit__PowerV0State_ThisEpochPledgeCollateral != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_ThisEpochPledgeCollateral}
		}
		ka.s += fieldBit__PowerV0State_ThisEpochPledgeCollateral
		ka.state = maState_expectValue
		ka.f = 7
	case "ThisEpochQAPowerSmoothed":
		if ka.s & fieldBit__PowerV0State_ThisEpochQAPowerSmoothed != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_ThisEpochQAPowerSmoothed}
		}
		ka.s += fieldBit__PowerV0State_ThisEpochQAPowerSmoothed
		ka.state = maState_expectValue
		ka.f = 8
	case "MinerCount":
		if ka.s & fieldBit__PowerV0State_MinerCount != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_MinerCount}
		}
		ka.s += fieldBit__PowerV0State_MinerCount
		ka.state = maState_expectValue
		ka.f = 9
	case "MinerAboveMinPowerCount":
		if ka.s & fieldBit__PowerV0State_MinerAboveMinPowerCount != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_MinerAboveMinPowerCount}
		}
		ka.s += fieldBit__PowerV0State_MinerAboveMinPowerCount
		ka.state = maState_expectValue
		ka.f = 10
	case "CronEventQueue":
		if ka.s & fieldBit__PowerV0State_CronEventQueue != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_CronEventQueue}
		}
		ka.s += fieldBit__PowerV0State_CronEventQueue
		ka.state = maState_expectValue
		ka.f = 11
	case "FirstCronEpoch":
		if ka.s & fieldBit__PowerV0State_FirstCronEpoch != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_FirstCronEpoch}
		}
		ka.s += fieldBit__PowerV0State_FirstCronEpoch
		ka.state = maState_expectValue
		ka.f = 12
	case "LastProcessedCronEpoch":
		if ka.s & fieldBit__PowerV0State_LastProcessedCronEpoch != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_LastProcessedCronEpoch}
		}
		ka.s += fieldBit__PowerV0State_LastProcessedCronEpoch
		ka.state = maState_expectValue
		ka.f = 13
	case "Claims":
		if ka.s & fieldBit__PowerV0State_Claims != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_Claims}
		}
		ka.s += fieldBit__PowerV0State_Claims
		ka.state = maState_expectValue
		ka.f = 14
	case "ProofValidationBatch":
		if ka.s & fieldBit__PowerV0State_ProofValidationBatch != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__PowerV0State_ProofValidationBatch}
		}
		ka.s += fieldBit__PowerV0State_ProofValidationBatch
		ka.state = maState_expectValue
		ka.f = 15
	default:
		return ipld.ErrInvalidKey{TypeName:"types.PowerV0State", Key:&_String{k}}
	}
	return nil
}
func (_PowerV0State__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"types.PowerV0State.KeyAssembler"}.AssignBytes(nil)
}
func (_PowerV0State__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"types.PowerV0State.KeyAssembler"}.AssignLink(nil)
}
func (ka *_PowerV0State__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_PowerV0State__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (PowerV0State) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n PowerV0State) Representation() ipld.Node {
	return (*_PowerV0State__Repr)(n)
}
type _PowerV0State__Repr _PowerV0State
var _ ipld.Node = &_PowerV0State__Repr{}
func (_PowerV0State__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_List
}
func (_PowerV0State__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"types.PowerV0State.Repr"}.LookupByString("")
}
func (n *_PowerV0State__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ki, err := key.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(ki)
}
func (n *_PowerV0State__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	switch idx {
	case 0:
		return n.TotalRawBytePower.Representation(), nil
	case 1:
		return n.TotalBytesCommitted.Representation(), nil
	case 2:
		return n.TotalQualityAdjPower.Representation(), nil
	case 3:
		return n.TotalQABytesCommitted.Representation(), nil
	case 4:
		return n.TotalPledgeCollateral.Representation(), nil
	case 5:
		return n.ThisEpochRawBytePower.Representation(), nil
	case 6:
		return n.ThisEpochQualityAdjPower.Representation(), nil
	case 7:
		return n.ThisEpochPledgeCollateral.Representation(), nil
	case 8:
		if n.ThisEpochQAPowerSmoothed.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.ThisEpochQAPowerSmoothed.v.Representation(), nil
	case 9:
		return n.MinerCount.Representation(), nil
	case 10:
		return n.MinerAboveMinPowerCount.Representation(), nil
	case 11:
		return n.CronEventQueue.Representation(), nil
	case 12:
		return n.FirstCronEpoch.Representation(), nil
	case 13:
		return n.LastProcessedCronEpoch.Representation(), nil
	case 14:
		return n.Claims.Representation(), nil
	case 15:
		if n.ProofValidationBatch.m == schema.Maybe_Null {
			return ipld.Null, nil
		}
		return n.ProofValidationBatch.v.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(idx)}
	}
}
func (n _PowerV0State__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "types.PowerV0State.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_PowerV0State__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (n *_PowerV0State__Repr) ListIterator() ipld.ListIterator {
	return &_PowerV0State__ReprListItr{n, 0}
}

type _PowerV0State__ReprListItr struct {
	n   *_PowerV0State__Repr
	idx int
	
}

func (itr *_PowerV0State__ReprListItr) Next() (idx int, v ipld.Node, err error) {
	if itr.idx >= 16 {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		idx = itr.idx
		v = itr.n.TotalRawBytePower.Representation()
	case 1:
		idx = itr.idx
		v = itr.n.TotalBytesCommitted.Representation()
	case 2:
		idx = itr.idx
		v = itr.n.TotalQualityAdjPower.Representation()
	case 3:
		idx = itr.idx
		v = itr.n.TotalQABytesCommitted.Representation()
	case 4:
		idx = itr.idx
		v = itr.n.TotalPledgeCollateral.Representation()
	case 5:
		idx = itr.idx
		v = itr.n.ThisEpochRawBytePower.Representation()
	case 6:
		idx = itr.idx
		v = itr.n.ThisEpochQualityAdjPower.Representation()
	case 7:
		idx = itr.idx
		v = itr.n.ThisEpochPledgeCollateral.Representation()
	case 8:
		idx = itr.idx
		if itr.n.ThisEpochQAPowerSmoothed.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.ThisEpochQAPowerSmoothed.v.Representation()
	case 9:
		idx = itr.idx
		v = itr.n.MinerCount.Representation()
	case 10:
		idx = itr.idx
		v = itr.n.MinerAboveMinPowerCount.Representation()
	case 11:
		idx = itr.idx
		v = itr.n.CronEventQueue.Representation()
	case 12:
		idx = itr.idx
		v = itr.n.FirstCronEpoch.Representation()
	case 13:
		idx = itr.idx
		v = itr.n.LastProcessedCronEpoch.Representation()
	case 14:
		idx = itr.idx
		v = itr.n.Claims.Representation()
	case 15:
		idx = itr.idx
		if itr.n.ProofValidationBatch.m == schema.Maybe_Null {
			v = ipld.Null
			break
		}
		v = itr.n.ProofValidationBatch.v.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_PowerV0State__ReprListItr) Done() bool {
	return itr.idx >= 16
}

func (rn *_PowerV0State__Repr) Length() int {
	l := 16
	return l
}
func (_PowerV0State__Repr) IsAbsent() bool {
	return false
}
func (_PowerV0State__Repr) IsNull() bool {
	return false
}
func (_PowerV0State__Repr) AsBool() (bool, error) {
	return mixins.List{"types.PowerV0State.Repr"}.AsBool()
}
func (_PowerV0State__Repr) AsInt() (int, error) {
	return mixins.List{"types.PowerV0State.Repr"}.AsInt()
}
func (_PowerV0State__Repr) AsFloat() (float64, error) {
	return mixins.List{"types.PowerV0State.Repr"}.AsFloat()
}
func (_PowerV0State__Repr) AsString() (string, error) {
	return mixins.List{"types.PowerV0State.Repr"}.AsString()
}
func (_PowerV0State__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"types.PowerV0State.Repr"}.AsBytes()
}
func (_PowerV0State__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"types.PowerV0State.Repr"}.AsLink()
}
func (_PowerV0State__Repr) Prototype() ipld.NodePrototype {
	return _PowerV0State__ReprPrototype{}
}
type _PowerV0State__ReprPrototype struct{}

func (_PowerV0State__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _PowerV0State__ReprBuilder
	nb.Reset()
	return &nb
}
type _PowerV0State__ReprBuilder struct {
	_PowerV0State__ReprAssembler
}
func (nb *_PowerV0State__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_PowerV0State__ReprBuilder) Reset() {
	var w _PowerV0State
	var m schema.Maybe
	*nb = _PowerV0State__ReprBuilder{_PowerV0State__ReprAssembler{w: &w, m: &m}}
}
type _PowerV0State__ReprAssembler struct {
	w *_PowerV0State
	m *schema.Maybe
	state laState
	f int

	cm schema.Maybe
	ca_TotalRawBytePower _BigInt__ReprAssembler
	ca_TotalBytesCommitted _BigInt__ReprAssembler
	ca_TotalQualityAdjPower _BigInt__ReprAssembler
	ca_TotalQABytesCommitted _BigInt__ReprAssembler
	ca_TotalPledgeCollateral _BigInt__ReprAssembler
	ca_ThisEpochRawBytePower _BigInt__ReprAssembler
	ca_ThisEpochQualityAdjPower _BigInt__ReprAssembler
	ca_ThisEpochPledgeCollateral _BigInt__ReprAssembler
	ca_ThisEpochQAPowerSmoothed _V0FilterEstimate__ReprAssembler
	ca_MinerCount _Int__ReprAssembler
	ca_MinerAboveMinPowerCount _Int__ReprAssembler
	ca_CronEventQueue _Link__PowerV0CronEvent__ReprAssembler
	ca_FirstCronEpoch _ChainEpoch__ReprAssembler
	ca_LastProcessedCronEpoch _ChainEpoch__ReprAssembler
	ca_Claims _Link__PowerV0Claim__ReprAssembler
	ca_ProofValidationBatch _Link__ReprAssembler
	}

func (na *_PowerV0State__ReprAssembler) reset() {
	na.state = laState_initial
	na.f = 0
	na.ca_TotalRawBytePower.reset()
	na.ca_TotalBytesCommitted.reset()
	na.ca_TotalQualityAdjPower.reset()
	na.ca_TotalQABytesCommitted.reset()
	na.ca_TotalPledgeCollateral.reset()
	na.ca_ThisEpochRawBytePower.reset()
	na.ca_ThisEpochQualityAdjPower.reset()
	na.ca_ThisEpochPledgeCollateral.reset()
	na.ca_ThisEpochQAPowerSmoothed.reset()
	na.ca_MinerCount.reset()
	na.ca_MinerAboveMinPowerCount.reset()
	na.ca_CronEventQueue.reset()
	na.ca_FirstCronEpoch.reset()
	na.ca_LastProcessedCronEpoch.reset()
	na.ca_Claims.reset()
	na.ca_ProofValidationBatch.reset()
}
func (_PowerV0State__ReprAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"types.PowerV0State.Repr"}.BeginMap(0)
}
func (na *_PowerV0State__ReprAssembler) BeginList(int) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_PowerV0State{}
	}
	return na, nil
}
func (na *_PowerV0State__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"types.PowerV0State.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_PowerV0State__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"types.PowerV0State.Repr"}.AssignBool(false)
}
func (_PowerV0State__ReprAssembler) AssignInt(int) error {
	return mixins.ListAssembler{"types.PowerV0State.Repr"}.AssignInt(0)
}
func (_PowerV0State__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"types.PowerV0State.Repr"}.AssignFloat(0)
}
func (_PowerV0State__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"types.PowerV0State.Repr"}.AssignString("")
}
func (_PowerV0State__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"types.PowerV0State.Repr"}.AssignBytes(nil)
}
func (_PowerV0State__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"types.PowerV0State.Repr"}.AssignLink(nil)
}
func (na *_PowerV0State__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_PowerV0State); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_List {
		return ipld.ErrWrongKind{TypeName: "types.PowerV0State.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustList, ActualKind: v.ReprKind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_PowerV0State__ReprAssembler) Prototype() ipld.NodePrototype {
	return _PowerV0State__ReprPrototype{}
}
func (la *_PowerV0State__ReprAssembler) valueFinishTidy() bool {
	switch la.f {
	case 0:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 1:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 2:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 3:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 4:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 5:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 6:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 7:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 8:
		switch la.w.ThisEpochQAPowerSmoothed.m {
		case schema.Maybe_Value:
			la.w.ThisEpochQAPowerSmoothed.v = la.ca_ThisEpochQAPowerSmoothed.w
			la.state = laState_initial
			la.f++
			return true
		case schema.Maybe_Null:
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 9:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 10:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 11:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 12:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 13:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 14:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 15:
		switch la.w.ProofValidationBatch.m {
		case schema.Maybe_Value:
			la.w.ProofValidationBatch.v = la.ca_ProofValidationBatch.w
			la.state = laState_initial
			la.f++
			return true
		case schema.Maybe_Null:
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (la *_PowerV0State__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	if la.f >= 16 {
		return _ErrorThunkAssembler{schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(16)}}
	}
	la.state = laState_midValue
	switch la.f {
	case 0:
		la.ca_TotalRawBytePower.w = &la.w.TotalRawBytePower
		la.ca_TotalRawBytePower.m = &la.cm
		return &la.ca_TotalRawBytePower
	case 1:
		la.ca_TotalBytesCommitted.w = &la.w.TotalBytesCommitted
		la.ca_TotalBytesCommitted.m = &la.cm
		return &la.ca_TotalBytesCommitted
	case 2:
		la.ca_TotalQualityAdjPower.w = &la.w.TotalQualityAdjPower
		la.ca_TotalQualityAdjPower.m = &la.cm
		return &la.ca_TotalQualityAdjPower
	case 3:
		la.ca_TotalQABytesCommitted.w = &la.w.TotalQABytesCommitted
		la.ca_TotalQABytesCommitted.m = &la.cm
		return &la.ca_TotalQABytesCommitted
	case 4:
		la.ca_TotalPledgeCollateral.w = &la.w.TotalPledgeCollateral
		la.ca_TotalPledgeCollateral.m = &la.cm
		return &la.ca_TotalPledgeCollateral
	case 5:
		la.ca_ThisEpochRawBytePower.w = &la.w.ThisEpochRawBytePower
		la.ca_ThisEpochRawBytePower.m = &la.cm
		return &la.ca_ThisEpochRawBytePower
	case 6:
		la.ca_ThisEpochQualityAdjPower.w = &la.w.ThisEpochQualityAdjPower
		la.ca_ThisEpochQualityAdjPower.m = &la.cm
		return &la.ca_ThisEpochQualityAdjPower
	case 7:
		la.ca_ThisEpochPledgeCollateral.w = &la.w.ThisEpochPledgeCollateral
		la.ca_ThisEpochPledgeCollateral.m = &la.cm
		return &la.ca_ThisEpochPledgeCollateral
	case 8:
		la.ca_ThisEpochQAPowerSmoothed.w = la.w.ThisEpochQAPowerSmoothed.v
		la.ca_ThisEpochQAPowerSmoothed.m = &la.w.ThisEpochQAPowerSmoothed.m
		la.w.ThisEpochQAPowerSmoothed.m = allowNull
		return &la.ca_ThisEpochQAPowerSmoothed
	case 9:
		la.ca_MinerCount.w = &la.w.MinerCount
		la.ca_MinerCount.m = &la.cm
		return &la.ca_MinerCount
	case 10:
		la.ca_MinerAboveMinPowerCount.w = &la.w.MinerAboveMinPowerCount
		la.ca_MinerAboveMinPowerCount.m = &la.cm
		return &la.ca_MinerAboveMinPowerCount
	case 11:
		la.ca_CronEventQueue.w = &la.w.CronEventQueue
		la.ca_CronEventQueue.m = &la.cm
		return &la.ca_CronEventQueue
	case 12:
		la.ca_FirstCronEpoch.w = &la.w.FirstCronEpoch
		la.ca_FirstCronEpoch.m = &la.cm
		return &la.ca_FirstCronEpoch
	case 13:
		la.ca_LastProcessedCronEpoch.w = &la.w.LastProcessedCronEpoch
		la.ca_LastProcessedCronEpoch.m = &la.cm
		return &la.ca_LastProcessedCronEpoch
	case 14:
		la.ca_Claims.w = &la.w.Claims
		la.ca_Claims.m = &la.cm
		return &la.ca_Claims
	case 15:
		la.ca_ProofValidationBatch.w = la.w.ProofValidationBatch.v
		la.ca_ProofValidationBatch.m = &la.w.ProofValidationBatch.m
		la.w.ProofValidationBatch.m = allowNull
		return &la.ca_ProofValidationBatch
	default:
		panic("unreachable")
	}
}
func (la *_PowerV0State__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_PowerV0State__ReprAssembler) ValuePrototype(_ int) ipld.NodePrototype {
	panic("todo structbuilder tuplerepr valueprototype")
}
