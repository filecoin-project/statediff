package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _LotusMessageV2Params struct {
	tag uint
	x1 _MessageParamsInitExecParams
	x2 _MinerV0SectorPreCommitInfo
	x3 _MessageParamsMarketWithdrawBalance
	x4 _MessageParamsMarketPublishDeals
	x5 _MessageParamsMarketVerifyDeals
	x6 _MessageParamsMarketActivateDeals
	x7 _MessageParamsMarketTerminateDeals
	x8 _MessageParamsMarketComputeCommitment
	x9 _MessageParamsMinerConstructor
	x10 _MessageParamsMinerChangeAddress
	x11 _MessageParamsMinerChangeMultiaddrs
	x12 _MessageParamsMinerChangePeerID
	x13 _MessageParamsMinerSubmitWindowedPoSt
	x14 _MessageParamsMinerProveCommitSector
	x15 _MessageParamsMinerCheckSectorProven
	x16 _MessageParamsMinerConfirmSectorProofs
	x17 _MessageParamsMinerExtendSectorExpiration
	x18 _MessageParamsMinerTerminateSectors
	x19 _MessageParamsMinerDeclareFaults
	x20 _MessageParamsMinerDeclareFaultsRecovered
	x21 _MessageParamsMinerCompactPartitions
	x22 _MessageParamsMinerCompactSectorNumbers
	x23 _ApplyRewardParams
	x24 _MessageParamsMinerReportFault
	x25 _MessageParamsMinerWithdrawBalance
	x26 _MessageParamsMinerDeferredCron
	x27 _MessageParamsMultisigConstructor
	x28 _MessageParamsMultisigPropose
	x29 _MessageParamsMultisigTxnID
	x30 _MessageParamsMultisigAddSigner
	x31 _MessageParamsMultisigRemoveSigner
	x32 _MessageParamsMultisigSwapSigner
	x33 _MessageParamsMultisigChangeThreshold
	x34 _MessageParamsMultisigLockBalance
	x35 _MessageParamsPaychConstructor
	x36 _MessageParamsPaychUpdateChannelState
	x37 _MessageParamsPowerCreateMiner
	x38 _MessageParamsPowerUpdateClaimed
	x39 _MessageParamsPowerEnrollCron
	x40 _MessageParamsPowerCurrentTotal
	x41 _MessageParamsRewardAwardBlock
	x42 _MessageParamsVerifregAddVerifier
	x43 _MessageParamsVerifregUseBytes
}
type LotusMessageV2Params = *_LotusMessageV2Params

type _LotusMessageV2Params__iface interface {
	_LotusMessageV2Params__member()
}
func (_MessageParamsInitExecParams) _LotusMessageV2Params__member() {}
func (_MinerV0SectorPreCommitInfo) _LotusMessageV2Params__member() {}
func (_MessageParamsMarketWithdrawBalance) _LotusMessageV2Params__member() {}
func (_MessageParamsMarketPublishDeals) _LotusMessageV2Params__member() {}
func (_MessageParamsMarketVerifyDeals) _LotusMessageV2Params__member() {}
func (_MessageParamsMarketActivateDeals) _LotusMessageV2Params__member() {}
func (_MessageParamsMarketTerminateDeals) _LotusMessageV2Params__member() {}
func (_MessageParamsMarketComputeCommitment) _LotusMessageV2Params__member() {}
func (_MessageParamsMinerConstructor) _LotusMessageV2Params__member() {}
func (_MessageParamsMinerChangeAddress) _LotusMessageV2Params__member() {}
func (_MessageParamsMinerChangeMultiaddrs) _LotusMessageV2Params__member() {}
func (_MessageParamsMinerChangePeerID) _LotusMessageV2Params__member() {}
func (_MessageParamsMinerSubmitWindowedPoSt) _LotusMessageV2Params__member() {}
func (_MessageParamsMinerProveCommitSector) _LotusMessageV2Params__member() {}
func (_MessageParamsMinerCheckSectorProven) _LotusMessageV2Params__member() {}
func (_MessageParamsMinerConfirmSectorProofs) _LotusMessageV2Params__member() {}
func (_MessageParamsMinerExtendSectorExpiration) _LotusMessageV2Params__member() {}
func (_MessageParamsMinerTerminateSectors) _LotusMessageV2Params__member() {}
func (_MessageParamsMinerDeclareFaults) _LotusMessageV2Params__member() {}
func (_MessageParamsMinerDeclareFaultsRecovered) _LotusMessageV2Params__member() {}
func (_MessageParamsMinerCompactPartitions) _LotusMessageV2Params__member() {}
func (_MessageParamsMinerCompactSectorNumbers) _LotusMessageV2Params__member() {}
func (_ApplyRewardParams) _LotusMessageV2Params__member() {}
func (_MessageParamsMinerReportFault) _LotusMessageV2Params__member() {}
func (_MessageParamsMinerWithdrawBalance) _LotusMessageV2Params__member() {}
func (_MessageParamsMinerDeferredCron) _LotusMessageV2Params__member() {}
func (_MessageParamsMultisigConstructor) _LotusMessageV2Params__member() {}
func (_MessageParamsMultisigPropose) _LotusMessageV2Params__member() {}
func (_MessageParamsMultisigTxnID) _LotusMessageV2Params__member() {}
func (_MessageParamsMultisigAddSigner) _LotusMessageV2Params__member() {}
func (_MessageParamsMultisigRemoveSigner) _LotusMessageV2Params__member() {}
func (_MessageParamsMultisigSwapSigner) _LotusMessageV2Params__member() {}
func (_MessageParamsMultisigChangeThreshold) _LotusMessageV2Params__member() {}
func (_MessageParamsMultisigLockBalance) _LotusMessageV2Params__member() {}
func (_MessageParamsPaychConstructor) _LotusMessageV2Params__member() {}
func (_MessageParamsPaychUpdateChannelState) _LotusMessageV2Params__member() {}
func (_MessageParamsPowerCreateMiner) _LotusMessageV2Params__member() {}
func (_MessageParamsPowerUpdateClaimed) _LotusMessageV2Params__member() {}
func (_MessageParamsPowerEnrollCron) _LotusMessageV2Params__member() {}
func (_MessageParamsPowerCurrentTotal) _LotusMessageV2Params__member() {}
func (_MessageParamsRewardAwardBlock) _LotusMessageV2Params__member() {}
func (_MessageParamsVerifregAddVerifier) _LotusMessageV2Params__member() {}
func (_MessageParamsVerifregUseBytes) _LotusMessageV2Params__member() {}
func (n _LotusMessageV2Params) AsInterface() _LotusMessageV2Params__iface {
	switch n.tag {
	case 1:
		return &n.x1
	case 2:
		return &n.x2
	case 3:
		return &n.x3
	case 4:
		return &n.x4
	case 5:
		return &n.x5
	case 6:
		return &n.x6
	case 7:
		return &n.x7
	case 8:
		return &n.x8
	case 9:
		return &n.x9
	case 10:
		return &n.x10
	case 11:
		return &n.x11
	case 12:
		return &n.x12
	case 13:
		return &n.x13
	case 14:
		return &n.x14
	case 15:
		return &n.x15
	case 16:
		return &n.x16
	case 17:
		return &n.x17
	case 18:
		return &n.x18
	case 19:
		return &n.x19
	case 20:
		return &n.x20
	case 21:
		return &n.x21
	case 22:
		return &n.x22
	case 23:
		return &n.x23
	case 24:
		return &n.x24
	case 25:
		return &n.x25
	case 26:
		return &n.x26
	case 27:
		return &n.x27
	case 28:
		return &n.x28
	case 29:
		return &n.x29
	case 30:
		return &n.x30
	case 31:
		return &n.x31
	case 32:
		return &n.x32
	case 33:
		return &n.x33
	case 34:
		return &n.x34
	case 35:
		return &n.x35
	case 36:
		return &n.x36
	case 37:
		return &n.x37
	case 38:
		return &n.x38
	case 39:
		return &n.x39
	case 40:
		return &n.x40
	case 41:
		return &n.x41
	case 42:
		return &n.x42
	case 43:
		return &n.x43
	default:
		panic("invalid union state; how did you create this object?")
	}
}
type _LotusMessageV2Params__Maybe struct {
	m schema.Maybe
	v LotusMessageV2Params
}
type MaybeLotusMessageV2Params = *_LotusMessageV2Params__Maybe

func (m MaybeLotusMessageV2Params) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeLotusMessageV2Params) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeLotusMessageV2Params) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeLotusMessageV2Params) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeLotusMessageV2Params) Must() LotusMessageV2Params {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	memberName__LotusMessageV2Params_MessageParamsInitExecParams = _String{"MessageParamsInitExecParams"}
	memberName__LotusMessageV2Params_MinerV0SectorPreCommitInfo = _String{"MinerV0SectorPreCommitInfo"}
	memberName__LotusMessageV2Params_MessageParamsMarketWithdrawBalance = _String{"MessageParamsMarketWithdrawBalance"}
	memberName__LotusMessageV2Params_MessageParamsMarketPublishDeals = _String{"MessageParamsMarketPublishDeals"}
	memberName__LotusMessageV2Params_MessageParamsMarketVerifyDeals = _String{"MessageParamsMarketVerifyDeals"}
	memberName__LotusMessageV2Params_MessageParamsMarketActivateDeals = _String{"MessageParamsMarketActivateDeals"}
	memberName__LotusMessageV2Params_MessageParamsMarketTerminateDeals = _String{"MessageParamsMarketTerminateDeals"}
	memberName__LotusMessageV2Params_MessageParamsMarketComputeCommitment = _String{"MessageParamsMarketComputeCommitment"}
	memberName__LotusMessageV2Params_MessageParamsMinerConstructor = _String{"MessageParamsMinerConstructor"}
	memberName__LotusMessageV2Params_MessageParamsMinerChangeAddress = _String{"MessageParamsMinerChangeAddress"}
	memberName__LotusMessageV2Params_MessageParamsMinerChangeMultiaddrs = _String{"MessageParamsMinerChangeMultiaddrs"}
	memberName__LotusMessageV2Params_MessageParamsMinerChangePeerID = _String{"MessageParamsMinerChangePeerID"}
	memberName__LotusMessageV2Params_MessageParamsMinerSubmitWindowedPoSt = _String{"MessageParamsMinerSubmitWindowedPoSt"}
	memberName__LotusMessageV2Params_MessageParamsMinerProveCommitSector = _String{"MessageParamsMinerProveCommitSector"}
	memberName__LotusMessageV2Params_MessageParamsMinerCheckSectorProven = _String{"MessageParamsMinerCheckSectorProven"}
	memberName__LotusMessageV2Params_MessageParamsMinerConfirmSectorProofs = _String{"MessageParamsMinerConfirmSectorProofs"}
	memberName__LotusMessageV2Params_MessageParamsMinerExtendSectorExpiration = _String{"MessageParamsMinerExtendSectorExpiration"}
	memberName__LotusMessageV2Params_MessageParamsMinerTerminateSectors = _String{"MessageParamsMinerTerminateSectors"}
	memberName__LotusMessageV2Params_MessageParamsMinerDeclareFaults = _String{"MessageParamsMinerDeclareFaults"}
	memberName__LotusMessageV2Params_MessageParamsMinerDeclareFaultsRecovered = _String{"MessageParamsMinerDeclareFaultsRecovered"}
	memberName__LotusMessageV2Params_MessageParamsMinerCompactPartitions = _String{"MessageParamsMinerCompactPartitions"}
	memberName__LotusMessageV2Params_MessageParamsMinerCompactSectorNumbers = _String{"MessageParamsMinerCompactSectorNumbers"}
	memberName__LotusMessageV2Params_ApplyRewardParams = _String{"ApplyRewardParams"}
	memberName__LotusMessageV2Params_MessageParamsMinerReportFault = _String{"MessageParamsMinerReportFault"}
	memberName__LotusMessageV2Params_MessageParamsMinerWithdrawBalance = _String{"MessageParamsMinerWithdrawBalance"}
	memberName__LotusMessageV2Params_MessageParamsMinerDeferredCron = _String{"MessageParamsMinerDeferredCron"}
	memberName__LotusMessageV2Params_MessageParamsMultisigConstructor = _String{"MessageParamsMultisigConstructor"}
	memberName__LotusMessageV2Params_MessageParamsMultisigPropose = _String{"MessageParamsMultisigPropose"}
	memberName__LotusMessageV2Params_MessageParamsMultisigTxnID = _String{"MessageParamsMultisigTxnID"}
	memberName__LotusMessageV2Params_MessageParamsMultisigAddSigner = _String{"MessageParamsMultisigAddSigner"}
	memberName__LotusMessageV2Params_MessageParamsMultisigRemoveSigner = _String{"MessageParamsMultisigRemoveSigner"}
	memberName__LotusMessageV2Params_MessageParamsMultisigSwapSigner = _String{"MessageParamsMultisigSwapSigner"}
	memberName__LotusMessageV2Params_MessageParamsMultisigChangeThreshold = _String{"MessageParamsMultisigChangeThreshold"}
	memberName__LotusMessageV2Params_MessageParamsMultisigLockBalance = _String{"MessageParamsMultisigLockBalance"}
	memberName__LotusMessageV2Params_MessageParamsPaychConstructor = _String{"MessageParamsPaychConstructor"}
	memberName__LotusMessageV2Params_MessageParamsPaychUpdateChannelState = _String{"MessageParamsPaychUpdateChannelState"}
	memberName__LotusMessageV2Params_MessageParamsPowerCreateMiner = _String{"MessageParamsPowerCreateMiner"}
	memberName__LotusMessageV2Params_MessageParamsPowerUpdateClaimed = _String{"MessageParamsPowerUpdateClaimed"}
	memberName__LotusMessageV2Params_MessageParamsPowerEnrollCron = _String{"MessageParamsPowerEnrollCron"}
	memberName__LotusMessageV2Params_MessageParamsPowerCurrentTotal = _String{"MessageParamsPowerCurrentTotal"}
	memberName__LotusMessageV2Params_MessageParamsRewardAwardBlock = _String{"MessageParamsRewardAwardBlock"}
	memberName__LotusMessageV2Params_MessageParamsVerifregAddVerifier = _String{"MessageParamsVerifregAddVerifier"}
	memberName__LotusMessageV2Params_MessageParamsVerifregUseBytes = _String{"MessageParamsVerifregUseBytes"}
)
var _ ipld.Node = (LotusMessageV2Params)(&_LotusMessageV2Params{})
var _ schema.TypedNode = (LotusMessageV2Params)(&_LotusMessageV2Params{})
func (LotusMessageV2Params) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n LotusMessageV2Params) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "MessageParamsInitExecParams":
		if n.tag != 1 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x1, nil
	case "MinerV0SectorPreCommitInfo":
		if n.tag != 2 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x2, nil
	case "MessageParamsMarketWithdrawBalance":
		if n.tag != 3 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x3, nil
	case "MessageParamsMarketPublishDeals":
		if n.tag != 4 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x4, nil
	case "MessageParamsMarketVerifyDeals":
		if n.tag != 5 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x5, nil
	case "MessageParamsMarketActivateDeals":
		if n.tag != 6 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x6, nil
	case "MessageParamsMarketTerminateDeals":
		if n.tag != 7 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x7, nil
	case "MessageParamsMarketComputeCommitment":
		if n.tag != 8 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x8, nil
	case "MessageParamsMinerConstructor":
		if n.tag != 9 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x9, nil
	case "MessageParamsMinerChangeAddress":
		if n.tag != 10 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x10, nil
	case "MessageParamsMinerChangeMultiaddrs":
		if n.tag != 11 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x11, nil
	case "MessageParamsMinerChangePeerID":
		if n.tag != 12 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x12, nil
	case "MessageParamsMinerSubmitWindowedPoSt":
		if n.tag != 13 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x13, nil
	case "MessageParamsMinerProveCommitSector":
		if n.tag != 14 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x14, nil
	case "MessageParamsMinerCheckSectorProven":
		if n.tag != 15 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x15, nil
	case "MessageParamsMinerConfirmSectorProofs":
		if n.tag != 16 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x16, nil
	case "MessageParamsMinerExtendSectorExpiration":
		if n.tag != 17 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x17, nil
	case "MessageParamsMinerTerminateSectors":
		if n.tag != 18 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x18, nil
	case "MessageParamsMinerDeclareFaults":
		if n.tag != 19 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x19, nil
	case "MessageParamsMinerDeclareFaultsRecovered":
		if n.tag != 20 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x20, nil
	case "MessageParamsMinerCompactPartitions":
		if n.tag != 21 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x21, nil
	case "MessageParamsMinerCompactSectorNumbers":
		if n.tag != 22 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x22, nil
	case "ApplyRewardParams":
		if n.tag != 23 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x23, nil
	case "MessageParamsMinerReportFault":
		if n.tag != 24 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x24, nil
	case "MessageParamsMinerWithdrawBalance":
		if n.tag != 25 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x25, nil
	case "MessageParamsMinerDeferredCron":
		if n.tag != 26 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x26, nil
	case "MessageParamsMultisigConstructor":
		if n.tag != 27 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x27, nil
	case "MessageParamsMultisigPropose":
		if n.tag != 28 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x28, nil
	case "MessageParamsMultisigTxnID":
		if n.tag != 29 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x29, nil
	case "MessageParamsMultisigAddSigner":
		if n.tag != 30 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x30, nil
	case "MessageParamsMultisigRemoveSigner":
		if n.tag != 31 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x31, nil
	case "MessageParamsMultisigSwapSigner":
		if n.tag != 32 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x32, nil
	case "MessageParamsMultisigChangeThreshold":
		if n.tag != 33 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x33, nil
	case "MessageParamsMultisigLockBalance":
		if n.tag != 34 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x34, nil
	case "MessageParamsPaychConstructor":
		if n.tag != 35 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x35, nil
	case "MessageParamsPaychUpdateChannelState":
		if n.tag != 36 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x36, nil
	case "MessageParamsPowerCreateMiner":
		if n.tag != 37 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x37, nil
	case "MessageParamsPowerUpdateClaimed":
		if n.tag != 38 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x38, nil
	case "MessageParamsPowerEnrollCron":
		if n.tag != 39 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x39, nil
	case "MessageParamsPowerCurrentTotal":
		if n.tag != 40 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x40, nil
	case "MessageParamsRewardAwardBlock":
		if n.tag != 41 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x41, nil
	case "MessageParamsVerifregAddVerifier":
		if n.tag != 42 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x42, nil
	case "MessageParamsVerifregUseBytes":
		if n.tag != 43 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x43, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n LotusMessageV2Params) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (LotusMessageV2Params) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"types.LotusMessageV2Params"}.LookupByIndex(0)
}
func (n LotusMessageV2Params) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n LotusMessageV2Params) MapIterator() ipld.MapIterator {
	return &_LotusMessageV2Params__MapItr{n, false}
}

type _LotusMessageV2Params__MapItr struct {
	n LotusMessageV2Params
	done bool
}

func (itr *_LotusMessageV2Params__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.done {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.n.tag {
	case 1:
		k, v = &memberName__LotusMessageV2Params_MessageParamsInitExecParams, &itr.n.x1
	case 2:
		k, v = &memberName__LotusMessageV2Params_MinerV0SectorPreCommitInfo, &itr.n.x2
	case 3:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMarketWithdrawBalance, &itr.n.x3
	case 4:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMarketPublishDeals, &itr.n.x4
	case 5:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMarketVerifyDeals, &itr.n.x5
	case 6:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMarketActivateDeals, &itr.n.x6
	case 7:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMarketTerminateDeals, &itr.n.x7
	case 8:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMarketComputeCommitment, &itr.n.x8
	case 9:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMinerConstructor, &itr.n.x9
	case 10:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMinerChangeAddress, &itr.n.x10
	case 11:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMinerChangeMultiaddrs, &itr.n.x11
	case 12:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMinerChangePeerID, &itr.n.x12
	case 13:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMinerSubmitWindowedPoSt, &itr.n.x13
	case 14:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMinerProveCommitSector, &itr.n.x14
	case 15:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMinerCheckSectorProven, &itr.n.x15
	case 16:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMinerConfirmSectorProofs, &itr.n.x16
	case 17:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMinerExtendSectorExpiration, &itr.n.x17
	case 18:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMinerTerminateSectors, &itr.n.x18
	case 19:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMinerDeclareFaults, &itr.n.x19
	case 20:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMinerDeclareFaultsRecovered, &itr.n.x20
	case 21:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMinerCompactPartitions, &itr.n.x21
	case 22:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMinerCompactSectorNumbers, &itr.n.x22
	case 23:
		k, v = &memberName__LotusMessageV2Params_ApplyRewardParams, &itr.n.x23
	case 24:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMinerReportFault, &itr.n.x24
	case 25:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMinerWithdrawBalance, &itr.n.x25
	case 26:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMinerDeferredCron, &itr.n.x26
	case 27:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMultisigConstructor, &itr.n.x27
	case 28:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMultisigPropose, &itr.n.x28
	case 29:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMultisigTxnID, &itr.n.x29
	case 30:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMultisigAddSigner, &itr.n.x30
	case 31:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMultisigRemoveSigner, &itr.n.x31
	case 32:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMultisigSwapSigner, &itr.n.x32
	case 33:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMultisigChangeThreshold, &itr.n.x33
	case 34:
		k, v = &memberName__LotusMessageV2Params_MessageParamsMultisigLockBalance, &itr.n.x34
	case 35:
		k, v = &memberName__LotusMessageV2Params_MessageParamsPaychConstructor, &itr.n.x35
	case 36:
		k, v = &memberName__LotusMessageV2Params_MessageParamsPaychUpdateChannelState, &itr.n.x36
	case 37:
		k, v = &memberName__LotusMessageV2Params_MessageParamsPowerCreateMiner, &itr.n.x37
	case 38:
		k, v = &memberName__LotusMessageV2Params_MessageParamsPowerUpdateClaimed, &itr.n.x38
	case 39:
		k, v = &memberName__LotusMessageV2Params_MessageParamsPowerEnrollCron, &itr.n.x39
	case 40:
		k, v = &memberName__LotusMessageV2Params_MessageParamsPowerCurrentTotal, &itr.n.x40
	case 41:
		k, v = &memberName__LotusMessageV2Params_MessageParamsRewardAwardBlock, &itr.n.x41
	case 42:
		k, v = &memberName__LotusMessageV2Params_MessageParamsVerifregAddVerifier, &itr.n.x42
	case 43:
		k, v = &memberName__LotusMessageV2Params_MessageParamsVerifregUseBytes, &itr.n.x43
	default:
		panic("unreachable")
	}
	itr.done = true
	return
}
func (itr *_LotusMessageV2Params__MapItr) Done() bool {
	return itr.done
}

func (LotusMessageV2Params) ListIterator() ipld.ListIterator {
	return nil
}
func (LotusMessageV2Params) Length() int {
	return 1
}
func (LotusMessageV2Params) IsAbsent() bool {
	return false
}
func (LotusMessageV2Params) IsNull() bool {
	return false
}
func (LotusMessageV2Params) AsBool() (bool, error) {
	return mixins.Map{"types.LotusMessageV2Params"}.AsBool()
}
func (LotusMessageV2Params) AsInt() (int, error) {
	return mixins.Map{"types.LotusMessageV2Params"}.AsInt()
}
func (LotusMessageV2Params) AsFloat() (float64, error) {
	return mixins.Map{"types.LotusMessageV2Params"}.AsFloat()
}
func (LotusMessageV2Params) AsString() (string, error) {
	return mixins.Map{"types.LotusMessageV2Params"}.AsString()
}
func (LotusMessageV2Params) AsBytes() ([]byte, error) {
	return mixins.Map{"types.LotusMessageV2Params"}.AsBytes()
}
func (LotusMessageV2Params) AsLink() (ipld.Link, error) {
	return mixins.Map{"types.LotusMessageV2Params"}.AsLink()
}
func (LotusMessageV2Params) Prototype() ipld.NodePrototype {
	return _LotusMessageV2Params__Prototype{}
}
type _LotusMessageV2Params__Prototype struct{}

func (_LotusMessageV2Params__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _LotusMessageV2Params__Builder
	nb.Reset()
	return &nb
}
type _LotusMessageV2Params__Builder struct {
	_LotusMessageV2Params__Assembler
}
func (nb *_LotusMessageV2Params__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_LotusMessageV2Params__Builder) Reset() {
	var w _LotusMessageV2Params
	var m schema.Maybe
	*nb = _LotusMessageV2Params__Builder{_LotusMessageV2Params__Assembler{w: &w, m: &m}}
}
type _LotusMessageV2Params__Assembler struct {
	w *_LotusMessageV2Params
	m *schema.Maybe
	state maState

	cm schema.Maybe
	ca1 _MessageParamsInitExecParams__Assembler
	
	ca2 _MinerV0SectorPreCommitInfo__Assembler
	
	ca3 _MessageParamsMarketWithdrawBalance__Assembler
	
	ca4 _MessageParamsMarketPublishDeals__Assembler
	
	ca5 _MessageParamsMarketVerifyDeals__Assembler
	
	ca6 _MessageParamsMarketActivateDeals__Assembler
	
	ca7 _MessageParamsMarketTerminateDeals__Assembler
	
	ca8 _MessageParamsMarketComputeCommitment__Assembler
	
	ca9 _MessageParamsMinerConstructor__Assembler
	
	ca10 _MessageParamsMinerChangeAddress__Assembler
	
	ca11 _MessageParamsMinerChangeMultiaddrs__Assembler
	
	ca12 _MessageParamsMinerChangePeerID__Assembler
	
	ca13 _MessageParamsMinerSubmitWindowedPoSt__Assembler
	
	ca14 _MessageParamsMinerProveCommitSector__Assembler
	
	ca15 _MessageParamsMinerCheckSectorProven__Assembler
	
	ca16 _MessageParamsMinerConfirmSectorProofs__Assembler
	
	ca17 _MessageParamsMinerExtendSectorExpiration__Assembler
	
	ca18 _MessageParamsMinerTerminateSectors__Assembler
	
	ca19 _MessageParamsMinerDeclareFaults__Assembler
	
	ca20 _MessageParamsMinerDeclareFaultsRecovered__Assembler
	
	ca21 _MessageParamsMinerCompactPartitions__Assembler
	
	ca22 _MessageParamsMinerCompactSectorNumbers__Assembler
	
	ca23 _ApplyRewardParams__Assembler
	
	ca24 _MessageParamsMinerReportFault__Assembler
	
	ca25 _MessageParamsMinerWithdrawBalance__Assembler
	
	ca26 _MessageParamsMinerDeferredCron__Assembler
	
	ca27 _MessageParamsMultisigConstructor__Assembler
	
	ca28 _MessageParamsMultisigPropose__Assembler
	
	ca29 _MessageParamsMultisigTxnID__Assembler
	
	ca30 _MessageParamsMultisigAddSigner__Assembler
	
	ca31 _MessageParamsMultisigRemoveSigner__Assembler
	
	ca32 _MessageParamsMultisigSwapSigner__Assembler
	
	ca33 _MessageParamsMultisigChangeThreshold__Assembler
	
	ca34 _MessageParamsMultisigLockBalance__Assembler
	
	ca35 _MessageParamsPaychConstructor__Assembler
	
	ca36 _MessageParamsPaychUpdateChannelState__Assembler
	
	ca37 _MessageParamsPowerCreateMiner__Assembler
	
	ca38 _MessageParamsPowerUpdateClaimed__Assembler
	
	ca39 _MessageParamsPowerEnrollCron__Assembler
	
	ca40 _MessageParamsPowerCurrentTotal__Assembler
	
	ca41 _MessageParamsRewardAwardBlock__Assembler
	
	ca42 _MessageParamsVerifregAddVerifier__Assembler
	
	ca43 _MessageParamsVerifregUseBytes__Assembler
	ca uint
}
func (na *_LotusMessageV2Params__Assembler) reset() {
	na.state = maState_initial
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()
	
	case 2:
		na.ca2.reset()
	
	case 3:
		na.ca3.reset()
	
	case 4:
		na.ca4.reset()
	
	case 5:
		na.ca5.reset()
	
	case 6:
		na.ca6.reset()
	
	case 7:
		na.ca7.reset()
	
	case 8:
		na.ca8.reset()
	
	case 9:
		na.ca9.reset()
	
	case 10:
		na.ca10.reset()
	
	case 11:
		na.ca11.reset()
	
	case 12:
		na.ca12.reset()
	
	case 13:
		na.ca13.reset()
	
	case 14:
		na.ca14.reset()
	
	case 15:
		na.ca15.reset()
	
	case 16:
		na.ca16.reset()
	
	case 17:
		na.ca17.reset()
	
	case 18:
		na.ca18.reset()
	
	case 19:
		na.ca19.reset()
	
	case 20:
		na.ca20.reset()
	
	case 21:
		na.ca21.reset()
	
	case 22:
		na.ca22.reset()
	
	case 23:
		na.ca23.reset()
	
	case 24:
		na.ca24.reset()
	
	case 25:
		na.ca25.reset()
	
	case 26:
		na.ca26.reset()
	
	case 27:
		na.ca27.reset()
	
	case 28:
		na.ca28.reset()
	
	case 29:
		na.ca29.reset()
	
	case 30:
		na.ca30.reset()
	
	case 31:
		na.ca31.reset()
	
	case 32:
		na.ca32.reset()
	
	case 33:
		na.ca33.reset()
	
	case 34:
		na.ca34.reset()
	
	case 35:
		na.ca35.reset()
	
	case 36:
		na.ca36.reset()
	
	case 37:
		na.ca37.reset()
	
	case 38:
		na.ca38.reset()
	
	case 39:
		na.ca39.reset()
	
	case 40:
		na.ca40.reset()
	
	case 41:
		na.ca41.reset()
	
	case 42:
		na.ca42.reset()
	
	case 43:
		na.ca43.reset()
	default:
		panic("unreachable")
	}
	na.ca = 0
	na.cm = schema.Maybe_Absent
}
func (na *_LotusMessageV2Params__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	return na, nil
}
func (_LotusMessageV2Params__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"types.LotusMessageV2Params"}.BeginList(0)
}
func (na *_LotusMessageV2Params__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"types.LotusMessageV2Params"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_LotusMessageV2Params__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"types.LotusMessageV2Params"}.AssignBool(false)
}
func (_LotusMessageV2Params__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"types.LotusMessageV2Params"}.AssignInt(0)
}
func (_LotusMessageV2Params__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"types.LotusMessageV2Params"}.AssignFloat(0)
}
func (_LotusMessageV2Params__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"types.LotusMessageV2Params"}.AssignString("")
}
func (_LotusMessageV2Params__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"types.LotusMessageV2Params"}.AssignBytes(nil)
}
func (_LotusMessageV2Params__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"types.LotusMessageV2Params"}.AssignLink(nil)
}
func (na *_LotusMessageV2Params__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_LotusMessageV2Params); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "types.LotusMessageV2Params", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_LotusMessageV2Params__Assembler) Prototype() ipld.NodePrototype {
	return _LotusMessageV2Params__Prototype{}
}
func (ma *_LotusMessageV2Params__Assembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:ma.state = maState_initial
		return true
	default:
		return false
	}
}
func (ma *_LotusMessageV2Params__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly.
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	if ma.ca != 0 {
		return nil, schema.ErrNotUnionStructure{TypeName:"types.LotusMessageV2Params", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "MessageParamsInitExecParams":
		ma.state = maState_midValue
		ma.ca = 1
		ma.w.tag = 1
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1, nil
	case "MinerV0SectorPreCommitInfo":
		ma.state = maState_midValue
		ma.ca = 2
		ma.w.tag = 2
		ma.ca2.w = &ma.w.x2
		ma.ca2.m = &ma.cm
		return &ma.ca2, nil
	case "MessageParamsMarketWithdrawBalance":
		ma.state = maState_midValue
		ma.ca = 3
		ma.w.tag = 3
		ma.ca3.w = &ma.w.x3
		ma.ca3.m = &ma.cm
		return &ma.ca3, nil
	case "MessageParamsMarketPublishDeals":
		ma.state = maState_midValue
		ma.ca = 4
		ma.w.tag = 4
		ma.ca4.w = &ma.w.x4
		ma.ca4.m = &ma.cm
		return &ma.ca4, nil
	case "MessageParamsMarketVerifyDeals":
		ma.state = maState_midValue
		ma.ca = 5
		ma.w.tag = 5
		ma.ca5.w = &ma.w.x5
		ma.ca5.m = &ma.cm
		return &ma.ca5, nil
	case "MessageParamsMarketActivateDeals":
		ma.state = maState_midValue
		ma.ca = 6
		ma.w.tag = 6
		ma.ca6.w = &ma.w.x6
		ma.ca6.m = &ma.cm
		return &ma.ca6, nil
	case "MessageParamsMarketTerminateDeals":
		ma.state = maState_midValue
		ma.ca = 7
		ma.w.tag = 7
		ma.ca7.w = &ma.w.x7
		ma.ca7.m = &ma.cm
		return &ma.ca7, nil
	case "MessageParamsMarketComputeCommitment":
		ma.state = maState_midValue
		ma.ca = 8
		ma.w.tag = 8
		ma.ca8.w = &ma.w.x8
		ma.ca8.m = &ma.cm
		return &ma.ca8, nil
	case "MessageParamsMinerConstructor":
		ma.state = maState_midValue
		ma.ca = 9
		ma.w.tag = 9
		ma.ca9.w = &ma.w.x9
		ma.ca9.m = &ma.cm
		return &ma.ca9, nil
	case "MessageParamsMinerChangeAddress":
		ma.state = maState_midValue
		ma.ca = 10
		ma.w.tag = 10
		ma.ca10.w = &ma.w.x10
		ma.ca10.m = &ma.cm
		return &ma.ca10, nil
	case "MessageParamsMinerChangeMultiaddrs":
		ma.state = maState_midValue
		ma.ca = 11
		ma.w.tag = 11
		ma.ca11.w = &ma.w.x11
		ma.ca11.m = &ma.cm
		return &ma.ca11, nil
	case "MessageParamsMinerChangePeerID":
		ma.state = maState_midValue
		ma.ca = 12
		ma.w.tag = 12
		ma.ca12.w = &ma.w.x12
		ma.ca12.m = &ma.cm
		return &ma.ca12, nil
	case "MessageParamsMinerSubmitWindowedPoSt":
		ma.state = maState_midValue
		ma.ca = 13
		ma.w.tag = 13
		ma.ca13.w = &ma.w.x13
		ma.ca13.m = &ma.cm
		return &ma.ca13, nil
	case "MessageParamsMinerProveCommitSector":
		ma.state = maState_midValue
		ma.ca = 14
		ma.w.tag = 14
		ma.ca14.w = &ma.w.x14
		ma.ca14.m = &ma.cm
		return &ma.ca14, nil
	case "MessageParamsMinerCheckSectorProven":
		ma.state = maState_midValue
		ma.ca = 15
		ma.w.tag = 15
		ma.ca15.w = &ma.w.x15
		ma.ca15.m = &ma.cm
		return &ma.ca15, nil
	case "MessageParamsMinerConfirmSectorProofs":
		ma.state = maState_midValue
		ma.ca = 16
		ma.w.tag = 16
		ma.ca16.w = &ma.w.x16
		ma.ca16.m = &ma.cm
		return &ma.ca16, nil
	case "MessageParamsMinerExtendSectorExpiration":
		ma.state = maState_midValue
		ma.ca = 17
		ma.w.tag = 17
		ma.ca17.w = &ma.w.x17
		ma.ca17.m = &ma.cm
		return &ma.ca17, nil
	case "MessageParamsMinerTerminateSectors":
		ma.state = maState_midValue
		ma.ca = 18
		ma.w.tag = 18
		ma.ca18.w = &ma.w.x18
		ma.ca18.m = &ma.cm
		return &ma.ca18, nil
	case "MessageParamsMinerDeclareFaults":
		ma.state = maState_midValue
		ma.ca = 19
		ma.w.tag = 19
		ma.ca19.w = &ma.w.x19
		ma.ca19.m = &ma.cm
		return &ma.ca19, nil
	case "MessageParamsMinerDeclareFaultsRecovered":
		ma.state = maState_midValue
		ma.ca = 20
		ma.w.tag = 20
		ma.ca20.w = &ma.w.x20
		ma.ca20.m = &ma.cm
		return &ma.ca20, nil
	case "MessageParamsMinerCompactPartitions":
		ma.state = maState_midValue
		ma.ca = 21
		ma.w.tag = 21
		ma.ca21.w = &ma.w.x21
		ma.ca21.m = &ma.cm
		return &ma.ca21, nil
	case "MessageParamsMinerCompactSectorNumbers":
		ma.state = maState_midValue
		ma.ca = 22
		ma.w.tag = 22
		ma.ca22.w = &ma.w.x22
		ma.ca22.m = &ma.cm
		return &ma.ca22, nil
	case "ApplyRewardParams":
		ma.state = maState_midValue
		ma.ca = 23
		ma.w.tag = 23
		ma.ca23.w = &ma.w.x23
		ma.ca23.m = &ma.cm
		return &ma.ca23, nil
	case "MessageParamsMinerReportFault":
		ma.state = maState_midValue
		ma.ca = 24
		ma.w.tag = 24
		ma.ca24.w = &ma.w.x24
		ma.ca24.m = &ma.cm
		return &ma.ca24, nil
	case "MessageParamsMinerWithdrawBalance":
		ma.state = maState_midValue
		ma.ca = 25
		ma.w.tag = 25
		ma.ca25.w = &ma.w.x25
		ma.ca25.m = &ma.cm
		return &ma.ca25, nil
	case "MessageParamsMinerDeferredCron":
		ma.state = maState_midValue
		ma.ca = 26
		ma.w.tag = 26
		ma.ca26.w = &ma.w.x26
		ma.ca26.m = &ma.cm
		return &ma.ca26, nil
	case "MessageParamsMultisigConstructor":
		ma.state = maState_midValue
		ma.ca = 27
		ma.w.tag = 27
		ma.ca27.w = &ma.w.x27
		ma.ca27.m = &ma.cm
		return &ma.ca27, nil
	case "MessageParamsMultisigPropose":
		ma.state = maState_midValue
		ma.ca = 28
		ma.w.tag = 28
		ma.ca28.w = &ma.w.x28
		ma.ca28.m = &ma.cm
		return &ma.ca28, nil
	case "MessageParamsMultisigTxnID":
		ma.state = maState_midValue
		ma.ca = 29
		ma.w.tag = 29
		ma.ca29.w = &ma.w.x29
		ma.ca29.m = &ma.cm
		return &ma.ca29, nil
	case "MessageParamsMultisigAddSigner":
		ma.state = maState_midValue
		ma.ca = 30
		ma.w.tag = 30
		ma.ca30.w = &ma.w.x30
		ma.ca30.m = &ma.cm
		return &ma.ca30, nil
	case "MessageParamsMultisigRemoveSigner":
		ma.state = maState_midValue
		ma.ca = 31
		ma.w.tag = 31
		ma.ca31.w = &ma.w.x31
		ma.ca31.m = &ma.cm
		return &ma.ca31, nil
	case "MessageParamsMultisigSwapSigner":
		ma.state = maState_midValue
		ma.ca = 32
		ma.w.tag = 32
		ma.ca32.w = &ma.w.x32
		ma.ca32.m = &ma.cm
		return &ma.ca32, nil
	case "MessageParamsMultisigChangeThreshold":
		ma.state = maState_midValue
		ma.ca = 33
		ma.w.tag = 33
		ma.ca33.w = &ma.w.x33
		ma.ca33.m = &ma.cm
		return &ma.ca33, nil
	case "MessageParamsMultisigLockBalance":
		ma.state = maState_midValue
		ma.ca = 34
		ma.w.tag = 34
		ma.ca34.w = &ma.w.x34
		ma.ca34.m = &ma.cm
		return &ma.ca34, nil
	case "MessageParamsPaychConstructor":
		ma.state = maState_midValue
		ma.ca = 35
		ma.w.tag = 35
		ma.ca35.w = &ma.w.x35
		ma.ca35.m = &ma.cm
		return &ma.ca35, nil
	case "MessageParamsPaychUpdateChannelState":
		ma.state = maState_midValue
		ma.ca = 36
		ma.w.tag = 36
		ma.ca36.w = &ma.w.x36
		ma.ca36.m = &ma.cm
		return &ma.ca36, nil
	case "MessageParamsPowerCreateMiner":
		ma.state = maState_midValue
		ma.ca = 37
		ma.w.tag = 37
		ma.ca37.w = &ma.w.x37
		ma.ca37.m = &ma.cm
		return &ma.ca37, nil
	case "MessageParamsPowerUpdateClaimed":
		ma.state = maState_midValue
		ma.ca = 38
		ma.w.tag = 38
		ma.ca38.w = &ma.w.x38
		ma.ca38.m = &ma.cm
		return &ma.ca38, nil
	case "MessageParamsPowerEnrollCron":
		ma.state = maState_midValue
		ma.ca = 39
		ma.w.tag = 39
		ma.ca39.w = &ma.w.x39
		ma.ca39.m = &ma.cm
		return &ma.ca39, nil
	case "MessageParamsPowerCurrentTotal":
		ma.state = maState_midValue
		ma.ca = 40
		ma.w.tag = 40
		ma.ca40.w = &ma.w.x40
		ma.ca40.m = &ma.cm
		return &ma.ca40, nil
	case "MessageParamsRewardAwardBlock":
		ma.state = maState_midValue
		ma.ca = 41
		ma.w.tag = 41
		ma.ca41.w = &ma.w.x41
		ma.ca41.m = &ma.cm
		return &ma.ca41, nil
	case "MessageParamsVerifregAddVerifier":
		ma.state = maState_midValue
		ma.ca = 42
		ma.w.tag = 42
		ma.ca42.w = &ma.w.x42
		ma.ca42.m = &ma.cm
		return &ma.ca42, nil
	case "MessageParamsVerifregUseBytes":
		ma.state = maState_midValue
		ma.ca = 43
		ma.w.tag = 43
		ma.ca43.w = &ma.w.x43
		ma.ca43.m = &ma.cm
		return &ma.ca43, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"types.LotusMessageV2Params", Key:&_String{k}}
	}
}
func (ma *_LotusMessageV2Params__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly... or rather, the keyassembler will be.
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_LotusMessageV2Params__KeyAssembler)(ma)
}
func (ma *_LotusMessageV2Params__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.ca {
	case 0:
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1
	case 1:
		ma.ca2.w = &ma.w.x2
		ma.ca2.m = &ma.cm
		return &ma.ca2
	case 2:
		ma.ca3.w = &ma.w.x3
		ma.ca3.m = &ma.cm
		return &ma.ca3
	case 3:
		ma.ca4.w = &ma.w.x4
		ma.ca4.m = &ma.cm
		return &ma.ca4
	case 4:
		ma.ca5.w = &ma.w.x5
		ma.ca5.m = &ma.cm
		return &ma.ca5
	case 5:
		ma.ca6.w = &ma.w.x6
		ma.ca6.m = &ma.cm
		return &ma.ca6
	case 6:
		ma.ca7.w = &ma.w.x7
		ma.ca7.m = &ma.cm
		return &ma.ca7
	case 7:
		ma.ca8.w = &ma.w.x8
		ma.ca8.m = &ma.cm
		return &ma.ca8
	case 8:
		ma.ca9.w = &ma.w.x9
		ma.ca9.m = &ma.cm
		return &ma.ca9
	case 9:
		ma.ca10.w = &ma.w.x10
		ma.ca10.m = &ma.cm
		return &ma.ca10
	case 10:
		ma.ca11.w = &ma.w.x11
		ma.ca11.m = &ma.cm
		return &ma.ca11
	case 11:
		ma.ca12.w = &ma.w.x12
		ma.ca12.m = &ma.cm
		return &ma.ca12
	case 12:
		ma.ca13.w = &ma.w.x13
		ma.ca13.m = &ma.cm
		return &ma.ca13
	case 13:
		ma.ca14.w = &ma.w.x14
		ma.ca14.m = &ma.cm
		return &ma.ca14
	case 14:
		ma.ca15.w = &ma.w.x15
		ma.ca15.m = &ma.cm
		return &ma.ca15
	case 15:
		ma.ca16.w = &ma.w.x16
		ma.ca16.m = &ma.cm
		return &ma.ca16
	case 16:
		ma.ca17.w = &ma.w.x17
		ma.ca17.m = &ma.cm
		return &ma.ca17
	case 17:
		ma.ca18.w = &ma.w.x18
		ma.ca18.m = &ma.cm
		return &ma.ca18
	case 18:
		ma.ca19.w = &ma.w.x19
		ma.ca19.m = &ma.cm
		return &ma.ca19
	case 19:
		ma.ca20.w = &ma.w.x20
		ma.ca20.m = &ma.cm
		return &ma.ca20
	case 20:
		ma.ca21.w = &ma.w.x21
		ma.ca21.m = &ma.cm
		return &ma.ca21
	case 21:
		ma.ca22.w = &ma.w.x22
		ma.ca22.m = &ma.cm
		return &ma.ca22
	case 22:
		ma.ca23.w = &ma.w.x23
		ma.ca23.m = &ma.cm
		return &ma.ca23
	case 23:
		ma.ca24.w = &ma.w.x24
		ma.ca24.m = &ma.cm
		return &ma.ca24
	case 24:
		ma.ca25.w = &ma.w.x25
		ma.ca25.m = &ma.cm
		return &ma.ca25
	case 25:
		ma.ca26.w = &ma.w.x26
		ma.ca26.m = &ma.cm
		return &ma.ca26
	case 26:
		ma.ca27.w = &ma.w.x27
		ma.ca27.m = &ma.cm
		return &ma.ca27
	case 27:
		ma.ca28.w = &ma.w.x28
		ma.ca28.m = &ma.cm
		return &ma.ca28
	case 28:
		ma.ca29.w = &ma.w.x29
		ma.ca29.m = &ma.cm
		return &ma.ca29
	case 29:
		ma.ca30.w = &ma.w.x30
		ma.ca30.m = &ma.cm
		return &ma.ca30
	case 30:
		ma.ca31.w = &ma.w.x31
		ma.ca31.m = &ma.cm
		return &ma.ca31
	case 31:
		ma.ca32.w = &ma.w.x32
		ma.ca32.m = &ma.cm
		return &ma.ca32
	case 32:
		ma.ca33.w = &ma.w.x33
		ma.ca33.m = &ma.cm
		return &ma.ca33
	case 33:
		ma.ca34.w = &ma.w.x34
		ma.ca34.m = &ma.cm
		return &ma.ca34
	case 34:
		ma.ca35.w = &ma.w.x35
		ma.ca35.m = &ma.cm
		return &ma.ca35
	case 35:
		ma.ca36.w = &ma.w.x36
		ma.ca36.m = &ma.cm
		return &ma.ca36
	case 36:
		ma.ca37.w = &ma.w.x37
		ma.ca37.m = &ma.cm
		return &ma.ca37
	case 37:
		ma.ca38.w = &ma.w.x38
		ma.ca38.m = &ma.cm
		return &ma.ca38
	case 38:
		ma.ca39.w = &ma.w.x39
		ma.ca39.m = &ma.cm
		return &ma.ca39
	case 39:
		ma.ca40.w = &ma.w.x40
		ma.ca40.m = &ma.cm
		return &ma.ca40
	case 40:
		ma.ca41.w = &ma.w.x41
		ma.ca41.m = &ma.cm
		return &ma.ca41
	case 41:
		ma.ca42.w = &ma.w.x42
		ma.ca42.m = &ma.cm
		return &ma.ca42
	case 42:
		ma.ca43.w = &ma.w.x43
		ma.ca43.m = &ma.cm
		return &ma.ca43
	default:
		panic("unreachable")
	}
}
func (ma *_LotusMessageV2Params__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.ca == 0 {
		return schema.ErrNotUnionStructure{TypeName:"types.LotusMessageV2Params", Detail: "a union must have exactly one entry (not none)!"}
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_LotusMessageV2Params__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_LotusMessageV2Params__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	switch k {
	case "MessageParamsInitExecParams":
		return _MessageParamsInitExecParams__Prototype{}
	case "MinerV0SectorPreCommitInfo":
		return _MinerV0SectorPreCommitInfo__Prototype{}
	case "MessageParamsMarketWithdrawBalance":
		return _MessageParamsMarketWithdrawBalance__Prototype{}
	case "MessageParamsMarketPublishDeals":
		return _MessageParamsMarketPublishDeals__Prototype{}
	case "MessageParamsMarketVerifyDeals":
		return _MessageParamsMarketVerifyDeals__Prototype{}
	case "MessageParamsMarketActivateDeals":
		return _MessageParamsMarketActivateDeals__Prototype{}
	case "MessageParamsMarketTerminateDeals":
		return _MessageParamsMarketTerminateDeals__Prototype{}
	case "MessageParamsMarketComputeCommitment":
		return _MessageParamsMarketComputeCommitment__Prototype{}
	case "MessageParamsMinerConstructor":
		return _MessageParamsMinerConstructor__Prototype{}
	case "MessageParamsMinerChangeAddress":
		return _MessageParamsMinerChangeAddress__Prototype{}
	case "MessageParamsMinerChangeMultiaddrs":
		return _MessageParamsMinerChangeMultiaddrs__Prototype{}
	case "MessageParamsMinerChangePeerID":
		return _MessageParamsMinerChangePeerID__Prototype{}
	case "MessageParamsMinerSubmitWindowedPoSt":
		return _MessageParamsMinerSubmitWindowedPoSt__Prototype{}
	case "MessageParamsMinerProveCommitSector":
		return _MessageParamsMinerProveCommitSector__Prototype{}
	case "MessageParamsMinerCheckSectorProven":
		return _MessageParamsMinerCheckSectorProven__Prototype{}
	case "MessageParamsMinerConfirmSectorProofs":
		return _MessageParamsMinerConfirmSectorProofs__Prototype{}
	case "MessageParamsMinerExtendSectorExpiration":
		return _MessageParamsMinerExtendSectorExpiration__Prototype{}
	case "MessageParamsMinerTerminateSectors":
		return _MessageParamsMinerTerminateSectors__Prototype{}
	case "MessageParamsMinerDeclareFaults":
		return _MessageParamsMinerDeclareFaults__Prototype{}
	case "MessageParamsMinerDeclareFaultsRecovered":
		return _MessageParamsMinerDeclareFaultsRecovered__Prototype{}
	case "MessageParamsMinerCompactPartitions":
		return _MessageParamsMinerCompactPartitions__Prototype{}
	case "MessageParamsMinerCompactSectorNumbers":
		return _MessageParamsMinerCompactSectorNumbers__Prototype{}
	case "ApplyRewardParams":
		return _ApplyRewardParams__Prototype{}
	case "MessageParamsMinerReportFault":
		return _MessageParamsMinerReportFault__Prototype{}
	case "MessageParamsMinerWithdrawBalance":
		return _MessageParamsMinerWithdrawBalance__Prototype{}
	case "MessageParamsMinerDeferredCron":
		return _MessageParamsMinerDeferredCron__Prototype{}
	case "MessageParamsMultisigConstructor":
		return _MessageParamsMultisigConstructor__Prototype{}
	case "MessageParamsMultisigPropose":
		return _MessageParamsMultisigPropose__Prototype{}
	case "MessageParamsMultisigTxnID":
		return _MessageParamsMultisigTxnID__Prototype{}
	case "MessageParamsMultisigAddSigner":
		return _MessageParamsMultisigAddSigner__Prototype{}
	case "MessageParamsMultisigRemoveSigner":
		return _MessageParamsMultisigRemoveSigner__Prototype{}
	case "MessageParamsMultisigSwapSigner":
		return _MessageParamsMultisigSwapSigner__Prototype{}
	case "MessageParamsMultisigChangeThreshold":
		return _MessageParamsMultisigChangeThreshold__Prototype{}
	case "MessageParamsMultisigLockBalance":
		return _MessageParamsMultisigLockBalance__Prototype{}
	case "MessageParamsPaychConstructor":
		return _MessageParamsPaychConstructor__Prototype{}
	case "MessageParamsPaychUpdateChannelState":
		return _MessageParamsPaychUpdateChannelState__Prototype{}
	case "MessageParamsPowerCreateMiner":
		return _MessageParamsPowerCreateMiner__Prototype{}
	case "MessageParamsPowerUpdateClaimed":
		return _MessageParamsPowerUpdateClaimed__Prototype{}
	case "MessageParamsPowerEnrollCron":
		return _MessageParamsPowerEnrollCron__Prototype{}
	case "MessageParamsPowerCurrentTotal":
		return _MessageParamsPowerCurrentTotal__Prototype{}
	case "MessageParamsRewardAwardBlock":
		return _MessageParamsRewardAwardBlock__Prototype{}
	case "MessageParamsVerifregAddVerifier":
		return _MessageParamsVerifregAddVerifier__Prototype{}
	case "MessageParamsVerifregUseBytes":
		return _MessageParamsVerifregUseBytes__Prototype{}
	default:
		return nil
	}
}
type _LotusMessageV2Params__KeyAssembler _LotusMessageV2Params__Assembler
func (_LotusMessageV2Params__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"types.LotusMessageV2Params.KeyAssembler"}.BeginMap(0)
}
func (_LotusMessageV2Params__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"types.LotusMessageV2Params.KeyAssembler"}.BeginList(0)
}
func (na *_LotusMessageV2Params__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"types.LotusMessageV2Params.KeyAssembler"}.AssignNull()
}
func (_LotusMessageV2Params__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"types.LotusMessageV2Params.KeyAssembler"}.AssignBool(false)
}
func (_LotusMessageV2Params__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"types.LotusMessageV2Params.KeyAssembler"}.AssignInt(0)
}
func (_LotusMessageV2Params__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"types.LotusMessageV2Params.KeyAssembler"}.AssignFloat(0)
}
func (ka *_LotusMessageV2Params__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	if ka.ca != 0 {
		return schema.ErrNotUnionStructure{TypeName:"types.LotusMessageV2Params", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "MessageParamsInitExecParams":
		ka.ca = 1
		ka.w.tag = 1
		ka.state = maState_expectValue
		return nil
	case "MinerV0SectorPreCommitInfo":
		ka.ca = 2
		ka.w.tag = 2
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMarketWithdrawBalance":
		ka.ca = 3
		ka.w.tag = 3
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMarketPublishDeals":
		ka.ca = 4
		ka.w.tag = 4
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMarketVerifyDeals":
		ka.ca = 5
		ka.w.tag = 5
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMarketActivateDeals":
		ka.ca = 6
		ka.w.tag = 6
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMarketTerminateDeals":
		ka.ca = 7
		ka.w.tag = 7
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMarketComputeCommitment":
		ka.ca = 8
		ka.w.tag = 8
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMinerConstructor":
		ka.ca = 9
		ka.w.tag = 9
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMinerChangeAddress":
		ka.ca = 10
		ka.w.tag = 10
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMinerChangeMultiaddrs":
		ka.ca = 11
		ka.w.tag = 11
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMinerChangePeerID":
		ka.ca = 12
		ka.w.tag = 12
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMinerSubmitWindowedPoSt":
		ka.ca = 13
		ka.w.tag = 13
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMinerProveCommitSector":
		ka.ca = 14
		ka.w.tag = 14
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMinerCheckSectorProven":
		ka.ca = 15
		ka.w.tag = 15
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMinerConfirmSectorProofs":
		ka.ca = 16
		ka.w.tag = 16
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMinerExtendSectorExpiration":
		ka.ca = 17
		ka.w.tag = 17
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMinerTerminateSectors":
		ka.ca = 18
		ka.w.tag = 18
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMinerDeclareFaults":
		ka.ca = 19
		ka.w.tag = 19
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMinerDeclareFaultsRecovered":
		ka.ca = 20
		ka.w.tag = 20
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMinerCompactPartitions":
		ka.ca = 21
		ka.w.tag = 21
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMinerCompactSectorNumbers":
		ka.ca = 22
		ka.w.tag = 22
		ka.state = maState_expectValue
		return nil
	case "ApplyRewardParams":
		ka.ca = 23
		ka.w.tag = 23
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMinerReportFault":
		ka.ca = 24
		ka.w.tag = 24
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMinerWithdrawBalance":
		ka.ca = 25
		ka.w.tag = 25
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMinerDeferredCron":
		ka.ca = 26
		ka.w.tag = 26
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMultisigConstructor":
		ka.ca = 27
		ka.w.tag = 27
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMultisigPropose":
		ka.ca = 28
		ka.w.tag = 28
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMultisigTxnID":
		ka.ca = 29
		ka.w.tag = 29
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMultisigAddSigner":
		ka.ca = 30
		ka.w.tag = 30
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMultisigRemoveSigner":
		ka.ca = 31
		ka.w.tag = 31
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMultisigSwapSigner":
		ka.ca = 32
		ka.w.tag = 32
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMultisigChangeThreshold":
		ka.ca = 33
		ka.w.tag = 33
		ka.state = maState_expectValue
		return nil
	case "MessageParamsMultisigLockBalance":
		ka.ca = 34
		ka.w.tag = 34
		ka.state = maState_expectValue
		return nil
	case "MessageParamsPaychConstructor":
		ka.ca = 35
		ka.w.tag = 35
		ka.state = maState_expectValue
		return nil
	case "MessageParamsPaychUpdateChannelState":
		ka.ca = 36
		ka.w.tag = 36
		ka.state = maState_expectValue
		return nil
	case "MessageParamsPowerCreateMiner":
		ka.ca = 37
		ka.w.tag = 37
		ka.state = maState_expectValue
		return nil
	case "MessageParamsPowerUpdateClaimed":
		ka.ca = 38
		ka.w.tag = 38
		ka.state = maState_expectValue
		return nil
	case "MessageParamsPowerEnrollCron":
		ka.ca = 39
		ka.w.tag = 39
		ka.state = maState_expectValue
		return nil
	case "MessageParamsPowerCurrentTotal":
		ka.ca = 40
		ka.w.tag = 40
		ka.state = maState_expectValue
		return nil
	case "MessageParamsRewardAwardBlock":
		ka.ca = 41
		ka.w.tag = 41
		ka.state = maState_expectValue
		return nil
	case "MessageParamsVerifregAddVerifier":
		ka.ca = 42
		ka.w.tag = 42
		ka.state = maState_expectValue
		return nil
	case "MessageParamsVerifregUseBytes":
		ka.ca = 43
		ka.w.tag = 43
		ka.state = maState_expectValue
		return nil
	default:
		return ipld.ErrInvalidKey{TypeName:"types.LotusMessageV2Params", Key:&_String{k}} // TODO: error quality: ErrInvalidUnionDiscriminant ?
	}
	return nil
}
func (_LotusMessageV2Params__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"types.LotusMessageV2Params.KeyAssembler"}.AssignBytes(nil)
}
func (_LotusMessageV2Params__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"types.LotusMessageV2Params.KeyAssembler"}.AssignLink(nil)
}
func (ka *_LotusMessageV2Params__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_LotusMessageV2Params__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (LotusMessageV2Params) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n LotusMessageV2Params) Representation() ipld.Node {
	return (*_LotusMessageV2Params__Repr)(n)
}
type _LotusMessageV2Params__Repr _LotusMessageV2Params
var _ ipld.Node = &_LotusMessageV2Params__Repr{}
func (n *_LotusMessageV2Params__Repr) ReprKind() ipld.ReprKind {
	switch n.tag {
	case 1:
		return ipld.ReprKind_List
	case 2:
		return ipld.ReprKind_List
	case 3:
		return ipld.ReprKind_List
	case 4:
		return ipld.ReprKind_List
	case 5:
		return ipld.ReprKind_List
	case 6:
		return ipld.ReprKind_List
	case 7:
		return ipld.ReprKind_List
	case 8:
		return ipld.ReprKind_List
	case 9:
		return ipld.ReprKind_List
	case 10:
		return ipld.ReprKind_List
	case 11:
		return ipld.ReprKind_List
	case 12:
		return ipld.ReprKind_List
	case 13:
		return ipld.ReprKind_List
	case 14:
		return ipld.ReprKind_List
	case 15:
		return ipld.ReprKind_List
	case 16:
		return ipld.ReprKind_List
	case 17:
		return ipld.ReprKind_List
	case 18:
		return ipld.ReprKind_List
	case 19:
		return ipld.ReprKind_List
	case 20:
		return ipld.ReprKind_List
	case 21:
		return ipld.ReprKind_List
	case 22:
		return ipld.ReprKind_List
	case 23:
		return ipld.ReprKind_List
	case 24:
		return ipld.ReprKind_List
	case 25:
		return ipld.ReprKind_List
	case 26:
		return ipld.ReprKind_List
	case 27:
		return ipld.ReprKind_List
	case 28:
		return ipld.ReprKind_List
	case 29:
		return ipld.ReprKind_List
	case 30:
		return ipld.ReprKind_List
	case 31:
		return ipld.ReprKind_List
	case 32:
		return ipld.ReprKind_List
	case 33:
		return ipld.ReprKind_List
	case 34:
		return ipld.ReprKind_List
	case 35:
		return ipld.ReprKind_List
	case 36:
		return ipld.ReprKind_List
	case 37:
		return ipld.ReprKind_List
	case 38:
		return ipld.ReprKind_List
	case 39:
		return ipld.ReprKind_List
	case 40:
		return ipld.ReprKind_List
	case 41:
		return ipld.ReprKind_List
	case 42:
		return ipld.ReprKind_List
	case 43:
		return ipld.ReprKind_List
	default:
		panic("unreachable")
	}
}
func (n *_LotusMessageV2Params__Repr) LookupByString(key string) (ipld.Node, error) {
		return nil, ipld.ErrWrongKind{TypeName: "types.LotusMessageV2Params.Repr", MethodName: "LookupByString", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: n.ReprKind()}
}
func (n *_LotusMessageV2Params__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
		return nil, ipld.ErrWrongKind{TypeName: "types.LotusMessageV2Params.Repr", MethodName: "LookupByNode", AppropriateKind: ipld.ReprKindSet_Recursive, ActualKind: n.ReprKind()}
}
func (n *_LotusMessageV2Params__Repr) LookupByIndex(idx int) (ipld.Node, error) {
		return nil, ipld.ErrWrongKind{TypeName: "types.LotusMessageV2Params.Repr", MethodName: "LookupByIndex", AppropriateKind: ipld.ReprKindSet_JustList, ActualKind: n.ReprKind()}
}
func (n *_LotusMessageV2Params__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
		return nil, ipld.ErrWrongKind{TypeName: "types.LotusMessageV2Params.Repr", MethodName: "LookupBySegment", AppropriateKind: ipld.ReprKindSet_Recursive, ActualKind: n.ReprKind()}
}
func (n *_LotusMessageV2Params__Repr) MapIterator() ipld.MapIterator {
		return nil
}
func (n *_LotusMessageV2Params__Repr) ListIterator() ipld.ListIterator {
		return nil
}
func (n *_LotusMessageV2Params__Repr) Length() int {
		return -1
}
func (n *_LotusMessageV2Params__Repr) IsAbsent() bool {
	return false
}
func (n *_LotusMessageV2Params__Repr) IsNull() bool {
	return false
}
func (n *_LotusMessageV2Params__Repr) AsBool() (bool, error) {
		return false, ipld.ErrWrongKind{TypeName: "types.LotusMessageV2Params.Repr", MethodName: "AsBool", AppropriateKind: ipld.ReprKindSet_JustBool, ActualKind: n.ReprKind()}
}
func (n *_LotusMessageV2Params__Repr) AsInt() (int, error) {
		return 0, ipld.ErrWrongKind{TypeName: "types.LotusMessageV2Params.Repr", MethodName: "AsInt", AppropriateKind: ipld.ReprKindSet_JustInt, ActualKind: n.ReprKind()}
}
func (n *_LotusMessageV2Params__Repr) AsFloat() (float64, error) {
		return 0, ipld.ErrWrongKind{TypeName: "types.LotusMessageV2Params.Repr", MethodName: "AsFloat", AppropriateKind: ipld.ReprKindSet_JustFloat, ActualKind: n.ReprKind()}
}
func (n *_LotusMessageV2Params__Repr) AsString() (string, error) {
		return "", ipld.ErrWrongKind{TypeName: "types.LotusMessageV2Params.Repr", MethodName: "AsString", AppropriateKind: ipld.ReprKindSet_JustString, ActualKind: n.ReprKind()}
}
func (n *_LotusMessageV2Params__Repr) AsBytes() ([]byte, error) {
		return nil, ipld.ErrWrongKind{TypeName: "types.LotusMessageV2Params.Repr", MethodName: "AsBytes", AppropriateKind: ipld.ReprKindSet_JustBytes, ActualKind: n.ReprKind()}
}
func (n *_LotusMessageV2Params__Repr) AsLink() (ipld.Link, error) {
		return nil, ipld.ErrWrongKind{TypeName: "types.LotusMessageV2Params.Repr", MethodName: "AsLink", AppropriateKind: ipld.ReprKindSet_JustLink, ActualKind: n.ReprKind()}
}
func (_LotusMessageV2Params__Repr) Prototype() ipld.NodePrototype {
	return _LotusMessageV2Params__ReprPrototype{}
}
type _LotusMessageV2Params__ReprPrototype struct{}

func (_LotusMessageV2Params__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _LotusMessageV2Params__ReprBuilder
	nb.Reset()
	return &nb
}
type _LotusMessageV2Params__ReprBuilder struct {
	_LotusMessageV2Params__ReprAssembler
}
func (nb *_LotusMessageV2Params__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_LotusMessageV2Params__ReprBuilder) Reset() {
	var w _LotusMessageV2Params
	var m schema.Maybe
	*nb = _LotusMessageV2Params__ReprBuilder{_LotusMessageV2Params__ReprAssembler{w: &w, m: &m}}
}
type _LotusMessageV2Params__ReprAssembler struct {
	w *_LotusMessageV2Params
	m *schema.Maybe
	ca1 _MessageParamsInitExecParams__ReprAssembler
	ca2 _MinerV0SectorPreCommitInfo__ReprAssembler
	ca3 _MessageParamsMarketWithdrawBalance__ReprAssembler
	ca4 _MessageParamsMarketPublishDeals__ReprAssembler
	ca5 _MessageParamsMarketVerifyDeals__ReprAssembler
	ca6 _MessageParamsMarketActivateDeals__ReprAssembler
	ca7 _MessageParamsMarketTerminateDeals__ReprAssembler
	ca8 _MessageParamsMarketComputeCommitment__ReprAssembler
	ca9 _MessageParamsMinerConstructor__ReprAssembler
	ca10 _MessageParamsMinerChangeAddress__ReprAssembler
	ca11 _MessageParamsMinerChangeMultiaddrs__ReprAssembler
	ca12 _MessageParamsMinerChangePeerID__ReprAssembler
	ca13 _MessageParamsMinerSubmitWindowedPoSt__ReprAssembler
	ca14 _MessageParamsMinerProveCommitSector__ReprAssembler
	ca15 _MessageParamsMinerCheckSectorProven__ReprAssembler
	ca16 _MessageParamsMinerConfirmSectorProofs__ReprAssembler
	ca17 _MessageParamsMinerExtendSectorExpiration__ReprAssembler
	ca18 _MessageParamsMinerTerminateSectors__ReprAssembler
	ca19 _MessageParamsMinerDeclareFaults__ReprAssembler
	ca20 _MessageParamsMinerDeclareFaultsRecovered__ReprAssembler
	ca21 _MessageParamsMinerCompactPartitions__ReprAssembler
	ca22 _MessageParamsMinerCompactSectorNumbers__ReprAssembler
	ca23 _ApplyRewardParams__ReprAssembler
	ca24 _MessageParamsMinerReportFault__ReprAssembler
	ca25 _MessageParamsMinerWithdrawBalance__ReprAssembler
	ca26 _MessageParamsMinerDeferredCron__ReprAssembler
	ca27 _MessageParamsMultisigConstructor__ReprAssembler
	ca28 _MessageParamsMultisigPropose__ReprAssembler
	ca29 _MessageParamsMultisigTxnID__ReprAssembler
	ca30 _MessageParamsMultisigAddSigner__ReprAssembler
	ca31 _MessageParamsMultisigRemoveSigner__ReprAssembler
	ca32 _MessageParamsMultisigSwapSigner__ReprAssembler
	ca33 _MessageParamsMultisigChangeThreshold__ReprAssembler
	ca34 _MessageParamsMultisigLockBalance__ReprAssembler
	ca35 _MessageParamsPaychConstructor__ReprAssembler
	ca36 _MessageParamsPaychUpdateChannelState__ReprAssembler
	ca37 _MessageParamsPowerCreateMiner__ReprAssembler
	ca38 _MessageParamsPowerUpdateClaimed__ReprAssembler
	ca39 _MessageParamsPowerEnrollCron__ReprAssembler
	ca40 _MessageParamsPowerCurrentTotal__ReprAssembler
	ca41 _MessageParamsRewardAwardBlock__ReprAssembler
	ca42 _MessageParamsVerifregAddVerifier__ReprAssembler
	ca43 _MessageParamsVerifregUseBytes__ReprAssembler
	ca uint
}
func (na *_LotusMessageV2Params__ReprAssembler) reset() {
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()
	case 2:
		na.ca2.reset()
	case 3:
		na.ca3.reset()
	case 4:
		na.ca4.reset()
	case 5:
		na.ca5.reset()
	case 6:
		na.ca6.reset()
	case 7:
		na.ca7.reset()
	case 8:
		na.ca8.reset()
	case 9:
		na.ca9.reset()
	case 10:
		na.ca10.reset()
	case 11:
		na.ca11.reset()
	case 12:
		na.ca12.reset()
	case 13:
		na.ca13.reset()
	case 14:
		na.ca14.reset()
	case 15:
		na.ca15.reset()
	case 16:
		na.ca16.reset()
	case 17:
		na.ca17.reset()
	case 18:
		na.ca18.reset()
	case 19:
		na.ca19.reset()
	case 20:
		na.ca20.reset()
	case 21:
		na.ca21.reset()
	case 22:
		na.ca22.reset()
	case 23:
		na.ca23.reset()
	case 24:
		na.ca24.reset()
	case 25:
		na.ca25.reset()
	case 26:
		na.ca26.reset()
	case 27:
		na.ca27.reset()
	case 28:
		na.ca28.reset()
	case 29:
		na.ca29.reset()
	case 30:
		na.ca30.reset()
	case 31:
		na.ca31.reset()
	case 32:
		na.ca32.reset()
	case 33:
		na.ca33.reset()
	case 34:
		na.ca34.reset()
	case 35:
		na.ca35.reset()
	case 36:
		na.ca36.reset()
	case 37:
		na.ca37.reset()
	case 38:
		na.ca38.reset()
	case 39:
		na.ca39.reset()
	case 40:
		na.ca40.reset()
	case 41:
		na.ca41.reset()
	case 42:
		na.ca42.reset()
	case 43:
		na.ca43.reset()
	default:
		panic("unreachable")
	}
	na.ca = 0
}
func (na *_LotusMessageV2Params__ReprAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	return nil, schema.ErrNotUnionStructure{TypeName: "types.LotusMessageV2Params.Repr", Detail: "BeginMap called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_LotusMessageV2Params__ReprAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 1
	na.w.tag = 1
	na.ca1.w = &na.w.x1
	na.ca1.m = na.m
	return na.ca1.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 2
	na.w.tag = 2
	na.ca2.w = &na.w.x2
	na.ca2.m = na.m
	return na.ca2.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 3
	na.w.tag = 3
	na.ca3.w = &na.w.x3
	na.ca3.m = na.m
	return na.ca3.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 4
	na.w.tag = 4
	na.ca4.w = &na.w.x4
	na.ca4.m = na.m
	return na.ca4.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 5
	na.w.tag = 5
	na.ca5.w = &na.w.x5
	na.ca5.m = na.m
	return na.ca5.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 6
	na.w.tag = 6
	na.ca6.w = &na.w.x6
	na.ca6.m = na.m
	return na.ca6.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 7
	na.w.tag = 7
	na.ca7.w = &na.w.x7
	na.ca7.m = na.m
	return na.ca7.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 8
	na.w.tag = 8
	na.ca8.w = &na.w.x8
	na.ca8.m = na.m
	return na.ca8.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 9
	na.w.tag = 9
	na.ca9.w = &na.w.x9
	na.ca9.m = na.m
	return na.ca9.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 10
	na.w.tag = 10
	na.ca10.w = &na.w.x10
	na.ca10.m = na.m
	return na.ca10.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 11
	na.w.tag = 11
	na.ca11.w = &na.w.x11
	na.ca11.m = na.m
	return na.ca11.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 12
	na.w.tag = 12
	na.ca12.w = &na.w.x12
	na.ca12.m = na.m
	return na.ca12.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 13
	na.w.tag = 13
	na.ca13.w = &na.w.x13
	na.ca13.m = na.m
	return na.ca13.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 14
	na.w.tag = 14
	na.ca14.w = &na.w.x14
	na.ca14.m = na.m
	return na.ca14.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 15
	na.w.tag = 15
	na.ca15.w = &na.w.x15
	na.ca15.m = na.m
	return na.ca15.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 16
	na.w.tag = 16
	na.ca16.w = &na.w.x16
	na.ca16.m = na.m
	return na.ca16.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 17
	na.w.tag = 17
	na.ca17.w = &na.w.x17
	na.ca17.m = na.m
	return na.ca17.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 18
	na.w.tag = 18
	na.ca18.w = &na.w.x18
	na.ca18.m = na.m
	return na.ca18.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 19
	na.w.tag = 19
	na.ca19.w = &na.w.x19
	na.ca19.m = na.m
	return na.ca19.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 20
	na.w.tag = 20
	na.ca20.w = &na.w.x20
	na.ca20.m = na.m
	return na.ca20.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 21
	na.w.tag = 21
	na.ca21.w = &na.w.x21
	na.ca21.m = na.m
	return na.ca21.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 22
	na.w.tag = 22
	na.ca22.w = &na.w.x22
	na.ca22.m = na.m
	return na.ca22.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 23
	na.w.tag = 23
	na.ca23.w = &na.w.x23
	na.ca23.m = na.m
	return na.ca23.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 24
	na.w.tag = 24
	na.ca24.w = &na.w.x24
	na.ca24.m = na.m
	return na.ca24.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 25
	na.w.tag = 25
	na.ca25.w = &na.w.x25
	na.ca25.m = na.m
	return na.ca25.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 26
	na.w.tag = 26
	na.ca26.w = &na.w.x26
	na.ca26.m = na.m
	return na.ca26.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 27
	na.w.tag = 27
	na.ca27.w = &na.w.x27
	na.ca27.m = na.m
	return na.ca27.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 28
	na.w.tag = 28
	na.ca28.w = &na.w.x28
	na.ca28.m = na.m
	return na.ca28.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 29
	na.w.tag = 29
	na.ca29.w = &na.w.x29
	na.ca29.m = na.m
	return na.ca29.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 30
	na.w.tag = 30
	na.ca30.w = &na.w.x30
	na.ca30.m = na.m
	return na.ca30.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 31
	na.w.tag = 31
	na.ca31.w = &na.w.x31
	na.ca31.m = na.m
	return na.ca31.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 32
	na.w.tag = 32
	na.ca32.w = &na.w.x32
	na.ca32.m = na.m
	return na.ca32.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 33
	na.w.tag = 33
	na.ca33.w = &na.w.x33
	na.ca33.m = na.m
	return na.ca33.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 34
	na.w.tag = 34
	na.ca34.w = &na.w.x34
	na.ca34.m = na.m
	return na.ca34.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 35
	na.w.tag = 35
	na.ca35.w = &na.w.x35
	na.ca35.m = na.m
	return na.ca35.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 36
	na.w.tag = 36
	na.ca36.w = &na.w.x36
	na.ca36.m = na.m
	return na.ca36.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 37
	na.w.tag = 37
	na.ca37.w = &na.w.x37
	na.ca37.m = na.m
	return na.ca37.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 38
	na.w.tag = 38
	na.ca38.w = &na.w.x38
	na.ca38.m = na.m
	return na.ca38.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 39
	na.w.tag = 39
	na.ca39.w = &na.w.x39
	na.ca39.m = na.m
	return na.ca39.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 40
	na.w.tag = 40
	na.ca40.w = &na.w.x40
	na.ca40.m = na.m
	return na.ca40.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 41
	na.w.tag = 41
	na.ca41.w = &na.w.x41
	na.ca41.m = na.m
	return na.ca41.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 42
	na.w.tag = 42
	na.ca42.w = &na.w.x42
	na.ca42.m = na.m
	return na.ca42.BeginList(sizeHint)
	if na.w == nil {
		na.w = &_LotusMessageV2Params{}
	}
	na.ca = 43
	na.w.tag = 43
	na.ca43.w = &na.w.x43
	na.ca43.m = na.m
	return na.ca43.BeginList(sizeHint)
	return nil, schema.ErrNotUnionStructure{TypeName: "types.LotusMessageV2Params.Repr", Detail: "BeginList called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_LotusMessageV2Params__ReprAssembler) AssignNull() error  {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	return  schema.ErrNotUnionStructure{TypeName: "types.LotusMessageV2Params.Repr", Detail: "AssignNull called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_LotusMessageV2Params__ReprAssembler) AssignBool(v bool) error  {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	return  schema.ErrNotUnionStructure{TypeName: "types.LotusMessageV2Params.Repr", Detail: "AssignBool called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_LotusMessageV2Params__ReprAssembler) AssignInt(v int) error  {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	return  schema.ErrNotUnionStructure{TypeName: "types.LotusMessageV2Params.Repr", Detail: "AssignInt called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_LotusMessageV2Params__ReprAssembler) AssignFloat(v float64) error  {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	return  schema.ErrNotUnionStructure{TypeName: "types.LotusMessageV2Params.Repr", Detail: "AssignFloat called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_LotusMessageV2Params__ReprAssembler) AssignString(v string) error  {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	return  schema.ErrNotUnionStructure{TypeName: "types.LotusMessageV2Params.Repr", Detail: "AssignString called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_LotusMessageV2Params__ReprAssembler) AssignBytes(v []byte) error  {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	return  schema.ErrNotUnionStructure{TypeName: "types.LotusMessageV2Params.Repr", Detail: "AssignBytes called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_LotusMessageV2Params__ReprAssembler) AssignLink(v ipld.Link) error  {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	return  schema.ErrNotUnionStructure{TypeName: "types.LotusMessageV2Params.Repr", Detail: "AssignLink called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_LotusMessageV2Params__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_LotusMessageV2Params); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	switch v.ReprKind() {
	case ipld.ReprKind_Bool:
		v2, _ := v.AsBool()
		return na.AssignBool(v2)
	case ipld.ReprKind_Int:
		v2, _ := v.AsInt()
		return na.AssignInt(v2)
	case ipld.ReprKind_Float:
		v2, _ := v.AsFloat()
		return na.AssignFloat(v2)
	case ipld.ReprKind_String:
		v2, _ := v.AsString()
		return na.AssignString(v2)
	case ipld.ReprKind_Bytes:
		v2, _ := v.AsBytes()
		return na.AssignBytes(v2)
	case ipld.ReprKind_Map:
		na, err := na.BeginMap(v.Length())
		if err != nil {
			return err
		}
		itr := v.MapIterator()
		for !itr.Done() {
			k, v, err := itr.Next()
			if err != nil {
				return err
			}
			if err := na.AssembleKey().AssignNode(k); err != nil {
				return err
			}
			if err := na.AssembleValue().AssignNode(v); err != nil {
				return err
			}
		}
		return na.Finish()
	case ipld.ReprKind_List:
		na, err := na.BeginList(v.Length())
		if err != nil {
			return err
		}
		itr := v.ListIterator()
		for !itr.Done() {
			_, v, err := itr.Next()
			if err != nil {
				return err
			}
			if err := na.AssembleValue().AssignNode(v); err != nil {
				return err
			}
		}
		return na.Finish()
	case ipld.ReprKind_Link:
		v2, _ := v.AsLink()
		return na.AssignLink(v2)
	default:
		panic("unreachable")
	}
}
func (na *_LotusMessageV2Params__ReprAssembler) Prototype() ipld.NodePrototype {
	return _LotusMessageV2Params__ReprPrototype{}
}
