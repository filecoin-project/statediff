package types

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _MultisigV0State struct {
	Signers _List__Address
	NumApprovalsThreshold _Int
	NextTxnID _Int
	InitialBalance _BigInt
	StartEpoch _ChainEpoch
	UnlockDuration _ChainEpoch
	PendingTxns _Link__MultisigV0Transaction
}
type MultisigV0State = *_MultisigV0State

func (n _MultisigV0State) FieldSigners()	List__Address {
	return &n.Signers
}
func (n _MultisigV0State) FieldNumApprovalsThreshold()	Int {
	return &n.NumApprovalsThreshold
}
func (n _MultisigV0State) FieldNextTxnID()	Int {
	return &n.NextTxnID
}
func (n _MultisigV0State) FieldInitialBalance()	BigInt {
	return &n.InitialBalance
}
func (n _MultisigV0State) FieldStartEpoch()	ChainEpoch {
	return &n.StartEpoch
}
func (n _MultisigV0State) FieldUnlockDuration()	ChainEpoch {
	return &n.UnlockDuration
}
func (n _MultisigV0State) FieldPendingTxns()	Link__MultisigV0Transaction {
	return &n.PendingTxns
}
type _MultisigV0State__Maybe struct {
	m schema.Maybe
	v MultisigV0State
}
type MaybeMultisigV0State = *_MultisigV0State__Maybe

func (m MaybeMultisigV0State) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeMultisigV0State) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeMultisigV0State) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeMultisigV0State) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeMultisigV0State) Must() MultisigV0State {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__MultisigV0State_Signers = _String{"Signers"}
	fieldName__MultisigV0State_NumApprovalsThreshold = _String{"NumApprovalsThreshold"}
	fieldName__MultisigV0State_NextTxnID = _String{"NextTxnID"}
	fieldName__MultisigV0State_InitialBalance = _String{"InitialBalance"}
	fieldName__MultisigV0State_StartEpoch = _String{"StartEpoch"}
	fieldName__MultisigV0State_UnlockDuration = _String{"UnlockDuration"}
	fieldName__MultisigV0State_PendingTxns = _String{"PendingTxns"}
)
var _ ipld.Node = (MultisigV0State)(&_MultisigV0State{})
var _ schema.TypedNode = (MultisigV0State)(&_MultisigV0State{})
func (MultisigV0State) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n MultisigV0State) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Signers":
		return &n.Signers, nil
	case "NumApprovalsThreshold":
		return &n.NumApprovalsThreshold, nil
	case "NextTxnID":
		return &n.NextTxnID, nil
	case "InitialBalance":
		return &n.InitialBalance, nil
	case "StartEpoch":
		return &n.StartEpoch, nil
	case "UnlockDuration":
		return &n.UnlockDuration, nil
	case "PendingTxns":
		return &n.PendingTxns, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n MultisigV0State) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (MultisigV0State) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"types.MultisigV0State"}.LookupByIndex(0)
}
func (n MultisigV0State) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n MultisigV0State) MapIterator() ipld.MapIterator {
	return &_MultisigV0State__MapItr{n, 0}
}

type _MultisigV0State__MapItr struct {
	n MultisigV0State
	idx  int
}

func (itr *_MultisigV0State__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 7 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__MultisigV0State_Signers
		v = &itr.n.Signers
	case 1:
		k = &fieldName__MultisigV0State_NumApprovalsThreshold
		v = &itr.n.NumApprovalsThreshold
	case 2:
		k = &fieldName__MultisigV0State_NextTxnID
		v = &itr.n.NextTxnID
	case 3:
		k = &fieldName__MultisigV0State_InitialBalance
		v = &itr.n.InitialBalance
	case 4:
		k = &fieldName__MultisigV0State_StartEpoch
		v = &itr.n.StartEpoch
	case 5:
		k = &fieldName__MultisigV0State_UnlockDuration
		v = &itr.n.UnlockDuration
	case 6:
		k = &fieldName__MultisigV0State_PendingTxns
		v = &itr.n.PendingTxns
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_MultisigV0State__MapItr) Done() bool {
	return itr.idx >= 7
}

func (MultisigV0State) ListIterator() ipld.ListIterator {
	return nil
}
func (MultisigV0State) Length() int {
	return 7
}
func (MultisigV0State) IsAbsent() bool {
	return false
}
func (MultisigV0State) IsNull() bool {
	return false
}
func (MultisigV0State) AsBool() (bool, error) {
	return mixins.Map{"types.MultisigV0State"}.AsBool()
}
func (MultisigV0State) AsInt() (int, error) {
	return mixins.Map{"types.MultisigV0State"}.AsInt()
}
func (MultisigV0State) AsFloat() (float64, error) {
	return mixins.Map{"types.MultisigV0State"}.AsFloat()
}
func (MultisigV0State) AsString() (string, error) {
	return mixins.Map{"types.MultisigV0State"}.AsString()
}
func (MultisigV0State) AsBytes() ([]byte, error) {
	return mixins.Map{"types.MultisigV0State"}.AsBytes()
}
func (MultisigV0State) AsLink() (ipld.Link, error) {
	return mixins.Map{"types.MultisigV0State"}.AsLink()
}
func (MultisigV0State) Prototype() ipld.NodePrototype {
	return _MultisigV0State__Prototype{}
}
type _MultisigV0State__Prototype struct{}

func (_MultisigV0State__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _MultisigV0State__Builder
	nb.Reset()
	return &nb
}
type _MultisigV0State__Builder struct {
	_MultisigV0State__Assembler
}
func (nb *_MultisigV0State__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_MultisigV0State__Builder) Reset() {
	var w _MultisigV0State
	var m schema.Maybe
	*nb = _MultisigV0State__Builder{_MultisigV0State__Assembler{w: &w, m: &m}}
}
type _MultisigV0State__Assembler struct {
	w *_MultisigV0State
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_Signers _List__Address__Assembler
	ca_NumApprovalsThreshold _Int__Assembler
	ca_NextTxnID _Int__Assembler
	ca_InitialBalance _BigInt__Assembler
	ca_StartEpoch _ChainEpoch__Assembler
	ca_UnlockDuration _ChainEpoch__Assembler
	ca_PendingTxns _Link__MultisigV0Transaction__Assembler
	}

func (na *_MultisigV0State__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Signers.reset()
	na.ca_NumApprovalsThreshold.reset()
	na.ca_NextTxnID.reset()
	na.ca_InitialBalance.reset()
	na.ca_StartEpoch.reset()
	na.ca_UnlockDuration.reset()
	na.ca_PendingTxns.reset()
}

var (
	fieldBit__MultisigV0State_Signers = 1 << 0
	fieldBit__MultisigV0State_NumApprovalsThreshold = 1 << 1
	fieldBit__MultisigV0State_NextTxnID = 1 << 2
	fieldBit__MultisigV0State_InitialBalance = 1 << 3
	fieldBit__MultisigV0State_StartEpoch = 1 << 4
	fieldBit__MultisigV0State_UnlockDuration = 1 << 5
	fieldBit__MultisigV0State_PendingTxns = 1 << 6
	fieldBits__MultisigV0State_sufficient = 0 + 1 << 0 + 1 << 1 + 1 << 2 + 1 << 3 + 1 << 4 + 1 << 5 + 1 << 6
)
func (na *_MultisigV0State__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_MultisigV0State{}
	}
	return na, nil
}
func (_MultisigV0State__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"types.MultisigV0State"}.BeginList(0)
}
func (na *_MultisigV0State__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"types.MultisigV0State"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_MultisigV0State__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"types.MultisigV0State"}.AssignBool(false)
}
func (_MultisigV0State__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"types.MultisigV0State"}.AssignInt(0)
}
func (_MultisigV0State__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"types.MultisigV0State"}.AssignFloat(0)
}
func (_MultisigV0State__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"types.MultisigV0State"}.AssignString("")
}
func (_MultisigV0State__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"types.MultisigV0State"}.AssignBytes(nil)
}
func (_MultisigV0State__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"types.MultisigV0State"}.AssignLink(nil)
}
func (na *_MultisigV0State__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_MultisigV0State); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "types.MultisigV0State", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_MultisigV0State__Assembler) Prototype() ipld.NodePrototype {
	return _MultisigV0State__Prototype{}
}
func (ma *_MultisigV0State__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Signers.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_NumApprovalsThreshold.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_NextTxnID.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_InitialBalance.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 4:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_StartEpoch.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 5:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_UnlockDuration.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 6:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_PendingTxns.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_MultisigV0State__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Signers":
		if ma.s & fieldBit__MultisigV0State_Signers != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MultisigV0State_Signers}
		}
		ma.s += fieldBit__MultisigV0State_Signers
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Signers.w = &ma.w.Signers
		ma.ca_Signers.m = &ma.cm
		return &ma.ca_Signers, nil
	case "NumApprovalsThreshold":
		if ma.s & fieldBit__MultisigV0State_NumApprovalsThreshold != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MultisigV0State_NumApprovalsThreshold}
		}
		ma.s += fieldBit__MultisigV0State_NumApprovalsThreshold
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_NumApprovalsThreshold.w = &ma.w.NumApprovalsThreshold
		ma.ca_NumApprovalsThreshold.m = &ma.cm
		return &ma.ca_NumApprovalsThreshold, nil
	case "NextTxnID":
		if ma.s & fieldBit__MultisigV0State_NextTxnID != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MultisigV0State_NextTxnID}
		}
		ma.s += fieldBit__MultisigV0State_NextTxnID
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_NextTxnID.w = &ma.w.NextTxnID
		ma.ca_NextTxnID.m = &ma.cm
		return &ma.ca_NextTxnID, nil
	case "InitialBalance":
		if ma.s & fieldBit__MultisigV0State_InitialBalance != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MultisigV0State_InitialBalance}
		}
		ma.s += fieldBit__MultisigV0State_InitialBalance
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_InitialBalance.w = &ma.w.InitialBalance
		ma.ca_InitialBalance.m = &ma.cm
		return &ma.ca_InitialBalance, nil
	case "StartEpoch":
		if ma.s & fieldBit__MultisigV0State_StartEpoch != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MultisigV0State_StartEpoch}
		}
		ma.s += fieldBit__MultisigV0State_StartEpoch
		ma.state = maState_midValue
		ma.f = 4
		ma.ca_StartEpoch.w = &ma.w.StartEpoch
		ma.ca_StartEpoch.m = &ma.cm
		return &ma.ca_StartEpoch, nil
	case "UnlockDuration":
		if ma.s & fieldBit__MultisigV0State_UnlockDuration != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MultisigV0State_UnlockDuration}
		}
		ma.s += fieldBit__MultisigV0State_UnlockDuration
		ma.state = maState_midValue
		ma.f = 5
		ma.ca_UnlockDuration.w = &ma.w.UnlockDuration
		ma.ca_UnlockDuration.m = &ma.cm
		return &ma.ca_UnlockDuration, nil
	case "PendingTxns":
		if ma.s & fieldBit__MultisigV0State_PendingTxns != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__MultisigV0State_PendingTxns}
		}
		ma.s += fieldBit__MultisigV0State_PendingTxns
		ma.state = maState_midValue
		ma.f = 6
		ma.ca_PendingTxns.w = &ma.w.PendingTxns
		ma.ca_PendingTxns.m = &ma.cm
		return &ma.ca_PendingTxns, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"types.MultisigV0State", Key:&_String{k}}
	}
}
func (ma *_MultisigV0State__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_MultisigV0State__KeyAssembler)(ma)
}
func (ma *_MultisigV0State__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Signers.w = &ma.w.Signers
		ma.ca_Signers.m = &ma.cm
		return &ma.ca_Signers
	case 1:
		ma.ca_NumApprovalsThreshold.w = &ma.w.NumApprovalsThreshold
		ma.ca_NumApprovalsThreshold.m = &ma.cm
		return &ma.ca_NumApprovalsThreshold
	case 2:
		ma.ca_NextTxnID.w = &ma.w.NextTxnID
		ma.ca_NextTxnID.m = &ma.cm
		return &ma.ca_NextTxnID
	case 3:
		ma.ca_InitialBalance.w = &ma.w.InitialBalance
		ma.ca_InitialBalance.m = &ma.cm
		return &ma.ca_InitialBalance
	case 4:
		ma.ca_StartEpoch.w = &ma.w.StartEpoch
		ma.ca_StartEpoch.m = &ma.cm
		return &ma.ca_StartEpoch
	case 5:
		ma.ca_UnlockDuration.w = &ma.w.UnlockDuration
		ma.ca_UnlockDuration.m = &ma.cm
		return &ma.ca_UnlockDuration
	case 6:
		ma.ca_PendingTxns.w = &ma.w.PendingTxns
		ma.ca_PendingTxns.m = &ma.cm
		return &ma.ca_PendingTxns
	default:
		panic("unreachable")
	}
}
func (ma *_MultisigV0State__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_MultisigV0State__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_MultisigV0State__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _MultisigV0State__KeyAssembler _MultisigV0State__Assembler
func (_MultisigV0State__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"types.MultisigV0State.KeyAssembler"}.BeginMap(0)
}
func (_MultisigV0State__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"types.MultisigV0State.KeyAssembler"}.BeginList(0)
}
func (na *_MultisigV0State__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"types.MultisigV0State.KeyAssembler"}.AssignNull()
}
func (_MultisigV0State__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"types.MultisigV0State.KeyAssembler"}.AssignBool(false)
}
func (_MultisigV0State__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"types.MultisigV0State.KeyAssembler"}.AssignInt(0)
}
func (_MultisigV0State__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"types.MultisigV0State.KeyAssembler"}.AssignFloat(0)
}
func (ka *_MultisigV0State__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Signers":
		if ka.s & fieldBit__MultisigV0State_Signers != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MultisigV0State_Signers}
		}
		ka.s += fieldBit__MultisigV0State_Signers
		ka.state = maState_expectValue
		ka.f = 0
	case "NumApprovalsThreshold":
		if ka.s & fieldBit__MultisigV0State_NumApprovalsThreshold != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MultisigV0State_NumApprovalsThreshold}
		}
		ka.s += fieldBit__MultisigV0State_NumApprovalsThreshold
		ka.state = maState_expectValue
		ka.f = 1
	case "NextTxnID":
		if ka.s & fieldBit__MultisigV0State_NextTxnID != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MultisigV0State_NextTxnID}
		}
		ka.s += fieldBit__MultisigV0State_NextTxnID
		ka.state = maState_expectValue
		ka.f = 2
	case "InitialBalance":
		if ka.s & fieldBit__MultisigV0State_InitialBalance != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MultisigV0State_InitialBalance}
		}
		ka.s += fieldBit__MultisigV0State_InitialBalance
		ka.state = maState_expectValue
		ka.f = 3
	case "StartEpoch":
		if ka.s & fieldBit__MultisigV0State_StartEpoch != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MultisigV0State_StartEpoch}
		}
		ka.s += fieldBit__MultisigV0State_StartEpoch
		ka.state = maState_expectValue
		ka.f = 4
	case "UnlockDuration":
		if ka.s & fieldBit__MultisigV0State_UnlockDuration != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MultisigV0State_UnlockDuration}
		}
		ka.s += fieldBit__MultisigV0State_UnlockDuration
		ka.state = maState_expectValue
		ka.f = 5
	case "PendingTxns":
		if ka.s & fieldBit__MultisigV0State_PendingTxns != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__MultisigV0State_PendingTxns}
		}
		ka.s += fieldBit__MultisigV0State_PendingTxns
		ka.state = maState_expectValue
		ka.f = 6
	default:
		return ipld.ErrInvalidKey{TypeName:"types.MultisigV0State", Key:&_String{k}}
	}
	return nil
}
func (_MultisigV0State__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"types.MultisigV0State.KeyAssembler"}.AssignBytes(nil)
}
func (_MultisigV0State__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"types.MultisigV0State.KeyAssembler"}.AssignLink(nil)
}
func (ka *_MultisigV0State__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_MultisigV0State__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (MultisigV0State) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n MultisigV0State) Representation() ipld.Node {
	return (*_MultisigV0State__Repr)(n)
}
type _MultisigV0State__Repr _MultisigV0State
var _ ipld.Node = &_MultisigV0State__Repr{}
func (_MultisigV0State__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_List
}
func (_MultisigV0State__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"types.MultisigV0State.Repr"}.LookupByString("")
}
func (n *_MultisigV0State__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ki, err := key.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(ki)
}
func (n *_MultisigV0State__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	switch idx {
	case 0:
		return n.Signers.Representation(), nil
	case 1:
		return n.NumApprovalsThreshold.Representation(), nil
	case 2:
		return n.NextTxnID.Representation(), nil
	case 3:
		return n.InitialBalance.Representation(), nil
	case 4:
		return n.StartEpoch.Representation(), nil
	case 5:
		return n.UnlockDuration.Representation(), nil
	case 6:
		return n.PendingTxns.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(idx)}
	}
}
func (n _MultisigV0State__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "types.MultisigV0State.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_MultisigV0State__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (n *_MultisigV0State__Repr) ListIterator() ipld.ListIterator {
	return &_MultisigV0State__ReprListItr{n, 0}
}

type _MultisigV0State__ReprListItr struct {
	n   *_MultisigV0State__Repr
	idx int
	
}

func (itr *_MultisigV0State__ReprListItr) Next() (idx int, v ipld.Node, err error) {
	if itr.idx >= 7 {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		idx = itr.idx
		v = itr.n.Signers.Representation()
	case 1:
		idx = itr.idx
		v = itr.n.NumApprovalsThreshold.Representation()
	case 2:
		idx = itr.idx
		v = itr.n.NextTxnID.Representation()
	case 3:
		idx = itr.idx
		v = itr.n.InitialBalance.Representation()
	case 4:
		idx = itr.idx
		v = itr.n.StartEpoch.Representation()
	case 5:
		idx = itr.idx
		v = itr.n.UnlockDuration.Representation()
	case 6:
		idx = itr.idx
		v = itr.n.PendingTxns.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_MultisigV0State__ReprListItr) Done() bool {
	return itr.idx >= 7
}

func (rn *_MultisigV0State__Repr) Length() int {
	l := 7
	return l
}
func (_MultisigV0State__Repr) IsAbsent() bool {
	return false
}
func (_MultisigV0State__Repr) IsNull() bool {
	return false
}
func (_MultisigV0State__Repr) AsBool() (bool, error) {
	return mixins.List{"types.MultisigV0State.Repr"}.AsBool()
}
func (_MultisigV0State__Repr) AsInt() (int, error) {
	return mixins.List{"types.MultisigV0State.Repr"}.AsInt()
}
func (_MultisigV0State__Repr) AsFloat() (float64, error) {
	return mixins.List{"types.MultisigV0State.Repr"}.AsFloat()
}
func (_MultisigV0State__Repr) AsString() (string, error) {
	return mixins.List{"types.MultisigV0State.Repr"}.AsString()
}
func (_MultisigV0State__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"types.MultisigV0State.Repr"}.AsBytes()
}
func (_MultisigV0State__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"types.MultisigV0State.Repr"}.AsLink()
}
func (_MultisigV0State__Repr) Prototype() ipld.NodePrototype {
	return _MultisigV0State__ReprPrototype{}
}
type _MultisigV0State__ReprPrototype struct{}

func (_MultisigV0State__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _MultisigV0State__ReprBuilder
	nb.Reset()
	return &nb
}
type _MultisigV0State__ReprBuilder struct {
	_MultisigV0State__ReprAssembler
}
func (nb *_MultisigV0State__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_MultisigV0State__ReprBuilder) Reset() {
	var w _MultisigV0State
	var m schema.Maybe
	*nb = _MultisigV0State__ReprBuilder{_MultisigV0State__ReprAssembler{w: &w, m: &m}}
}
type _MultisigV0State__ReprAssembler struct {
	w *_MultisigV0State
	m *schema.Maybe
	state laState
	f int

	cm schema.Maybe
	ca_Signers _List__Address__ReprAssembler
	ca_NumApprovalsThreshold _Int__ReprAssembler
	ca_NextTxnID _Int__ReprAssembler
	ca_InitialBalance _BigInt__ReprAssembler
	ca_StartEpoch _ChainEpoch__ReprAssembler
	ca_UnlockDuration _ChainEpoch__ReprAssembler
	ca_PendingTxns _Link__MultisigV0Transaction__ReprAssembler
	}

func (na *_MultisigV0State__ReprAssembler) reset() {
	na.state = laState_initial
	na.f = 0
	na.ca_Signers.reset()
	na.ca_NumApprovalsThreshold.reset()
	na.ca_NextTxnID.reset()
	na.ca_InitialBalance.reset()
	na.ca_StartEpoch.reset()
	na.ca_UnlockDuration.reset()
	na.ca_PendingTxns.reset()
}
func (_MultisigV0State__ReprAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"types.MultisigV0State.Repr"}.BeginMap(0)
}
func (na *_MultisigV0State__ReprAssembler) BeginList(int) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_MultisigV0State{}
	}
	return na, nil
}
func (na *_MultisigV0State__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"types.MultisigV0State.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_MultisigV0State__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"types.MultisigV0State.Repr"}.AssignBool(false)
}
func (_MultisigV0State__ReprAssembler) AssignInt(int) error {
	return mixins.ListAssembler{"types.MultisigV0State.Repr"}.AssignInt(0)
}
func (_MultisigV0State__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"types.MultisigV0State.Repr"}.AssignFloat(0)
}
func (_MultisigV0State__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"types.MultisigV0State.Repr"}.AssignString("")
}
func (_MultisigV0State__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"types.MultisigV0State.Repr"}.AssignBytes(nil)
}
func (_MultisigV0State__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"types.MultisigV0State.Repr"}.AssignLink(nil)
}
func (na *_MultisigV0State__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_MultisigV0State); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_List {
		return ipld.ErrWrongKind{TypeName: "types.MultisigV0State.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustList, ActualKind: v.ReprKind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_MultisigV0State__ReprAssembler) Prototype() ipld.NodePrototype {
	return _MultisigV0State__ReprPrototype{}
}
func (la *_MultisigV0State__ReprAssembler) valueFinishTidy() bool {
	switch la.f {
	case 0:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 1:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 2:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 3:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 4:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 5:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 6:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (la *_MultisigV0State__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	if la.f >= 7 {
		return nil // schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(7)} // FIXME: need an error thunking assembler!  it has returned.  sigh.
	}
	la.state = laState_midValue
	switch la.f {
	case 0:
		la.ca_Signers.w = &la.w.Signers
		la.ca_Signers.m = &la.cm
		return &la.ca_Signers
	case 1:
		la.ca_NumApprovalsThreshold.w = &la.w.NumApprovalsThreshold
		la.ca_NumApprovalsThreshold.m = &la.cm
		return &la.ca_NumApprovalsThreshold
	case 2:
		la.ca_NextTxnID.w = &la.w.NextTxnID
		la.ca_NextTxnID.m = &la.cm
		return &la.ca_NextTxnID
	case 3:
		la.ca_InitialBalance.w = &la.w.InitialBalance
		la.ca_InitialBalance.m = &la.cm
		return &la.ca_InitialBalance
	case 4:
		la.ca_StartEpoch.w = &la.w.StartEpoch
		la.ca_StartEpoch.m = &la.cm
		return &la.ca_StartEpoch
	case 5:
		la.ca_UnlockDuration.w = &la.w.UnlockDuration
		la.ca_UnlockDuration.m = &la.cm
		return &la.ca_UnlockDuration
	case 6:
		la.ca_PendingTxns.w = &la.w.PendingTxns
		la.ca_PendingTxns.m = &la.cm
		return &la.ca_PendingTxns
	default:
		panic("unreachable")
	}
}
func (la *_MultisigV0State__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_MultisigV0State__ReprAssembler) ValuePrototype(_ int) ipld.NodePrototype {
	panic("todo structbuilder tuplerepr valueprototype")
}
